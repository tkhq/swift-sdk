import { THttpConfig, TSignedRequest, TStamper } from "../../../../../base";
import type { TGetActivityBody, TGetActivityResponse } from "./public_api.fetcher";
import type { TGetApiKeyBody, TGetApiKeyResponse } from "./public_api.fetcher";
import type { TGetApiKeysBody, TGetApiKeysResponse } from "./public_api.fetcher";
import type { TGetAttestationDocumentBody, TGetAttestationDocumentResponse } from "./public_api.fetcher";
import type { TGetAuthenticatorBody, TGetAuthenticatorResponse } from "./public_api.fetcher";
import type { TGetAuthenticatorsBody, TGetAuthenticatorsResponse } from "./public_api.fetcher";
import type { TGetOauthProvidersBody, TGetOauthProvidersResponse } from "./public_api.fetcher";
import type { TGetOrganizationBody, TGetOrganizationResponse } from "./public_api.fetcher";
import type { TGetOrganizationConfigsBody, TGetOrganizationConfigsResponse } from "./public_api.fetcher";
import type { TGetPolicyBody, TGetPolicyResponse } from "./public_api.fetcher";
import type { TGetPrivateKeyBody, TGetPrivateKeyResponse } from "./public_api.fetcher";
import type { TGetUserBody, TGetUserResponse } from "./public_api.fetcher";
import type { TGetWalletBody, TGetWalletResponse } from "./public_api.fetcher";
import type { TGetWalletAccountBody, TGetWalletAccountResponse } from "./public_api.fetcher";
import type { TGetActivitiesBody, TGetActivitiesResponse } from "./public_api.fetcher";
import type { TGetPoliciesBody, TGetPoliciesResponse } from "./public_api.fetcher";
import type { TListPrivateKeyTagsBody, TListPrivateKeyTagsResponse } from "./public_api.fetcher";
import type { TGetPrivateKeysBody, TGetPrivateKeysResponse } from "./public_api.fetcher";
import type { TGetSubOrgIdsBody, TGetSubOrgIdsResponse } from "./public_api.fetcher";
import type { TListUserTagsBody, TListUserTagsResponse } from "./public_api.fetcher";
import type { TGetUsersBody, TGetUsersResponse } from "./public_api.fetcher";
import type { TGetVerifiedSubOrgIdsBody, TGetVerifiedSubOrgIdsResponse } from "./public_api.fetcher";
import type { TGetWalletAccountsBody, TGetWalletAccountsResponse } from "./public_api.fetcher";
import type { TGetWalletsBody, TGetWalletsResponse } from "./public_api.fetcher";
import type { TGetWhoamiBody, TGetWhoamiResponse } from "./public_api.fetcher";
import type { TApproveActivityBody, TApproveActivityResponse } from "./public_api.fetcher";
import type { TCreateApiKeysBody, TCreateApiKeysResponse } from "./public_api.fetcher";
import type { TCreateApiOnlyUsersBody, TCreateApiOnlyUsersResponse } from "./public_api.fetcher";
import type { TCreateAuthenticatorsBody, TCreateAuthenticatorsResponse } from "./public_api.fetcher";
import type { TCreateInvitationsBody, TCreateInvitationsResponse } from "./public_api.fetcher";
import type { TCreateOauthProvidersBody, TCreateOauthProvidersResponse } from "./public_api.fetcher";
import type { TCreatePoliciesBody, TCreatePoliciesResponse } from "./public_api.fetcher";
import type { TCreatePolicyBody, TCreatePolicyResponse } from "./public_api.fetcher";
import type { TCreatePrivateKeyTagBody, TCreatePrivateKeyTagResponse } from "./public_api.fetcher";
import type { TCreatePrivateKeysBody, TCreatePrivateKeysResponse } from "./public_api.fetcher";
import type { TCreateReadOnlySessionBody, TCreateReadOnlySessionResponse } from "./public_api.fetcher";
import type { TCreateReadWriteSessionBody, TCreateReadWriteSessionResponse } from "./public_api.fetcher";
import type { TCreateSubOrganizationBody, TCreateSubOrganizationResponse } from "./public_api.fetcher";
import type { TCreateUserTagBody, TCreateUserTagResponse } from "./public_api.fetcher";
import type { TCreateUsersBody, TCreateUsersResponse } from "./public_api.fetcher";
import type { TCreateWalletBody, TCreateWalletResponse } from "./public_api.fetcher";
import type { TCreateWalletAccountsBody, TCreateWalletAccountsResponse } from "./public_api.fetcher";
import type { TDeleteApiKeysBody, TDeleteApiKeysResponse } from "./public_api.fetcher";
import type { TDeleteAuthenticatorsBody, TDeleteAuthenticatorsResponse } from "./public_api.fetcher";
import type { TDeleteInvitationBody, TDeleteInvitationResponse } from "./public_api.fetcher";
import type { TDeleteOauthProvidersBody, TDeleteOauthProvidersResponse } from "./public_api.fetcher";
import type { TDeletePolicyBody, TDeletePolicyResponse } from "./public_api.fetcher";
import type { TDeletePrivateKeyTagsBody, TDeletePrivateKeyTagsResponse } from "./public_api.fetcher";
import type { TDeletePrivateKeysBody, TDeletePrivateKeysResponse } from "./public_api.fetcher";
import type { TDeleteSubOrganizationBody, TDeleteSubOrganizationResponse } from "./public_api.fetcher";
import type { TDeleteUserTagsBody, TDeleteUserTagsResponse } from "./public_api.fetcher";
import type { TDeleteUsersBody, TDeleteUsersResponse } from "./public_api.fetcher";
import type { TDeleteWalletsBody, TDeleteWalletsResponse } from "./public_api.fetcher";
import type { TEmailAuthBody, TEmailAuthResponse } from "./public_api.fetcher";
import type { TExportPrivateKeyBody, TExportPrivateKeyResponse } from "./public_api.fetcher";
import type { TExportWalletBody, TExportWalletResponse } from "./public_api.fetcher";
import type { TExportWalletAccountBody, TExportWalletAccountResponse } from "./public_api.fetcher";
import type { TImportPrivateKeyBody, TImportPrivateKeyResponse } from "./public_api.fetcher";
import type { TImportWalletBody, TImportWalletResponse } from "./public_api.fetcher";
import type { TInitImportPrivateKeyBody, TInitImportPrivateKeyResponse } from "./public_api.fetcher";
import type { TInitImportWalletBody, TInitImportWalletResponse } from "./public_api.fetcher";
import type { TInitOtpBody, TInitOtpResponse } from "./public_api.fetcher";
import type { TInitOtpAuthBody, TInitOtpAuthResponse } from "./public_api.fetcher";
import type { TInitUserEmailRecoveryBody, TInitUserEmailRecoveryResponse } from "./public_api.fetcher";
import type { TOauthBody, TOauthResponse } from "./public_api.fetcher";
import type { TOauthLoginBody, TOauthLoginResponse } from "./public_api.fetcher";
import type { TOtpAuthBody, TOtpAuthResponse } from "./public_api.fetcher";
import type { TOtpLoginBody, TOtpLoginResponse } from "./public_api.fetcher";
import type { TRecoverUserBody, TRecoverUserResponse } from "./public_api.fetcher";
import type { TRejectActivityBody, TRejectActivityResponse } from "./public_api.fetcher";
import type { TRemoveOrganizationFeatureBody, TRemoveOrganizationFeatureResponse } from "./public_api.fetcher";
import type { TSetOrganizationFeatureBody, TSetOrganizationFeatureResponse } from "./public_api.fetcher";
import type { TSignRawPayloadBody, TSignRawPayloadResponse } from "./public_api.fetcher";
import type { TSignRawPayloadsBody, TSignRawPayloadsResponse } from "./public_api.fetcher";
import type { TSignTransactionBody, TSignTransactionResponse } from "./public_api.fetcher";
import type { TStampLoginBody, TStampLoginResponse } from "./public_api.fetcher";
import type { TUpdatePolicyBody, TUpdatePolicyResponse } from "./public_api.fetcher";
import type { TUpdatePrivateKeyTagBody, TUpdatePrivateKeyTagResponse } from "./public_api.fetcher";
import type { TUpdateRootQuorumBody, TUpdateRootQuorumResponse } from "./public_api.fetcher";
import type { TUpdateUserBody, TUpdateUserResponse } from "./public_api.fetcher";
import type { TUpdateUserTagBody, TUpdateUserTagResponse } from "./public_api.fetcher";
import type { TUpdateWalletBody, TUpdateWalletResponse } from "./public_api.fetcher";
import type { TVerifyOtpBody, TVerifyOtpResponse } from "./public_api.fetcher";
import type { TTestRateLimitsBody, TTestRateLimitsResponse } from "./public_api.fetcher";
export declare class TurnkeyClient {
    config: THttpConfig;
    stamper: TStamper;
    constructor(config: THttpConfig, stamper: TStamper);
    request<TBodyType, TResponseType>(url: string, body: TBodyType): Promise<TResponseType>;
    /**
     * Get details about an Activity
     *
     * Sign the provided `TGetActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_activity).
     *
     * See also {@link stampGetActivity}.
     */
    getActivity: (input: TGetActivityBody) => Promise<TGetActivityResponse>;
    /**
     * Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.
     *
     * See also {@link GetActivity}.
     */
    stampGetActivity: (input: TGetActivityBody) => Promise<TSignedRequest>;
    /**
     * Get details about an API key
     *
     * Sign the provided `TGetApiKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_key).
     *
     * See also {@link stampGetApiKey}.
     */
    getApiKey: (input: TGetApiKeyBody) => Promise<TGetApiKeyResponse>;
    /**
     * Produce a `SignedRequest` from `TGetApiKeyBody` by using the client's `stamp` function.
     *
     * See also {@link GetApiKey}.
     */
    stampGetApiKey: (input: TGetApiKeyBody) => Promise<TSignedRequest>;
    /**
     * Get details about API keys for a user
     *
     * Sign the provided `TGetApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_keys).
     *
     * See also {@link stampGetApiKeys}.
     */
    getApiKeys: (input: TGetApiKeysBody) => Promise<TGetApiKeysResponse>;
    /**
     * Produce a `SignedRequest` from `TGetApiKeysBody` by using the client's `stamp` function.
     *
     * See also {@link GetApiKeys}.
     */
    stampGetApiKeys: (input: TGetApiKeysBody) => Promise<TSignedRequest>;
    /**
     * Get the attestation document corresponding to an enclave.
     *
     * Sign the provided `TGetAttestationDocumentBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_attestation).
     *
     * See also {@link stampGetAttestationDocument}.
     */
    getAttestationDocument: (input: TGetAttestationDocumentBody) => Promise<TGetAttestationDocumentResponse>;
    /**
     * Produce a `SignedRequest` from `TGetAttestationDocumentBody` by using the client's `stamp` function.
     *
     * See also {@link GetAttestationDocument}.
     */
    stampGetAttestationDocument: (input: TGetAttestationDocumentBody) => Promise<TSignedRequest>;
    /**
     * Get details about an authenticator
     *
     * Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticator).
     *
     * See also {@link stampGetAuthenticator}.
     */
    getAuthenticator: (input: TGetAuthenticatorBody) => Promise<TGetAuthenticatorResponse>;
    /**
     * Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.
     *
     * See also {@link GetAuthenticator}.
     */
    stampGetAuthenticator: (input: TGetAuthenticatorBody) => Promise<TSignedRequest>;
    /**
     * Get details about authenticators for a user
     *
     * Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticators).
     *
     * See also {@link stampGetAuthenticators}.
     */
    getAuthenticators: (input: TGetAuthenticatorsBody) => Promise<TGetAuthenticatorsResponse>;
    /**
     * Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.
     *
     * See also {@link GetAuthenticators}.
     */
    stampGetAuthenticators: (input: TGetAuthenticatorsBody) => Promise<TSignedRequest>;
    /**
     * Get details about Oauth providers for a user
     *
     * Sign the provided `TGetOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_oauth_providers).
     *
     * See also {@link stampGetOauthProviders}.
     */
    getOauthProviders: (input: TGetOauthProvidersBody) => Promise<TGetOauthProvidersResponse>;
    /**
     * Produce a `SignedRequest` from `TGetOauthProvidersBody` by using the client's `stamp` function.
     *
     * See also {@link GetOauthProviders}.
     */
    stampGetOauthProviders: (input: TGetOauthProvidersBody) => Promise<TSignedRequest>;
    /**
     * Get details about an Organization
     *
     * Sign the provided `TGetOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization).
     *
     * See also {@link stampGetOrganization}.
     */
    getOrganization: (input: TGetOrganizationBody) => Promise<TGetOrganizationResponse>;
    /**
     * Produce a `SignedRequest` from `TGetOrganizationBody` by using the client's `stamp` function.
     *
     * See also {@link GetOrganization}.
     */
    stampGetOrganization: (input: TGetOrganizationBody) => Promise<TSignedRequest>;
    /**
     * Get quorum settings and features for an organization
     *
     * Sign the provided `TGetOrganizationConfigsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization_configs).
     *
     * See also {@link stampGetOrganizationConfigs}.
     */
    getOrganizationConfigs: (input: TGetOrganizationConfigsBody) => Promise<TGetOrganizationConfigsResponse>;
    /**
     * Produce a `SignedRequest` from `TGetOrganizationConfigsBody` by using the client's `stamp` function.
     *
     * See also {@link GetOrganizationConfigs}.
     */
    stampGetOrganizationConfigs: (input: TGetOrganizationConfigsBody) => Promise<TSignedRequest>;
    /**
     * Get details about a Policy
     *
     * Sign the provided `TGetPolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_policy).
     *
     * See also {@link stampGetPolicy}.
     */
    getPolicy: (input: TGetPolicyBody) => Promise<TGetPolicyResponse>;
    /**
     * Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.
     *
     * See also {@link GetPolicy}.
     */
    stampGetPolicy: (input: TGetPolicyBody) => Promise<TSignedRequest>;
    /**
     * Get details about a Private Key
     *
     * Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_private_key).
     *
     * See also {@link stampGetPrivateKey}.
     */
    getPrivateKey: (input: TGetPrivateKeyBody) => Promise<TGetPrivateKeyResponse>;
    /**
     * Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.
     *
     * See also {@link GetPrivateKey}.
     */
    stampGetPrivateKey: (input: TGetPrivateKeyBody) => Promise<TSignedRequest>;
    /**
     * Get details about a User
     *
     * Sign the provided `TGetUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_user).
     *
     * See also {@link stampGetUser}.
     */
    getUser: (input: TGetUserBody) => Promise<TGetUserResponse>;
    /**
     * Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.
     *
     * See also {@link GetUser}.
     */
    stampGetUser: (input: TGetUserBody) => Promise<TSignedRequest>;
    /**
     * Get details about a Wallet
     *
     * Sign the provided `TGetWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet).
     *
     * See also {@link stampGetWallet}.
     */
    getWallet: (input: TGetWalletBody) => Promise<TGetWalletResponse>;
    /**
     * Produce a `SignedRequest` from `TGetWalletBody` by using the client's `stamp` function.
     *
     * See also {@link GetWallet}.
     */
    stampGetWallet: (input: TGetWalletBody) => Promise<TSignedRequest>;
    /**
     * Get a single wallet account
     *
     * Sign the provided `TGetWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet_account).
     *
     * See also {@link stampGetWalletAccount}.
     */
    getWalletAccount: (input: TGetWalletAccountBody) => Promise<TGetWalletAccountResponse>;
    /**
     * Produce a `SignedRequest` from `TGetWalletAccountBody` by using the client's `stamp` function.
     *
     * See also {@link GetWalletAccount}.
     */
    stampGetWalletAccount: (input: TGetWalletAccountBody) => Promise<TSignedRequest>;
    /**
     * List all Activities within an Organization
     *
     * Sign the provided `TGetActivitiesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_activities).
     *
     * See also {@link stampGetActivities}.
     */
    getActivities: (input: TGetActivitiesBody) => Promise<TGetActivitiesResponse>;
    /**
     * Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.
     *
     * See also {@link GetActivities}.
     */
    stampGetActivities: (input: TGetActivitiesBody) => Promise<TSignedRequest>;
    /**
     * List all Policies within an Organization
     *
     * Sign the provided `TGetPoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_policies).
     *
     * See also {@link stampGetPolicies}.
     */
    getPolicies: (input: TGetPoliciesBody) => Promise<TGetPoliciesResponse>;
    /**
     * Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.
     *
     * See also {@link GetPolicies}.
     */
    stampGetPolicies: (input: TGetPoliciesBody) => Promise<TSignedRequest>;
    /**
     * List all Private Key Tags within an Organization
     *
     * Sign the provided `TListPrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_key_tags).
     *
     * See also {@link stampListPrivateKeyTags}.
     */
    listPrivateKeyTags: (input: TListPrivateKeyTagsBody) => Promise<TListPrivateKeyTagsResponse>;
    /**
     * Produce a `SignedRequest` from `TListPrivateKeyTagsBody` by using the client's `stamp` function.
     *
     * See also {@link ListPrivateKeyTags}.
     */
    stampListPrivateKeyTags: (input: TListPrivateKeyTagsBody) => Promise<TSignedRequest>;
    /**
     * List all Private Keys within an Organization
     *
     * Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_keys).
     *
     * See also {@link stampGetPrivateKeys}.
     */
    getPrivateKeys: (input: TGetPrivateKeysBody) => Promise<TGetPrivateKeysResponse>;
    /**
     * Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.
     *
     * See also {@link GetPrivateKeys}.
     */
    stampGetPrivateKeys: (input: TGetPrivateKeysBody) => Promise<TSignedRequest>;
    /**
     * Get all suborg IDs associated given a parent org ID and an optional filter.
     *
     * Sign the provided `TGetSubOrgIdsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_suborgs).
     *
     * See also {@link stampGetSubOrgIds}.
     */
    getSubOrgIds: (input: TGetSubOrgIdsBody) => Promise<TGetSubOrgIdsResponse>;
    /**
     * Produce a `SignedRequest` from `TGetSubOrgIdsBody` by using the client's `stamp` function.
     *
     * See also {@link GetSubOrgIds}.
     */
    stampGetSubOrgIds: (input: TGetSubOrgIdsBody) => Promise<TSignedRequest>;
    /**
     * List all User Tags within an Organization
     *
     * Sign the provided `TListUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_user_tags).
     *
     * See also {@link stampListUserTags}.
     */
    listUserTags: (input: TListUserTagsBody) => Promise<TListUserTagsResponse>;
    /**
     * Produce a `SignedRequest` from `TListUserTagsBody` by using the client's `stamp` function.
     *
     * See also {@link ListUserTags}.
     */
    stampListUserTags: (input: TListUserTagsBody) => Promise<TSignedRequest>;
    /**
     * List all Users within an Organization
     *
     * Sign the provided `TGetUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_users).
     *
     * See also {@link stampGetUsers}.
     */
    getUsers: (input: TGetUsersBody) => Promise<TGetUsersResponse>;
    /**
     * Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.
     *
     * See also {@link GetUsers}.
     */
    stampGetUsers: (input: TGetUsersBody) => Promise<TSignedRequest>;
    /**
     * Get all email or phone verified suborg IDs associated given a parent org ID.
     *
     * Sign the provided `TGetVerifiedSubOrgIdsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_verified_suborgs).
     *
     * See also {@link stampGetVerifiedSubOrgIds}.
     */
    getVerifiedSubOrgIds: (input: TGetVerifiedSubOrgIdsBody) => Promise<TGetVerifiedSubOrgIdsResponse>;
    /**
     * Produce a `SignedRequest` from `TGetVerifiedSubOrgIdsBody` by using the client's `stamp` function.
     *
     * See also {@link GetVerifiedSubOrgIds}.
     */
    stampGetVerifiedSubOrgIds: (input: TGetVerifiedSubOrgIdsBody) => Promise<TSignedRequest>;
    /**
     * List all Accounts within a Wallet
     *
     * Sign the provided `TGetWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallet_accounts).
     *
     * See also {@link stampGetWalletAccounts}.
     */
    getWalletAccounts: (input: TGetWalletAccountsBody) => Promise<TGetWalletAccountsResponse>;
    /**
     * Produce a `SignedRequest` from `TGetWalletAccountsBody` by using the client's `stamp` function.
     *
     * See also {@link GetWalletAccounts}.
     */
    stampGetWalletAccounts: (input: TGetWalletAccountsBody) => Promise<TSignedRequest>;
    /**
     * List all Wallets within an Organization
     *
     * Sign the provided `TGetWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallets).
     *
     * See also {@link stampGetWallets}.
     */
    getWallets: (input: TGetWalletsBody) => Promise<TGetWalletsResponse>;
    /**
     * Produce a `SignedRequest` from `TGetWalletsBody` by using the client's `stamp` function.
     *
     * See also {@link GetWallets}.
     */
    stampGetWallets: (input: TGetWalletsBody) => Promise<TSignedRequest>;
    /**
     * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.
     *
     * Sign the provided `TGetWhoamiBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/whoami).
     *
     * See also {@link stampGetWhoami}.
     */
    getWhoami: (input: TGetWhoamiBody) => Promise<TGetWhoamiResponse>;
    /**
     * Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.
     *
     * See also {@link GetWhoami}.
     */
    stampGetWhoami: (input: TGetWhoamiBody) => Promise<TSignedRequest>;
    /**
     * Approve an Activity
     *
     * Sign the provided `TApproveActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/approve_activity).
     *
     * See also {@link stampApproveActivity}.
     */
    approveActivity: (input: TApproveActivityBody) => Promise<TApproveActivityResponse>;
    /**
     * Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.
     *
     * See also {@link ApproveActivity}.
     */
    stampApproveActivity: (input: TApproveActivityBody) => Promise<TSignedRequest>;
    /**
     * Add api keys to an existing User
     *
     * Sign the provided `TCreateApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_keys).
     *
     * See also {@link stampCreateApiKeys}.
     */
    createApiKeys: (input: TCreateApiKeysBody) => Promise<TCreateApiKeysResponse>;
    /**
     * Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.
     *
     * See also {@link CreateApiKeys}.
     */
    stampCreateApiKeys: (input: TCreateApiKeysBody) => Promise<TSignedRequest>;
    /**
     * Create API-only Users in an existing Organization
     *
     * Sign the provided `TCreateApiOnlyUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_only_users).
     *
     * See also {@link stampCreateApiOnlyUsers}.
     */
    createApiOnlyUsers: (input: TCreateApiOnlyUsersBody) => Promise<TCreateApiOnlyUsersResponse>;
    /**
     * Produce a `SignedRequest` from `TCreateApiOnlyUsersBody` by using the client's `stamp` function.
     *
     * See also {@link CreateApiOnlyUsers}.
     */
    stampCreateApiOnlyUsers: (input: TCreateApiOnlyUsersBody) => Promise<TSignedRequest>;
    /**
     * Create Authenticators to authenticate requests to Turnkey
     *
     * Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_authenticators).
     *
     * See also {@link stampCreateAuthenticators}.
     */
    createAuthenticators: (input: TCreateAuthenticatorsBody) => Promise<TCreateAuthenticatorsResponse>;
    /**
     * Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.
     *
     * See also {@link CreateAuthenticators}.
     */
    stampCreateAuthenticators: (input: TCreateAuthenticatorsBody) => Promise<TSignedRequest>;
    /**
     * Create Invitations to join an existing Organization
     *
     * Sign the provided `TCreateInvitationsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_invitations).
     *
     * See also {@link stampCreateInvitations}.
     */
    createInvitations: (input: TCreateInvitationsBody) => Promise<TCreateInvitationsResponse>;
    /**
     * Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.
     *
     * See also {@link CreateInvitations}.
     */
    stampCreateInvitations: (input: TCreateInvitationsBody) => Promise<TSignedRequest>;
    /**
     * Creates Oauth providers for a specified user - BETA
     *
     * Sign the provided `TCreateOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_oauth_providers).
     *
     * See also {@link stampCreateOauthProviders}.
     */
    createOauthProviders: (input: TCreateOauthProvidersBody) => Promise<TCreateOauthProvidersResponse>;
    /**
     * Produce a `SignedRequest` from `TCreateOauthProvidersBody` by using the client's `stamp` function.
     *
     * See also {@link CreateOauthProviders}.
     */
    stampCreateOauthProviders: (input: TCreateOauthProvidersBody) => Promise<TSignedRequest>;
    /**
     * Create new Policies
     *
     * Sign the provided `TCreatePoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policies).
     *
     * See also {@link stampCreatePolicies}.
     */
    createPolicies: (input: TCreatePoliciesBody) => Promise<TCreatePoliciesResponse>;
    /**
     * Produce a `SignedRequest` from `TCreatePoliciesBody` by using the client's `stamp` function.
     *
     * See also {@link CreatePolicies}.
     */
    stampCreatePolicies: (input: TCreatePoliciesBody) => Promise<TSignedRequest>;
    /**
     * Create a new Policy
     *
     * Sign the provided `TCreatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policy).
     *
     * See also {@link stampCreatePolicy}.
     */
    createPolicy: (input: TCreatePolicyBody) => Promise<TCreatePolicyResponse>;
    /**
     * Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.
     *
     * See also {@link CreatePolicy}.
     */
    stampCreatePolicy: (input: TCreatePolicyBody) => Promise<TSignedRequest>;
    /**
     * Create a private key tag and add it to private keys.
     *
     * Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_key_tag).
     *
     * See also {@link stampCreatePrivateKeyTag}.
     */
    createPrivateKeyTag: (input: TCreatePrivateKeyTagBody) => Promise<TCreatePrivateKeyTagResponse>;
    /**
     * Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.
     *
     * See also {@link CreatePrivateKeyTag}.
     */
    stampCreatePrivateKeyTag: (input: TCreatePrivateKeyTagBody) => Promise<TSignedRequest>;
    /**
     * Create new Private Keys
     *
     * Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_keys).
     *
     * See also {@link stampCreatePrivateKeys}.
     */
    createPrivateKeys: (input: TCreatePrivateKeysBody) => Promise<TCreatePrivateKeysResponse>;
    /**
     * Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.
     *
     * See also {@link CreatePrivateKeys}.
     */
    stampCreatePrivateKeys: (input: TCreatePrivateKeysBody) => Promise<TSignedRequest>;
    /**
     * Create a read only session for a user (valid for 1 hour)
     *
     * Sign the provided `TCreateReadOnlySessionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_read_only_session).
     *
     * See also {@link stampCreateReadOnlySession}.
     */
    createReadOnlySession: (input: TCreateReadOnlySessionBody) => Promise<TCreateReadOnlySessionResponse>;
    /**
     * Produce a `SignedRequest` from `TCreateReadOnlySessionBody` by using the client's `stamp` function.
     *
     * See also {@link CreateReadOnlySession}.
     */
    stampCreateReadOnlySession: (input: TCreateReadOnlySessionBody) => Promise<TSignedRequest>;
    /**
     * Create a read write session for a user
     *
     * Sign the provided `TCreateReadWriteSessionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_read_write_session).
     *
     * See also {@link stampCreateReadWriteSession}.
     */
    createReadWriteSession: (input: TCreateReadWriteSessionBody) => Promise<TCreateReadWriteSessionResponse>;
    /**
     * Produce a `SignedRequest` from `TCreateReadWriteSessionBody` by using the client's `stamp` function.
     *
     * See also {@link CreateReadWriteSession}.
     */
    stampCreateReadWriteSession: (input: TCreateReadWriteSessionBody) => Promise<TSignedRequest>;
    /**
     * Create a new Sub-Organization
     *
     * Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_sub_organization).
     *
     * See also {@link stampCreateSubOrganization}.
     */
    createSubOrganization: (input: TCreateSubOrganizationBody) => Promise<TCreateSubOrganizationResponse>;
    /**
     * Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.
     *
     * See also {@link CreateSubOrganization}.
     */
    stampCreateSubOrganization: (input: TCreateSubOrganizationBody) => Promise<TSignedRequest>;
    /**
     * Create a user tag and add it to users.
     *
     * Sign the provided `TCreateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_user_tag).
     *
     * See also {@link stampCreateUserTag}.
     */
    createUserTag: (input: TCreateUserTagBody) => Promise<TCreateUserTagResponse>;
    /**
     * Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.
     *
     * See also {@link CreateUserTag}.
     */
    stampCreateUserTag: (input: TCreateUserTagBody) => Promise<TSignedRequest>;
    /**
     * Create Users in an existing Organization
     *
     * Sign the provided `TCreateUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_users).
     *
     * See also {@link stampCreateUsers}.
     */
    createUsers: (input: TCreateUsersBody) => Promise<TCreateUsersResponse>;
    /**
     * Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.
     *
     * See also {@link CreateUsers}.
     */
    stampCreateUsers: (input: TCreateUsersBody) => Promise<TSignedRequest>;
    /**
     * Create a Wallet and derive addresses
     *
     * Sign the provided `TCreateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet).
     *
     * See also {@link stampCreateWallet}.
     */
    createWallet: (input: TCreateWalletBody) => Promise<TCreateWalletResponse>;
    /**
     * Produce a `SignedRequest` from `TCreateWalletBody` by using the client's `stamp` function.
     *
     * See also {@link CreateWallet}.
     */
    stampCreateWallet: (input: TCreateWalletBody) => Promise<TSignedRequest>;
    /**
     * Derive additional addresses using an existing wallet
     *
     * Sign the provided `TCreateWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet_accounts).
     *
     * See also {@link stampCreateWalletAccounts}.
     */
    createWalletAccounts: (input: TCreateWalletAccountsBody) => Promise<TCreateWalletAccountsResponse>;
    /**
     * Produce a `SignedRequest` from `TCreateWalletAccountsBody` by using the client's `stamp` function.
     *
     * See also {@link CreateWalletAccounts}.
     */
    stampCreateWalletAccounts: (input: TCreateWalletAccountsBody) => Promise<TSignedRequest>;
    /**
     * Remove api keys from a User
     *
     * Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_api_keys).
     *
     * See also {@link stampDeleteApiKeys}.
     */
    deleteApiKeys: (input: TDeleteApiKeysBody) => Promise<TDeleteApiKeysResponse>;
    /**
     * Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.
     *
     * See also {@link DeleteApiKeys}.
     */
    stampDeleteApiKeys: (input: TDeleteApiKeysBody) => Promise<TSignedRequest>;
    /**
     * Remove authenticators from a User
     *
     * Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_authenticators).
     *
     * See also {@link stampDeleteAuthenticators}.
     */
    deleteAuthenticators: (input: TDeleteAuthenticatorsBody) => Promise<TDeleteAuthenticatorsResponse>;
    /**
     * Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.
     *
     * See also {@link DeleteAuthenticators}.
     */
    stampDeleteAuthenticators: (input: TDeleteAuthenticatorsBody) => Promise<TSignedRequest>;
    /**
     * Delete an existing Invitation
     *
     * Sign the provided `TDeleteInvitationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_invitation).
     *
     * See also {@link stampDeleteInvitation}.
     */
    deleteInvitation: (input: TDeleteInvitationBody) => Promise<TDeleteInvitationResponse>;
    /**
     * Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.
     *
     * See also {@link DeleteInvitation}.
     */
    stampDeleteInvitation: (input: TDeleteInvitationBody) => Promise<TSignedRequest>;
    /**
     * Removes Oauth providers for a specified user - BETA
     *
     * Sign the provided `TDeleteOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_oauth_providers).
     *
     * See also {@link stampDeleteOauthProviders}.
     */
    deleteOauthProviders: (input: TDeleteOauthProvidersBody) => Promise<TDeleteOauthProvidersResponse>;
    /**
     * Produce a `SignedRequest` from `TDeleteOauthProvidersBody` by using the client's `stamp` function.
     *
     * See also {@link DeleteOauthProviders}.
     */
    stampDeleteOauthProviders: (input: TDeleteOauthProvidersBody) => Promise<TSignedRequest>;
    /**
     * Delete an existing Policy
     *
     * Sign the provided `TDeletePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_policy).
     *
     * See also {@link stampDeletePolicy}.
     */
    deletePolicy: (input: TDeletePolicyBody) => Promise<TDeletePolicyResponse>;
    /**
     * Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.
     *
     * See also {@link DeletePolicy}.
     */
    stampDeletePolicy: (input: TDeletePolicyBody) => Promise<TSignedRequest>;
    /**
     * Delete Private Key Tags within an Organization
     *
     * Sign the provided `TDeletePrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_private_key_tags).
     *
     * See also {@link stampDeletePrivateKeyTags}.
     */
    deletePrivateKeyTags: (input: TDeletePrivateKeyTagsBody) => Promise<TDeletePrivateKeyTagsResponse>;
    /**
     * Produce a `SignedRequest` from `TDeletePrivateKeyTagsBody` by using the client's `stamp` function.
     *
     * See also {@link DeletePrivateKeyTags}.
     */
    stampDeletePrivateKeyTags: (input: TDeletePrivateKeyTagsBody) => Promise<TSignedRequest>;
    /**
     * Deletes private keys for an organization
     *
     * Sign the provided `TDeletePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_private_keys).
     *
     * See also {@link stampDeletePrivateKeys}.
     */
    deletePrivateKeys: (input: TDeletePrivateKeysBody) => Promise<TDeletePrivateKeysResponse>;
    /**
     * Produce a `SignedRequest` from `TDeletePrivateKeysBody` by using the client's `stamp` function.
     *
     * See also {@link DeletePrivateKeys}.
     */
    stampDeletePrivateKeys: (input: TDeletePrivateKeysBody) => Promise<TSignedRequest>;
    /**
     * Deletes a sub organization
     *
     * Sign the provided `TDeleteSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_sub_organization).
     *
     * See also {@link stampDeleteSubOrganization}.
     */
    deleteSubOrganization: (input: TDeleteSubOrganizationBody) => Promise<TDeleteSubOrganizationResponse>;
    /**
     * Produce a `SignedRequest` from `TDeleteSubOrganizationBody` by using the client's `stamp` function.
     *
     * See also {@link DeleteSubOrganization}.
     */
    stampDeleteSubOrganization: (input: TDeleteSubOrganizationBody) => Promise<TSignedRequest>;
    /**
     * Delete User Tags within an Organization
     *
     * Sign the provided `TDeleteUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_user_tags).
     *
     * See also {@link stampDeleteUserTags}.
     */
    deleteUserTags: (input: TDeleteUserTagsBody) => Promise<TDeleteUserTagsResponse>;
    /**
     * Produce a `SignedRequest` from `TDeleteUserTagsBody` by using the client's `stamp` function.
     *
     * See also {@link DeleteUserTags}.
     */
    stampDeleteUserTags: (input: TDeleteUserTagsBody) => Promise<TSignedRequest>;
    /**
     * Delete Users within an Organization
     *
     * Sign the provided `TDeleteUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_users).
     *
     * See also {@link stampDeleteUsers}.
     */
    deleteUsers: (input: TDeleteUsersBody) => Promise<TDeleteUsersResponse>;
    /**
     * Produce a `SignedRequest` from `TDeleteUsersBody` by using the client's `stamp` function.
     *
     * See also {@link DeleteUsers}.
     */
    stampDeleteUsers: (input: TDeleteUsersBody) => Promise<TSignedRequest>;
    /**
     * Deletes wallets for an organization
     *
     * Sign the provided `TDeleteWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_wallets).
     *
     * See also {@link stampDeleteWallets}.
     */
    deleteWallets: (input: TDeleteWalletsBody) => Promise<TDeleteWalletsResponse>;
    /**
     * Produce a `SignedRequest` from `TDeleteWalletsBody` by using the client's `stamp` function.
     *
     * See also {@link DeleteWallets}.
     */
    stampDeleteWallets: (input: TDeleteWalletsBody) => Promise<TSignedRequest>;
    /**
     * Authenticate a user via Email
     *
     * Sign the provided `TEmailAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/email_auth).
     *
     * See also {@link stampEmailAuth}.
     */
    emailAuth: (input: TEmailAuthBody) => Promise<TEmailAuthResponse>;
    /**
     * Produce a `SignedRequest` from `TEmailAuthBody` by using the client's `stamp` function.
     *
     * See also {@link EmailAuth}.
     */
    stampEmailAuth: (input: TEmailAuthBody) => Promise<TSignedRequest>;
    /**
     * Exports a Private Key
     *
     * Sign the provided `TExportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_private_key).
     *
     * See also {@link stampExportPrivateKey}.
     */
    exportPrivateKey: (input: TExportPrivateKeyBody) => Promise<TExportPrivateKeyResponse>;
    /**
     * Produce a `SignedRequest` from `TExportPrivateKeyBody` by using the client's `stamp` function.
     *
     * See also {@link ExportPrivateKey}.
     */
    stampExportPrivateKey: (input: TExportPrivateKeyBody) => Promise<TSignedRequest>;
    /**
     * Exports a Wallet
     *
     * Sign the provided `TExportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet).
     *
     * See also {@link stampExportWallet}.
     */
    exportWallet: (input: TExportWalletBody) => Promise<TExportWalletResponse>;
    /**
     * Produce a `SignedRequest` from `TExportWalletBody` by using the client's `stamp` function.
     *
     * See also {@link ExportWallet}.
     */
    stampExportWallet: (input: TExportWalletBody) => Promise<TSignedRequest>;
    /**
     * Exports a Wallet Account
     *
     * Sign the provided `TExportWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet_account).
     *
     * See also {@link stampExportWalletAccount}.
     */
    exportWalletAccount: (input: TExportWalletAccountBody) => Promise<TExportWalletAccountResponse>;
    /**
     * Produce a `SignedRequest` from `TExportWalletAccountBody` by using the client's `stamp` function.
     *
     * See also {@link ExportWalletAccount}.
     */
    stampExportWalletAccount: (input: TExportWalletAccountBody) => Promise<TSignedRequest>;
    /**
     * Imports a private key
     *
     * Sign the provided `TImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_private_key).
     *
     * See also {@link stampImportPrivateKey}.
     */
    importPrivateKey: (input: TImportPrivateKeyBody) => Promise<TImportPrivateKeyResponse>;
    /**
     * Produce a `SignedRequest` from `TImportPrivateKeyBody` by using the client's `stamp` function.
     *
     * See also {@link ImportPrivateKey}.
     */
    stampImportPrivateKey: (input: TImportPrivateKeyBody) => Promise<TSignedRequest>;
    /**
     * Imports a wallet
     *
     * Sign the provided `TImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_wallet).
     *
     * See also {@link stampImportWallet}.
     */
    importWallet: (input: TImportWalletBody) => Promise<TImportWalletResponse>;
    /**
     * Produce a `SignedRequest` from `TImportWalletBody` by using the client's `stamp` function.
     *
     * See also {@link ImportWallet}.
     */
    stampImportWallet: (input: TImportWalletBody) => Promise<TSignedRequest>;
    /**
     * Initializes a new private key import
     *
     * Sign the provided `TInitImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_private_key).
     *
     * See also {@link stampInitImportPrivateKey}.
     */
    initImportPrivateKey: (input: TInitImportPrivateKeyBody) => Promise<TInitImportPrivateKeyResponse>;
    /**
     * Produce a `SignedRequest` from `TInitImportPrivateKeyBody` by using the client's `stamp` function.
     *
     * See also {@link InitImportPrivateKey}.
     */
    stampInitImportPrivateKey: (input: TInitImportPrivateKeyBody) => Promise<TSignedRequest>;
    /**
     * Initializes a new wallet import
     *
     * Sign the provided `TInitImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_wallet).
     *
     * See also {@link stampInitImportWallet}.
     */
    initImportWallet: (input: TInitImportWalletBody) => Promise<TInitImportWalletResponse>;
    /**
     * Produce a `SignedRequest` from `TInitImportWalletBody` by using the client's `stamp` function.
     *
     * See also {@link InitImportWallet}.
     */
    stampInitImportWallet: (input: TInitImportWalletBody) => Promise<TSignedRequest>;
    /**
     * Initiate a Generic OTP activity
     *
     * Sign the provided `TInitOtpBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_otp).
     *
     * See also {@link stampInitOtp}.
     */
    initOtp: (input: TInitOtpBody) => Promise<TInitOtpResponse>;
    /**
     * Produce a `SignedRequest` from `TInitOtpBody` by using the client's `stamp` function.
     *
     * See also {@link InitOtp}.
     */
    stampInitOtp: (input: TInitOtpBody) => Promise<TSignedRequest>;
    /**
     * Initiate an OTP auth activity
     *
     * Sign the provided `TInitOtpAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_otp_auth).
     *
     * See also {@link stampInitOtpAuth}.
     */
    initOtpAuth: (input: TInitOtpAuthBody) => Promise<TInitOtpAuthResponse>;
    /**
     * Produce a `SignedRequest` from `TInitOtpAuthBody` by using the client's `stamp` function.
     *
     * See also {@link InitOtpAuth}.
     */
    stampInitOtpAuth: (input: TInitOtpAuthBody) => Promise<TSignedRequest>;
    /**
     * Initializes a new email recovery
     *
     * Sign the provided `TInitUserEmailRecoveryBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_user_email_recovery).
     *
     * See also {@link stampInitUserEmailRecovery}.
     */
    initUserEmailRecovery: (input: TInitUserEmailRecoveryBody) => Promise<TInitUserEmailRecoveryResponse>;
    /**
     * Produce a `SignedRequest` from `TInitUserEmailRecoveryBody` by using the client's `stamp` function.
     *
     * See also {@link InitUserEmailRecovery}.
     */
    stampInitUserEmailRecovery: (input: TInitUserEmailRecoveryBody) => Promise<TSignedRequest>;
    /**
     * Authenticate a user with an Oidc token (Oauth) - BETA
     *
     * Sign the provided `TOauthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/oauth).
     *
     * See also {@link stampOauth}.
     */
    oauth: (input: TOauthBody) => Promise<TOauthResponse>;
    /**
     * Produce a `SignedRequest` from `TOauthBody` by using the client's `stamp` function.
     *
     * See also {@link Oauth}.
     */
    stampOauth: (input: TOauthBody) => Promise<TSignedRequest>;
    /**
     * Create an Oauth session for a user
     *
     * Sign the provided `TOauthLoginBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/oauth_login).
     *
     * See also {@link stampOauthLogin}.
     */
    oauthLogin: (input: TOauthLoginBody) => Promise<TOauthLoginResponse>;
    /**
     * Produce a `SignedRequest` from `TOauthLoginBody` by using the client's `stamp` function.
     *
     * See also {@link OauthLogin}.
     */
    stampOauthLogin: (input: TOauthLoginBody) => Promise<TSignedRequest>;
    /**
     * Authenticate a user with an OTP code sent via email or SMS
     *
     * Sign the provided `TOtpAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/otp_auth).
     *
     * See also {@link stampOtpAuth}.
     */
    otpAuth: (input: TOtpAuthBody) => Promise<TOtpAuthResponse>;
    /**
     * Produce a `SignedRequest` from `TOtpAuthBody` by using the client's `stamp` function.
     *
     * See also {@link OtpAuth}.
     */
    stampOtpAuth: (input: TOtpAuthBody) => Promise<TSignedRequest>;
    /**
     * Create an OTP session for a user
     *
     * Sign the provided `TOtpLoginBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/otp_login).
     *
     * See also {@link stampOtpLogin}.
     */
    otpLogin: (input: TOtpLoginBody) => Promise<TOtpLoginResponse>;
    /**
     * Produce a `SignedRequest` from `TOtpLoginBody` by using the client's `stamp` function.
     *
     * See also {@link OtpLogin}.
     */
    stampOtpLogin: (input: TOtpLoginBody) => Promise<TSignedRequest>;
    /**
     * Completes the process of recovering a user by adding an authenticator
     *
     * Sign the provided `TRecoverUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/recover_user).
     *
     * See also {@link stampRecoverUser}.
     */
    recoverUser: (input: TRecoverUserBody) => Promise<TRecoverUserResponse>;
    /**
     * Produce a `SignedRequest` from `TRecoverUserBody` by using the client's `stamp` function.
     *
     * See also {@link RecoverUser}.
     */
    stampRecoverUser: (input: TRecoverUserBody) => Promise<TSignedRequest>;
    /**
     * Reject an Activity
     *
     * Sign the provided `TRejectActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/reject_activity).
     *
     * See also {@link stampRejectActivity}.
     */
    rejectActivity: (input: TRejectActivityBody) => Promise<TRejectActivityResponse>;
    /**
     * Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.
     *
     * See also {@link RejectActivity}.
     */
    stampRejectActivity: (input: TRejectActivityBody) => Promise<TSignedRequest>;
    /**
     * Removes an organization feature. This activity must be approved by the current root quorum.
     *
     * Sign the provided `TRemoveOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/remove_organization_feature).
     *
     * See also {@link stampRemoveOrganizationFeature}.
     */
    removeOrganizationFeature: (input: TRemoveOrganizationFeatureBody) => Promise<TRemoveOrganizationFeatureResponse>;
    /**
     * Produce a `SignedRequest` from `TRemoveOrganizationFeatureBody` by using the client's `stamp` function.
     *
     * See also {@link RemoveOrganizationFeature}.
     */
    stampRemoveOrganizationFeature: (input: TRemoveOrganizationFeatureBody) => Promise<TSignedRequest>;
    /**
     * Sets an organization feature. This activity must be approved by the current root quorum.
     *
     * Sign the provided `TSetOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/set_organization_feature).
     *
     * See also {@link stampSetOrganizationFeature}.
     */
    setOrganizationFeature: (input: TSetOrganizationFeatureBody) => Promise<TSetOrganizationFeatureResponse>;
    /**
     * Produce a `SignedRequest` from `TSetOrganizationFeatureBody` by using the client's `stamp` function.
     *
     * See also {@link SetOrganizationFeature}.
     */
    stampSetOrganizationFeature: (input: TSetOrganizationFeatureBody) => Promise<TSignedRequest>;
    /**
     * Sign a raw payload
     *
     * Sign the provided `TSignRawPayloadBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payload).
     *
     * See also {@link stampSignRawPayload}.
     */
    signRawPayload: (input: TSignRawPayloadBody) => Promise<TSignRawPayloadResponse>;
    /**
     * Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.
     *
     * See also {@link SignRawPayload}.
     */
    stampSignRawPayload: (input: TSignRawPayloadBody) => Promise<TSignedRequest>;
    /**
     * Sign multiple raw payloads with the same signing parameters
     *
     * Sign the provided `TSignRawPayloadsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payloads).
     *
     * See also {@link stampSignRawPayloads}.
     */
    signRawPayloads: (input: TSignRawPayloadsBody) => Promise<TSignRawPayloadsResponse>;
    /**
     * Produce a `SignedRequest` from `TSignRawPayloadsBody` by using the client's `stamp` function.
     *
     * See also {@link SignRawPayloads}.
     */
    stampSignRawPayloads: (input: TSignRawPayloadsBody) => Promise<TSignedRequest>;
    /**
     * Sign a transaction
     *
     * Sign the provided `TSignTransactionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_transaction).
     *
     * See also {@link stampSignTransaction}.
     */
    signTransaction: (input: TSignTransactionBody) => Promise<TSignTransactionResponse>;
    /**
     * Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.
     *
     * See also {@link SignTransaction}.
     */
    stampSignTransaction: (input: TSignTransactionBody) => Promise<TSignedRequest>;
    /**
     * Create a session for a user through stamping client side (api key, wallet client, or passkey client)
     *
     * Sign the provided `TStampLoginBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/stamp_login).
     *
     * See also {@link stampStampLogin}.
     */
    stampLogin: (input: TStampLoginBody) => Promise<TStampLoginResponse>;
    /**
     * Produce a `SignedRequest` from `TStampLoginBody` by using the client's `stamp` function.
     *
     * See also {@link StampLogin}.
     */
    stampStampLogin: (input: TStampLoginBody) => Promise<TSignedRequest>;
    /**
     * Update an existing Policy
     *
     * Sign the provided `TUpdatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_policy).
     *
     * See also {@link stampUpdatePolicy}.
     */
    updatePolicy: (input: TUpdatePolicyBody) => Promise<TUpdatePolicyResponse>;
    /**
     * Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.
     *
     * See also {@link UpdatePolicy}.
     */
    stampUpdatePolicy: (input: TUpdatePolicyBody) => Promise<TSignedRequest>;
    /**
     * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
     *
     * Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_private_key_tag).
     *
     * See also {@link stampUpdatePrivateKeyTag}.
     */
    updatePrivateKeyTag: (input: TUpdatePrivateKeyTagBody) => Promise<TUpdatePrivateKeyTagResponse>;
    /**
     * Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.
     *
     * See also {@link UpdatePrivateKeyTag}.
     */
    stampUpdatePrivateKeyTag: (input: TUpdatePrivateKeyTagBody) => Promise<TSignedRequest>;
    /**
     * Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.
     *
     * Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_root_quorum).
     *
     * See also {@link stampUpdateRootQuorum}.
     */
    updateRootQuorum: (input: TUpdateRootQuorumBody) => Promise<TUpdateRootQuorumResponse>;
    /**
     * Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.
     *
     * See also {@link UpdateRootQuorum}.
     */
    stampUpdateRootQuorum: (input: TUpdateRootQuorumBody) => Promise<TSignedRequest>;
    /**
     * Update a User in an existing Organization
     *
     * Sign the provided `TUpdateUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user).
     *
     * See also {@link stampUpdateUser}.
     */
    updateUser: (input: TUpdateUserBody) => Promise<TUpdateUserResponse>;
    /**
     * Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.
     *
     * See also {@link UpdateUser}.
     */
    stampUpdateUser: (input: TUpdateUserBody) => Promise<TSignedRequest>;
    /**
     * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
     *
     * Sign the provided `TUpdateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_tag).
     *
     * See also {@link stampUpdateUserTag}.
     */
    updateUserTag: (input: TUpdateUserTagBody) => Promise<TUpdateUserTagResponse>;
    /**
     * Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.
     *
     * See also {@link UpdateUserTag}.
     */
    stampUpdateUserTag: (input: TUpdateUserTagBody) => Promise<TSignedRequest>;
    /**
     * Update a wallet for an organization
     *
     * Sign the provided `TUpdateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_wallet).
     *
     * See also {@link stampUpdateWallet}.
     */
    updateWallet: (input: TUpdateWalletBody) => Promise<TUpdateWalletResponse>;
    /**
     * Produce a `SignedRequest` from `TUpdateWalletBody` by using the client's `stamp` function.
     *
     * See also {@link UpdateWallet}.
     */
    stampUpdateWallet: (input: TUpdateWalletBody) => Promise<TSignedRequest>;
    /**
     * Verify a Generic OTP
     *
     * Sign the provided `TVerifyOtpBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/verify_otp).
     *
     * See also {@link stampVerifyOtp}.
     */
    verifyOtp: (input: TVerifyOtpBody) => Promise<TVerifyOtpResponse>;
    /**
     * Produce a `SignedRequest` from `TVerifyOtpBody` by using the client's `stamp` function.
     *
     * See also {@link VerifyOtp}.
     */
    stampVerifyOtp: (input: TVerifyOtpBody) => Promise<TSignedRequest>;
    /**
     * Set a rate local rate limit just on the current endpoint, for purposes of testing with Vivosuite
     *
     * Sign the provided `TTestRateLimitsBody` with the client's `stamp` function, and submit the request (POST /tkhq/api/v1/test_rate_limits).
     *
     * See also {@link stampTestRateLimits}.
     */
    testRateLimits: (input: TTestRateLimitsBody) => Promise<TTestRateLimitsResponse>;
    /**
     * Produce a `SignedRequest` from `TTestRateLimitsBody` by using the client's `stamp` function.
     *
     * See also {@link TestRateLimits}.
     */
    stampTestRateLimits: (input: TTestRateLimitsBody) => Promise<TSignedRequest>;
}
//# sourceMappingURL=public_api.client.d.ts.map