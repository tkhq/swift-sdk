import { request, signedRequest } from '../../../../../base.mjs';

/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */
/**
 * Get Activity
 *
 * Get details about an Activity
 *
 * `POST /public/v1/query/get_activity`
 */
const getActivity = (input) => request({
    uri: "/public/v1/query/get_activity",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetActivity}
 */
const signGetActivity = (input, options) => signedRequest({
    uri: "/public/v1/query/get_activity",
    body: input.body,
    options,
});
/**
 * Get API key
 *
 * Get details about an API key
 *
 * `POST /public/v1/query/get_api_key`
 */
const getApiKey = (input) => request({
    uri: "/public/v1/query/get_api_key",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetApiKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetApiKey}
 */
const signGetApiKey = (input, options) => signedRequest({
    uri: "/public/v1/query/get_api_key",
    body: input.body,
    options,
});
/**
 * Get API keys
 *
 * Get details about API keys for a user
 *
 * `POST /public/v1/query/get_api_keys`
 */
const getApiKeys = (input) => request({
    uri: "/public/v1/query/get_api_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetApiKeys}
 */
const signGetApiKeys = (input, options) => signedRequest({
    uri: "/public/v1/query/get_api_keys",
    body: input.body,
    options,
});
/**
 * Attestation
 *
 * Get the attestation document corresponding to an enclave.
 *
 * `POST /public/v1/query/get_attestation`
 */
const getAttestationDocument = (input) => request({
    uri: "/public/v1/query/get_attestation",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetAttestationDocument` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAttestationDocument}
 */
const signGetAttestationDocument = (input, options) => signedRequest({
    uri: "/public/v1/query/get_attestation",
    body: input.body,
    options,
});
/**
 * Get Authenticator
 *
 * Get details about an authenticator
 *
 * `POST /public/v1/query/get_authenticator`
 */
const getAuthenticator = (input) => request({
    uri: "/public/v1/query/get_authenticator",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetAuthenticator` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAuthenticator}
 */
const signGetAuthenticator = (input, options) => signedRequest({
    uri: "/public/v1/query/get_authenticator",
    body: input.body,
    options,
});
/**
 * Get Authenticators
 *
 * Get details about authenticators for a user
 *
 * `POST /public/v1/query/get_authenticators`
 */
const getAuthenticators = (input) => request({
    uri: "/public/v1/query/get_authenticators",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAuthenticators}
 */
const signGetAuthenticators = (input, options) => signedRequest({
    uri: "/public/v1/query/get_authenticators",
    body: input.body,
    options,
});
/**
 * Get Oauth providers
 *
 * Get details about Oauth providers for a user
 *
 * `POST /public/v1/query/get_oauth_providers`
 */
const getOauthProviders = (input) => request({
    uri: "/public/v1/query/get_oauth_providers",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetOauthProviders` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetOauthProviders}
 */
const signGetOauthProviders = (input, options) => signedRequest({
    uri: "/public/v1/query/get_oauth_providers",
    body: input.body,
    options,
});
/**
 * Get Organization
 *
 * Get details about an Organization
 *
 * `POST /public/v1/query/get_organization`
 */
const getOrganization = (input) => request({
    uri: "/public/v1/query/get_organization",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetOrganization` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetOrganization}
 */
const signGetOrganization = (input, options) => signedRequest({
    uri: "/public/v1/query/get_organization",
    body: input.body,
    options,
});
/**
 * Get Configs
 *
 * Get quorum settings and features for an organization
 *
 * `POST /public/v1/query/get_organization_configs`
 */
const getOrganizationConfigs = (input) => request({
    uri: "/public/v1/query/get_organization_configs",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetOrganizationConfigs` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetOrganizationConfigs}
 */
const signGetOrganizationConfigs = (input, options) => signedRequest({
    uri: "/public/v1/query/get_organization_configs",
    body: input.body,
    options,
});
/**
 * Get Policy
 *
 * Get details about a Policy
 *
 * `POST /public/v1/query/get_policy`
 */
const getPolicy = (input) => request({
    uri: "/public/v1/query/get_policy",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetPolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPolicy}
 */
const signGetPolicy = (input, options) => signedRequest({
    uri: "/public/v1/query/get_policy",
    body: input.body,
    options,
});
/**
 * Get Private Key
 *
 * Get details about a Private Key
 *
 * `POST /public/v1/query/get_private_key`
 */
const getPrivateKey = (input) => request({
    uri: "/public/v1/query/get_private_key",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPrivateKey}
 */
const signGetPrivateKey = (input, options) => signedRequest({
    uri: "/public/v1/query/get_private_key",
    body: input.body,
    options,
});
/**
 * Get User
 *
 * Get details about a User
 *
 * `POST /public/v1/query/get_user`
 */
const getUser = (input) => request({
    uri: "/public/v1/query/get_user",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetUser}
 */
const signGetUser = (input, options) => signedRequest({
    uri: "/public/v1/query/get_user",
    body: input.body,
    options,
});
/**
 * Get Wallet
 *
 * Get details about a Wallet
 *
 * `POST /public/v1/query/get_wallet`
 */
const getWallet = (input) => request({
    uri: "/public/v1/query/get_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWallet}
 */
const signGetWallet = (input, options) => signedRequest({
    uri: "/public/v1/query/get_wallet",
    body: input.body,
    options,
});
/**
 * Get Wallet Account
 *
 * Get a single wallet account
 *
 * `POST /public/v1/query/get_wallet_account`
 */
const getWalletAccount = (input) => request({
    uri: "/public/v1/query/get_wallet_account",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetWalletAccount` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWalletAccount}
 */
const signGetWalletAccount = (input, options) => signedRequest({
    uri: "/public/v1/query/get_wallet_account",
    body: input.body,
    options,
});
/**
 * List Activities
 *
 * List all Activities within an Organization
 *
 * `POST /public/v1/query/list_activities`
 */
const getActivities = (input) => request({
    uri: "/public/v1/query/list_activities",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetActivities` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetActivities}
 */
const signGetActivities = (input, options) => signedRequest({
    uri: "/public/v1/query/list_activities",
    body: input.body,
    options,
});
/**
 * List Policies
 *
 * List all Policies within an Organization
 *
 * `POST /public/v1/query/list_policies`
 */
const getPolicies = (input) => request({
    uri: "/public/v1/query/list_policies",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPolicies}
 */
const signGetPolicies = (input, options) => signedRequest({
    uri: "/public/v1/query/list_policies",
    body: input.body,
    options,
});
/**
 * List Private Key Tags
 *
 * List all Private Key Tags within an Organization
 *
 * `POST /public/v1/query/list_private_key_tags`
 */
const listPrivateKeyTags = (input) => request({
    uri: "/public/v1/query/list_private_key_tags",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link ListPrivateKeyTags}
 */
const signListPrivateKeyTags = (input, options) => signedRequest({
    uri: "/public/v1/query/list_private_key_tags",
    body: input.body,
    options,
});
/**
 * List Private Keys
 *
 * List all Private Keys within an Organization
 *
 * `POST /public/v1/query/list_private_keys`
 */
const getPrivateKeys = (input) => request({
    uri: "/public/v1/query/list_private_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetPrivateKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPrivateKeys}
 */
const signGetPrivateKeys = (input, options) => signedRequest({
    uri: "/public/v1/query/list_private_keys",
    body: input.body,
    options,
});
/**
 * Get Suborgs
 *
 * Get all suborg IDs associated given a parent org ID and an optional filter.
 *
 * `POST /public/v1/query/list_suborgs`
 */
const getSubOrgIds = (input) => request({
    uri: "/public/v1/query/list_suborgs",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetSubOrgIds` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetSubOrgIds}
 */
const signGetSubOrgIds = (input, options) => signedRequest({
    uri: "/public/v1/query/list_suborgs",
    body: input.body,
    options,
});
/**
 * List User Tags
 *
 * List all User Tags within an Organization
 *
 * `POST /public/v1/query/list_user_tags`
 */
const listUserTags = (input) => request({
    uri: "/public/v1/query/list_user_tags",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ListUserTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link ListUserTags}
 */
const signListUserTags = (input, options) => signedRequest({
    uri: "/public/v1/query/list_user_tags",
    body: input.body,
    options,
});
/**
 * List Users
 *
 * List all Users within an Organization
 *
 * `POST /public/v1/query/list_users`
 */
const getUsers = (input) => request({
    uri: "/public/v1/query/list_users",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetUsers}
 */
const signGetUsers = (input, options) => signedRequest({
    uri: "/public/v1/query/list_users",
    body: input.body,
    options,
});
/**
 * Get Verified Suborgs
 *
 * Get all email or phone verified suborg IDs associated given a parent org ID.
 *
 * `POST /public/v1/query/list_verified_suborgs`
 */
const getVerifiedSubOrgIds = (input) => request({
    uri: "/public/v1/query/list_verified_suborgs",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetVerifiedSubOrgIds` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetVerifiedSubOrgIds}
 */
const signGetVerifiedSubOrgIds = (input, options) => signedRequest({
    uri: "/public/v1/query/list_verified_suborgs",
    body: input.body,
    options,
});
/**
 * List Wallets Accounts
 *
 * List all Accounts within a Wallet
 *
 * `POST /public/v1/query/list_wallet_accounts`
 */
const getWalletAccounts = (input) => request({
    uri: "/public/v1/query/list_wallet_accounts",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetWalletAccounts` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWalletAccounts}
 */
const signGetWalletAccounts = (input, options) => signedRequest({
    uri: "/public/v1/query/list_wallet_accounts",
    body: input.body,
    options,
});
/**
 * List Wallets
 *
 * List all Wallets within an Organization
 *
 * `POST /public/v1/query/list_wallets`
 */
const getWallets = (input) => request({
    uri: "/public/v1/query/list_wallets",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetWallets` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWallets}
 */
const signGetWallets = (input, options) => signedRequest({
    uri: "/public/v1/query/list_wallets",
    body: input.body,
    options,
});
/**
 * Who am I?
 *
 * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.
 *
 * `POST /public/v1/query/whoami`
 */
const getWhoami = (input) => request({
    uri: "/public/v1/query/whoami",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetWhoami` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWhoami}
 */
const signGetWhoami = (input, options) => signedRequest({
    uri: "/public/v1/query/whoami",
    body: input.body,
    options,
});
/**
 * Approve Activity
 *
 * Approve an Activity
 *
 * `POST /public/v1/submit/approve_activity`
 */
const approveActivity = (input) => request({
    uri: "/public/v1/submit/approve_activity",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ApproveActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link ApproveActivity}
 */
const signApproveActivity = (input, options) => signedRequest({
    uri: "/public/v1/submit/approve_activity",
    body: input.body,
    options,
});
/**
 * Create API Keys
 *
 * Add api keys to an existing User
 *
 * `POST /public/v1/submit/create_api_keys`
 */
const createApiKeys = (input) => request({
    uri: "/public/v1/submit/create_api_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateApiKeys}
 */
const signCreateApiKeys = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_api_keys",
    body: input.body,
    options,
});
/**
 * Create API-only Users
 *
 * Create API-only Users in an existing Organization
 *
 * `POST /public/v1/submit/create_api_only_users`
 */
const createApiOnlyUsers = (input) => request({
    uri: "/public/v1/submit/create_api_only_users",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateApiOnlyUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateApiOnlyUsers}
 */
const signCreateApiOnlyUsers = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_api_only_users",
    body: input.body,
    options,
});
/**
 * Create Authenticators
 *
 * Create Authenticators to authenticate requests to Turnkey
 *
 * `POST /public/v1/submit/create_authenticators`
 */
const createAuthenticators = (input) => request({
    uri: "/public/v1/submit/create_authenticators",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateAuthenticators}
 */
const signCreateAuthenticators = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_authenticators",
    body: input.body,
    options,
});
/**
 * Create Invitations
 *
 * Create Invitations to join an existing Organization
 *
 * `POST /public/v1/submit/create_invitations`
 */
const createInvitations = (input) => request({
    uri: "/public/v1/submit/create_invitations",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateInvitations` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateInvitations}
 */
const signCreateInvitations = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_invitations",
    body: input.body,
    options,
});
/**
 * Create Oauth Providers
 *
 * Creates Oauth providers for a specified user - BETA
 *
 * `POST /public/v1/submit/create_oauth_providers`
 */
const createOauthProviders = (input) => request({
    uri: "/public/v1/submit/create_oauth_providers",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateOauthProviders` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateOauthProviders}
 */
const signCreateOauthProviders = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_oauth_providers",
    body: input.body,
    options,
});
/**
 * Create Policies
 *
 * Create new Policies
 *
 * `POST /public/v1/submit/create_policies`
 */
const createPolicies = (input) => request({
    uri: "/public/v1/submit/create_policies",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreatePolicies` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePolicies}
 */
const signCreatePolicies = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_policies",
    body: input.body,
    options,
});
/**
 * Create Policy
 *
 * Create a new Policy
 *
 * `POST /public/v1/submit/create_policy`
 */
const createPolicy = (input) => request({
    uri: "/public/v1/submit/create_policy",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreatePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePolicy}
 */
const signCreatePolicy = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_policy",
    body: input.body,
    options,
});
/**
 * Create Private Key Tag
 *
 * Create a private key tag and add it to private keys.
 *
 * `POST /public/v1/submit/create_private_key_tag`
 */
const createPrivateKeyTag = (input) => request({
    uri: "/public/v1/submit/create_private_key_tag",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreatePrivateKeyTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePrivateKeyTag}
 */
const signCreatePrivateKeyTag = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_private_key_tag",
    body: input.body,
    options,
});
/**
 * Create Private Keys
 *
 * Create new Private Keys
 *
 * `POST /public/v1/submit/create_private_keys`
 */
const createPrivateKeys = (input) => request({
    uri: "/public/v1/submit/create_private_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreatePrivateKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePrivateKeys}
 */
const signCreatePrivateKeys = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_private_keys",
    body: input.body,
    options,
});
/**
 * Create Read Only Session
 *
 * Create a read only session for a user (valid for 1 hour)
 *
 * `POST /public/v1/submit/create_read_only_session`
 */
const createReadOnlySession = (input) => request({
    uri: "/public/v1/submit/create_read_only_session",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateReadOnlySession` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateReadOnlySession}
 */
const signCreateReadOnlySession = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_read_only_session",
    body: input.body,
    options,
});
/**
 * Create Read Write Session
 *
 * Create a read write session for a user
 *
 * `POST /public/v1/submit/create_read_write_session`
 */
const createReadWriteSession = (input) => request({
    uri: "/public/v1/submit/create_read_write_session",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateReadWriteSession` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateReadWriteSession}
 */
const signCreateReadWriteSession = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_read_write_session",
    body: input.body,
    options,
});
/**
 * Create Sub-Organization
 *
 * Create a new Sub-Organization
 *
 * `POST /public/v1/submit/create_sub_organization`
 */
const createSubOrganization = (input) => request({
    uri: "/public/v1/submit/create_sub_organization",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateSubOrganization` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateSubOrganization}
 */
const signCreateSubOrganization = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_sub_organization",
    body: input.body,
    options,
});
/**
 * Create User Tag
 *
 * Create a user tag and add it to users.
 *
 * `POST /public/v1/submit/create_user_tag`
 */
const createUserTag = (input) => request({
    uri: "/public/v1/submit/create_user_tag",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateUserTag}
 */
const signCreateUserTag = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_user_tag",
    body: input.body,
    options,
});
/**
 * Create Users
 *
 * Create Users in an existing Organization
 *
 * `POST /public/v1/submit/create_users`
 */
const createUsers = (input) => request({
    uri: "/public/v1/submit/create_users",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateUsers}
 */
const signCreateUsers = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_users",
    body: input.body,
    options,
});
/**
 * Create Wallet
 *
 * Create a Wallet and derive addresses
 *
 * `POST /public/v1/submit/create_wallet`
 */
const createWallet = (input) => request({
    uri: "/public/v1/submit/create_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateWallet}
 */
const signCreateWallet = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_wallet",
    body: input.body,
    options,
});
/**
 * Create Wallet Accounts
 *
 * Derive additional addresses using an existing wallet
 *
 * `POST /public/v1/submit/create_wallet_accounts`
 */
const createWalletAccounts = (input) => request({
    uri: "/public/v1/submit/create_wallet_accounts",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateWalletAccounts` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateWalletAccounts}
 */
const signCreateWalletAccounts = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_wallet_accounts",
    body: input.body,
    options,
});
/**
 * Delete API Keys
 *
 * Remove api keys from a User
 *
 * `POST /public/v1/submit/delete_api_keys`
 */
const deleteApiKeys = (input) => request({
    uri: "/public/v1/submit/delete_api_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteApiKeys}
 */
const signDeleteApiKeys = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_api_keys",
    body: input.body,
    options,
});
/**
 * Delete Authenticators
 *
 * Remove authenticators from a User
 *
 * `POST /public/v1/submit/delete_authenticators`
 */
const deleteAuthenticators = (input) => request({
    uri: "/public/v1/submit/delete_authenticators",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteAuthenticators}
 */
const signDeleteAuthenticators = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_authenticators",
    body: input.body,
    options,
});
/**
 * Delete Invitation
 *
 * Delete an existing Invitation
 *
 * `POST /public/v1/submit/delete_invitation`
 */
const deleteInvitation = (input) => request({
    uri: "/public/v1/submit/delete_invitation",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteInvitation` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteInvitation}
 */
const signDeleteInvitation = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_invitation",
    body: input.body,
    options,
});
/**
 * Delete Oauth Providers
 *
 * Removes Oauth providers for a specified user - BETA
 *
 * `POST /public/v1/submit/delete_oauth_providers`
 */
const deleteOauthProviders = (input) => request({
    uri: "/public/v1/submit/delete_oauth_providers",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteOauthProviders` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteOauthProviders}
 */
const signDeleteOauthProviders = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_oauth_providers",
    body: input.body,
    options,
});
/**
 * Delete Policy
 *
 * Delete an existing Policy
 *
 * `POST /public/v1/submit/delete_policy`
 */
const deletePolicy = (input) => request({
    uri: "/public/v1/submit/delete_policy",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeletePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeletePolicy}
 */
const signDeletePolicy = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_policy",
    body: input.body,
    options,
});
/**
 * Delete Private Key Tags
 *
 * Delete Private Key Tags within an Organization
 *
 * `POST /public/v1/submit/delete_private_key_tags`
 */
const deletePrivateKeyTags = (input) => request({
    uri: "/public/v1/submit/delete_private_key_tags",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeletePrivateKeyTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeletePrivateKeyTags}
 */
const signDeletePrivateKeyTags = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_private_key_tags",
    body: input.body,
    options,
});
/**
 * Delete Private Keys
 *
 * Deletes private keys for an organization
 *
 * `POST /public/v1/submit/delete_private_keys`
 */
const deletePrivateKeys = (input) => request({
    uri: "/public/v1/submit/delete_private_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeletePrivateKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeletePrivateKeys}
 */
const signDeletePrivateKeys = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_private_keys",
    body: input.body,
    options,
});
/**
 * Delete Sub Organization
 *
 * Deletes a sub organization
 *
 * `POST /public/v1/submit/delete_sub_organization`
 */
const deleteSubOrganization = (input) => request({
    uri: "/public/v1/submit/delete_sub_organization",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteSubOrganization` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteSubOrganization}
 */
const signDeleteSubOrganization = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_sub_organization",
    body: input.body,
    options,
});
/**
 * Delete User Tags
 *
 * Delete User Tags within an Organization
 *
 * `POST /public/v1/submit/delete_user_tags`
 */
const deleteUserTags = (input) => request({
    uri: "/public/v1/submit/delete_user_tags",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteUserTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteUserTags}
 */
const signDeleteUserTags = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_user_tags",
    body: input.body,
    options,
});
/**
 * Delete Users
 *
 * Delete Users within an Organization
 *
 * `POST /public/v1/submit/delete_users`
 */
const deleteUsers = (input) => request({
    uri: "/public/v1/submit/delete_users",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteUsers}
 */
const signDeleteUsers = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_users",
    body: input.body,
    options,
});
/**
 * Delete Wallets
 *
 * Deletes wallets for an organization
 *
 * `POST /public/v1/submit/delete_wallets`
 */
const deleteWallets = (input) => request({
    uri: "/public/v1/submit/delete_wallets",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteWallets` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteWallets}
 */
const signDeleteWallets = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_wallets",
    body: input.body,
    options,
});
/**
 * Perform Email Auth
 *
 * Authenticate a user via Email
 *
 * `POST /public/v1/submit/email_auth`
 */
const emailAuth = (input) => request({
    uri: "/public/v1/submit/email_auth",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `EmailAuth` request, ready to be POSTed to Turnkey.
 *
 * See {@link EmailAuth}
 */
const signEmailAuth = (input, options) => signedRequest({
    uri: "/public/v1/submit/email_auth",
    body: input.body,
    options,
});
/**
 * Export Private Key
 *
 * Exports a Private Key
 *
 * `POST /public/v1/submit/export_private_key`
 */
const exportPrivateKey = (input) => request({
    uri: "/public/v1/submit/export_private_key",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ExportPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportPrivateKey}
 */
const signExportPrivateKey = (input, options) => signedRequest({
    uri: "/public/v1/submit/export_private_key",
    body: input.body,
    options,
});
/**
 * Export Wallet
 *
 * Exports a Wallet
 *
 * `POST /public/v1/submit/export_wallet`
 */
const exportWallet = (input) => request({
    uri: "/public/v1/submit/export_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ExportWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportWallet}
 */
const signExportWallet = (input, options) => signedRequest({
    uri: "/public/v1/submit/export_wallet",
    body: input.body,
    options,
});
/**
 * Export Wallet Account
 *
 * Exports a Wallet Account
 *
 * `POST /public/v1/submit/export_wallet_account`
 */
const exportWalletAccount = (input) => request({
    uri: "/public/v1/submit/export_wallet_account",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ExportWalletAccount` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportWalletAccount}
 */
const signExportWalletAccount = (input, options) => signedRequest({
    uri: "/public/v1/submit/export_wallet_account",
    body: input.body,
    options,
});
/**
 * Import Private Key
 *
 * Imports a private key
 *
 * `POST /public/v1/submit/import_private_key`
 */
const importPrivateKey = (input) => request({
    uri: "/public/v1/submit/import_private_key",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ImportPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link ImportPrivateKey}
 */
const signImportPrivateKey = (input, options) => signedRequest({
    uri: "/public/v1/submit/import_private_key",
    body: input.body,
    options,
});
/**
 * Import Wallet
 *
 * Imports a wallet
 *
 * `POST /public/v1/submit/import_wallet`
 */
const importWallet = (input) => request({
    uri: "/public/v1/submit/import_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ImportWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link ImportWallet}
 */
const signImportWallet = (input, options) => signedRequest({
    uri: "/public/v1/submit/import_wallet",
    body: input.body,
    options,
});
/**
 * Init Import Private Key
 *
 * Initializes a new private key import
 *
 * `POST /public/v1/submit/init_import_private_key`
 */
const initImportPrivateKey = (input) => request({
    uri: "/public/v1/submit/init_import_private_key",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `InitImportPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitImportPrivateKey}
 */
const signInitImportPrivateKey = (input, options) => signedRequest({
    uri: "/public/v1/submit/init_import_private_key",
    body: input.body,
    options,
});
/**
 * Init Import Wallet
 *
 * Initializes a new wallet import
 *
 * `POST /public/v1/submit/init_import_wallet`
 */
const initImportWallet = (input) => request({
    uri: "/public/v1/submit/init_import_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `InitImportWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitImportWallet}
 */
const signInitImportWallet = (input, options) => signedRequest({
    uri: "/public/v1/submit/init_import_wallet",
    body: input.body,
    options,
});
/**
 * Init Generic OTP
 *
 * Initiate a Generic OTP activity
 *
 * `POST /public/v1/submit/init_otp`
 */
const initOtp = (input) => request({
    uri: "/public/v1/submit/init_otp",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `InitOtp` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitOtp}
 */
const signInitOtp = (input, options) => signedRequest({
    uri: "/public/v1/submit/init_otp",
    body: input.body,
    options,
});
/**
 * Init OTP auth
 *
 * Initiate an OTP auth activity
 *
 * `POST /public/v1/submit/init_otp_auth`
 */
const initOtpAuth = (input) => request({
    uri: "/public/v1/submit/init_otp_auth",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `InitOtpAuth` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitOtpAuth}
 */
const signInitOtpAuth = (input, options) => signedRequest({
    uri: "/public/v1/submit/init_otp_auth",
    body: input.body,
    options,
});
/**
 * Init Email Recovery
 *
 * Initializes a new email recovery
 *
 * `POST /public/v1/submit/init_user_email_recovery`
 */
const initUserEmailRecovery = (input) => request({
    uri: "/public/v1/submit/init_user_email_recovery",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `InitUserEmailRecovery` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitUserEmailRecovery}
 */
const signInitUserEmailRecovery = (input, options) => signedRequest({
    uri: "/public/v1/submit/init_user_email_recovery",
    body: input.body,
    options,
});
/**
 * Oauth
 *
 * Authenticate a user with an Oidc token (Oauth) - BETA
 *
 * `POST /public/v1/submit/oauth`
 */
const oauth = (input) => request({
    uri: "/public/v1/submit/oauth",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `Oauth` request, ready to be POSTed to Turnkey.
 *
 * See {@link Oauth}
 */
const signOauth = (input, options) => signedRequest({
    uri: "/public/v1/submit/oauth",
    body: input.body,
    options,
});
/**
 * Login with Oauth
 *
 * Create an Oauth session for a user
 *
 * `POST /public/v1/submit/oauth_login`
 */
const oauthLogin = (input) => request({
    uri: "/public/v1/submit/oauth_login",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `OauthLogin` request, ready to be POSTed to Turnkey.
 *
 * See {@link OauthLogin}
 */
const signOauthLogin = (input, options) => signedRequest({
    uri: "/public/v1/submit/oauth_login",
    body: input.body,
    options,
});
/**
 * OTP auth
 *
 * Authenticate a user with an OTP code sent via email or SMS
 *
 * `POST /public/v1/submit/otp_auth`
 */
const otpAuth = (input) => request({
    uri: "/public/v1/submit/otp_auth",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `OtpAuth` request, ready to be POSTed to Turnkey.
 *
 * See {@link OtpAuth}
 */
const signOtpAuth = (input, options) => signedRequest({
    uri: "/public/v1/submit/otp_auth",
    body: input.body,
    options,
});
/**
 * Login with OTP
 *
 * Create an OTP session for a user
 *
 * `POST /public/v1/submit/otp_login`
 */
const otpLogin = (input) => request({
    uri: "/public/v1/submit/otp_login",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `OtpLogin` request, ready to be POSTed to Turnkey.
 *
 * See {@link OtpLogin}
 */
const signOtpLogin = (input, options) => signedRequest({
    uri: "/public/v1/submit/otp_login",
    body: input.body,
    options,
});
/**
 * Recover a user
 *
 * Completes the process of recovering a user by adding an authenticator
 *
 * `POST /public/v1/submit/recover_user`
 */
const recoverUser = (input) => request({
    uri: "/public/v1/submit/recover_user",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `RecoverUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link RecoverUser}
 */
const signRecoverUser = (input, options) => signedRequest({
    uri: "/public/v1/submit/recover_user",
    body: input.body,
    options,
});
/**
 * Reject Activity
 *
 * Reject an Activity
 *
 * `POST /public/v1/submit/reject_activity`
 */
const rejectActivity = (input) => request({
    uri: "/public/v1/submit/reject_activity",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `RejectActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link RejectActivity}
 */
const signRejectActivity = (input, options) => signedRequest({
    uri: "/public/v1/submit/reject_activity",
    body: input.body,
    options,
});
/**
 * Remove Organization Feature
 *
 * Removes an organization feature. This activity must be approved by the current root quorum.
 *
 * `POST /public/v1/submit/remove_organization_feature`
 */
const removeOrganizationFeature = (input) => request({
    uri: "/public/v1/submit/remove_organization_feature",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `RemoveOrganizationFeature` request, ready to be POSTed to Turnkey.
 *
 * See {@link RemoveOrganizationFeature}
 */
const signRemoveOrganizationFeature = (input, options) => signedRequest({
    uri: "/public/v1/submit/remove_organization_feature",
    body: input.body,
    options,
});
/**
 * Set Organization Feature
 *
 * Sets an organization feature. This activity must be approved by the current root quorum.
 *
 * `POST /public/v1/submit/set_organization_feature`
 */
const setOrganizationFeature = (input) => request({
    uri: "/public/v1/submit/set_organization_feature",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `SetOrganizationFeature` request, ready to be POSTed to Turnkey.
 *
 * See {@link SetOrganizationFeature}
 */
const signSetOrganizationFeature = (input, options) => signedRequest({
    uri: "/public/v1/submit/set_organization_feature",
    body: input.body,
    options,
});
/**
 * Sign Raw Payload
 *
 * Sign a raw payload
 *
 * `POST /public/v1/submit/sign_raw_payload`
 */
const signRawPayload = (input) => request({
    uri: "/public/v1/submit/sign_raw_payload",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `SignRawPayload` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignRawPayload}
 */
const signSignRawPayload = (input, options) => signedRequest({
    uri: "/public/v1/submit/sign_raw_payload",
    body: input.body,
    options,
});
/**
 * Sign Raw Payloads
 *
 * Sign multiple raw payloads with the same signing parameters
 *
 * `POST /public/v1/submit/sign_raw_payloads`
 */
const signRawPayloads = (input) => request({
    uri: "/public/v1/submit/sign_raw_payloads",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `SignRawPayloads` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignRawPayloads}
 */
const signSignRawPayloads = (input, options) => signedRequest({
    uri: "/public/v1/submit/sign_raw_payloads",
    body: input.body,
    options,
});
/**
 * Sign Transaction
 *
 * Sign a transaction
 *
 * `POST /public/v1/submit/sign_transaction`
 */
const signTransaction = (input) => request({
    uri: "/public/v1/submit/sign_transaction",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `SignTransaction` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignTransaction}
 */
const signSignTransaction = (input, options) => signedRequest({
    uri: "/public/v1/submit/sign_transaction",
    body: input.body,
    options,
});
/**
 * Login with a Stamp
 *
 * Create a session for a user through stamping client side (api key, wallet client, or passkey client)
 *
 * `POST /public/v1/submit/stamp_login`
 */
const stampLogin = (input) => request({
    uri: "/public/v1/submit/stamp_login",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `StampLogin` request, ready to be POSTed to Turnkey.
 *
 * See {@link StampLogin}
 */
const signStampLogin = (input, options) => signedRequest({
    uri: "/public/v1/submit/stamp_login",
    body: input.body,
    options,
});
/**
 * Update Policy
 *
 * Update an existing Policy
 *
 * `POST /public/v1/submit/update_policy`
 */
const updatePolicy = (input) => request({
    uri: "/public/v1/submit/update_policy",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdatePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdatePolicy}
 */
const signUpdatePolicy = (input, options) => signedRequest({
    uri: "/public/v1/submit/update_policy",
    body: input.body,
    options,
});
/**
 * Update Private Key Tag
 *
 * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 *
 * `POST /public/v1/submit/update_private_key_tag`
 */
const updatePrivateKeyTag = (input) => request({
    uri: "/public/v1/submit/update_private_key_tag",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdatePrivateKeyTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdatePrivateKeyTag}
 */
const signUpdatePrivateKeyTag = (input, options) => signedRequest({
    uri: "/public/v1/submit/update_private_key_tag",
    body: input.body,
    options,
});
/**
 * Update Root Quorum
 *
 * Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.
 *
 * `POST /public/v1/submit/update_root_quorum`
 */
const updateRootQuorum = (input) => request({
    uri: "/public/v1/submit/update_root_quorum",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdateRootQuorum` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateRootQuorum}
 */
const signUpdateRootQuorum = (input, options) => signedRequest({
    uri: "/public/v1/submit/update_root_quorum",
    body: input.body,
    options,
});
/**
 * Update User
 *
 * Update a User in an existing Organization
 *
 * `POST /public/v1/submit/update_user`
 */
const updateUser = (input) => request({
    uri: "/public/v1/submit/update_user",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdateUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUser}
 */
const signUpdateUser = (input, options) => signedRequest({
    uri: "/public/v1/submit/update_user",
    body: input.body,
    options,
});
/**
 * Update User Tag
 *
 * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 *
 * `POST /public/v1/submit/update_user_tag`
 */
const updateUserTag = (input) => request({
    uri: "/public/v1/submit/update_user_tag",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdateUserTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUserTag}
 */
const signUpdateUserTag = (input, options) => signedRequest({
    uri: "/public/v1/submit/update_user_tag",
    body: input.body,
    options,
});
/**
 * Update Wallet
 *
 * Update a wallet for an organization
 *
 * `POST /public/v1/submit/update_wallet`
 */
const updateWallet = (input) => request({
    uri: "/public/v1/submit/update_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdateWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateWallet}
 */
const signUpdateWallet = (input, options) => signedRequest({
    uri: "/public/v1/submit/update_wallet",
    body: input.body,
    options,
});
/**
 * Verify Generic OTP
 *
 * Verify a Generic OTP
 *
 * `POST /public/v1/submit/verify_otp`
 */
const verifyOtp = (input) => request({
    uri: "/public/v1/submit/verify_otp",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `VerifyOtp` request, ready to be POSTed to Turnkey.
 *
 * See {@link VerifyOtp}
 */
const signVerifyOtp = (input, options) => signedRequest({
    uri: "/public/v1/submit/verify_otp",
    body: input.body,
    options,
});
/**
 * `POST /tkhq/api/v1/noop-codegen-anchor`
 */
const nOOPCodegenAnchor = () => request({
    uri: "/tkhq/api/v1/noop-codegen-anchor",
    method: "POST",
});
/**
 * Request a WebAuthn assertion and return a signed `NOOPCodegenAnchor` request, ready to be POSTed to Turnkey.
 *
 * See {@link NOOPCodegenAnchor}
 */
const signNOOPCodegenAnchor = () => signedRequest({
    uri: "/tkhq/api/v1/noop-codegen-anchor",
});
/**
 * Test Rate Limit
 *
 * Set a rate local rate limit just on the current endpoint, for purposes of testing with Vivosuite
 *
 * `POST /tkhq/api/v1/test_rate_limits`
 */
const testRateLimits = (input) => request({
    uri: "/tkhq/api/v1/test_rate_limits",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `TestRateLimits` request, ready to be POSTed to Turnkey.
 *
 * See {@link TestRateLimits}
 */
const signTestRateLimits = (input, options) => signedRequest({
    uri: "/tkhq/api/v1/test_rate_limits",
    body: input.body,
    options,
});

export { approveActivity, createApiKeys, createApiOnlyUsers, createAuthenticators, createInvitations, createOauthProviders, createPolicies, createPolicy, createPrivateKeyTag, createPrivateKeys, createReadOnlySession, createReadWriteSession, createSubOrganization, createUserTag, createUsers, createWallet, createWalletAccounts, deleteApiKeys, deleteAuthenticators, deleteInvitation, deleteOauthProviders, deletePolicy, deletePrivateKeyTags, deletePrivateKeys, deleteSubOrganization, deleteUserTags, deleteUsers, deleteWallets, emailAuth, exportPrivateKey, exportWallet, exportWalletAccount, getActivities, getActivity, getApiKey, getApiKeys, getAttestationDocument, getAuthenticator, getAuthenticators, getOauthProviders, getOrganization, getOrganizationConfigs, getPolicies, getPolicy, getPrivateKey, getPrivateKeys, getSubOrgIds, getUser, getUsers, getVerifiedSubOrgIds, getWallet, getWalletAccount, getWalletAccounts, getWallets, getWhoami, importPrivateKey, importWallet, initImportPrivateKey, initImportWallet, initOtp, initOtpAuth, initUserEmailRecovery, listPrivateKeyTags, listUserTags, nOOPCodegenAnchor, oauth, oauthLogin, otpAuth, otpLogin, recoverUser, rejectActivity, removeOrganizationFeature, setOrganizationFeature, signApproveActivity, signCreateApiKeys, signCreateApiOnlyUsers, signCreateAuthenticators, signCreateInvitations, signCreateOauthProviders, signCreatePolicies, signCreatePolicy, signCreatePrivateKeyTag, signCreatePrivateKeys, signCreateReadOnlySession, signCreateReadWriteSession, signCreateSubOrganization, signCreateUserTag, signCreateUsers, signCreateWallet, signCreateWalletAccounts, signDeleteApiKeys, signDeleteAuthenticators, signDeleteInvitation, signDeleteOauthProviders, signDeletePolicy, signDeletePrivateKeyTags, signDeletePrivateKeys, signDeleteSubOrganization, signDeleteUserTags, signDeleteUsers, signDeleteWallets, signEmailAuth, signExportPrivateKey, signExportWallet, signExportWalletAccount, signGetActivities, signGetActivity, signGetApiKey, signGetApiKeys, signGetAttestationDocument, signGetAuthenticator, signGetAuthenticators, signGetOauthProviders, signGetOrganization, signGetOrganizationConfigs, signGetPolicies, signGetPolicy, signGetPrivateKey, signGetPrivateKeys, signGetSubOrgIds, signGetUser, signGetUsers, signGetVerifiedSubOrgIds, signGetWallet, signGetWalletAccount, signGetWalletAccounts, signGetWallets, signGetWhoami, signImportPrivateKey, signImportWallet, signInitImportPrivateKey, signInitImportWallet, signInitOtp, signInitOtpAuth, signInitUserEmailRecovery, signListPrivateKeyTags, signListUserTags, signNOOPCodegenAnchor, signOauth, signOauthLogin, signOtpAuth, signOtpLogin, signRawPayload, signRawPayloads, signRecoverUser, signRejectActivity, signRemoveOrganizationFeature, signSetOrganizationFeature, signSignRawPayload, signSignRawPayloads, signSignTransaction, signStampLogin, signTestRateLimits, signTransaction, signUpdatePolicy, signUpdatePrivateKeyTag, signUpdateRootQuorum, signUpdateUser, signUpdateUserTag, signUpdateWallet, signVerifyOtp, stampLogin, testRateLimits, updatePolicy, updatePrivateKeyTag, updateRootQuorum, updateUser, updateUserTag, updateWallet, verifyOtp };
//# sourceMappingURL=public_api.fetcher.mjs.map
