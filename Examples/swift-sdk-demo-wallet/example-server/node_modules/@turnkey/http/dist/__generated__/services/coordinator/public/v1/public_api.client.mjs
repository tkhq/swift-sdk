import { TurnkeyRequestError } from '../../../../../base.mjs';
import { VERSION } from '../../../../../version.mjs';
import { fetch } from '../../../../../universal.mjs';

/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */
class TurnkeyClient {
    constructor(config, stamper) {
        /**
         * Get details about an Activity
         *
         * Sign the provided `TGetActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_activity).
         *
         * See also {@link stampGetActivity}.
         */
        this.getActivity = async (input) => {
            return this.request("/public/v1/query/get_activity", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.
         *
         * See also {@link GetActivity}.
         */
        this.stampGetActivity = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_activity";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about an API key
         *
         * Sign the provided `TGetApiKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_key).
         *
         * See also {@link stampGetApiKey}.
         */
        this.getApiKey = async (input) => {
            return this.request("/public/v1/query/get_api_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetApiKeyBody` by using the client's `stamp` function.
         *
         * See also {@link GetApiKey}.
         */
        this.stampGetApiKey = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_api_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about API keys for a user
         *
         * Sign the provided `TGetApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_keys).
         *
         * See also {@link stampGetApiKeys}.
         */
        this.getApiKeys = async (input) => {
            return this.request("/public/v1/query/get_api_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetApiKeysBody` by using the client's `stamp` function.
         *
         * See also {@link GetApiKeys}.
         */
        this.stampGetApiKeys = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_api_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get the attestation document corresponding to an enclave.
         *
         * Sign the provided `TGetAttestationDocumentBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_attestation).
         *
         * See also {@link stampGetAttestationDocument}.
         */
        this.getAttestationDocument = async (input) => {
            return this.request("/public/v1/query/get_attestation", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetAttestationDocumentBody` by using the client's `stamp` function.
         *
         * See also {@link GetAttestationDocument}.
         */
        this.stampGetAttestationDocument = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_attestation";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about an authenticator
         *
         * Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticator).
         *
         * See also {@link stampGetAuthenticator}.
         */
        this.getAuthenticator = async (input) => {
            return this.request("/public/v1/query/get_authenticator", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.
         *
         * See also {@link GetAuthenticator}.
         */
        this.stampGetAuthenticator = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_authenticator";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about authenticators for a user
         *
         * Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticators).
         *
         * See also {@link stampGetAuthenticators}.
         */
        this.getAuthenticators = async (input) => {
            return this.request("/public/v1/query/get_authenticators", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.
         *
         * See also {@link GetAuthenticators}.
         */
        this.stampGetAuthenticators = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_authenticators";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about Oauth providers for a user
         *
         * Sign the provided `TGetOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_oauth_providers).
         *
         * See also {@link stampGetOauthProviders}.
         */
        this.getOauthProviders = async (input) => {
            return this.request("/public/v1/query/get_oauth_providers", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetOauthProvidersBody` by using the client's `stamp` function.
         *
         * See also {@link GetOauthProviders}.
         */
        this.stampGetOauthProviders = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_oauth_providers";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about an Organization
         *
         * Sign the provided `TGetOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization).
         *
         * See also {@link stampGetOrganization}.
         */
        this.getOrganization = async (input) => {
            return this.request("/public/v1/query/get_organization", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetOrganizationBody` by using the client's `stamp` function.
         *
         * See also {@link GetOrganization}.
         */
        this.stampGetOrganization = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_organization";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get quorum settings and features for an organization
         *
         * Sign the provided `TGetOrganizationConfigsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization_configs).
         *
         * See also {@link stampGetOrganizationConfigs}.
         */
        this.getOrganizationConfigs = async (input) => {
            return this.request("/public/v1/query/get_organization_configs", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetOrganizationConfigsBody` by using the client's `stamp` function.
         *
         * See also {@link GetOrganizationConfigs}.
         */
        this.stampGetOrganizationConfigs = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_organization_configs";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about a Policy
         *
         * Sign the provided `TGetPolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_policy).
         *
         * See also {@link stampGetPolicy}.
         */
        this.getPolicy = async (input) => {
            return this.request("/public/v1/query/get_policy", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.
         *
         * See also {@link GetPolicy}.
         */
        this.stampGetPolicy = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about a Private Key
         *
         * Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_private_key).
         *
         * See also {@link stampGetPrivateKey}.
         */
        this.getPrivateKey = async (input) => {
            return this.request("/public/v1/query/get_private_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.
         *
         * See also {@link GetPrivateKey}.
         */
        this.stampGetPrivateKey = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about a User
         *
         * Sign the provided `TGetUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_user).
         *
         * See also {@link stampGetUser}.
         */
        this.getUser = async (input) => {
            return this.request("/public/v1/query/get_user", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.
         *
         * See also {@link GetUser}.
         */
        this.stampGetUser = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_user";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get details about a Wallet
         *
         * Sign the provided `TGetWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet).
         *
         * See also {@link stampGetWallet}.
         */
        this.getWallet = async (input) => {
            return this.request("/public/v1/query/get_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetWalletBody` by using the client's `stamp` function.
         *
         * See also {@link GetWallet}.
         */
        this.stampGetWallet = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get a single wallet account
         *
         * Sign the provided `TGetWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet_account).
         *
         * See also {@link stampGetWalletAccount}.
         */
        this.getWalletAccount = async (input) => {
            return this.request("/public/v1/query/get_wallet_account", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetWalletAccountBody` by using the client's `stamp` function.
         *
         * See also {@link GetWalletAccount}.
         */
        this.stampGetWalletAccount = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/get_wallet_account";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all Activities within an Organization
         *
         * Sign the provided `TGetActivitiesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_activities).
         *
         * See also {@link stampGetActivities}.
         */
        this.getActivities = async (input) => {
            return this.request("/public/v1/query/list_activities", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.
         *
         * See also {@link GetActivities}.
         */
        this.stampGetActivities = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_activities";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all Policies within an Organization
         *
         * Sign the provided `TGetPoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_policies).
         *
         * See also {@link stampGetPolicies}.
         */
        this.getPolicies = async (input) => {
            return this.request("/public/v1/query/list_policies", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.
         *
         * See also {@link GetPolicies}.
         */
        this.stampGetPolicies = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_policies";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all Private Key Tags within an Organization
         *
         * Sign the provided `TListPrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_key_tags).
         *
         * See also {@link stampListPrivateKeyTags}.
         */
        this.listPrivateKeyTags = async (input) => {
            return this.request("/public/v1/query/list_private_key_tags", input);
        };
        /**
         * Produce a `SignedRequest` from `TListPrivateKeyTagsBody` by using the client's `stamp` function.
         *
         * See also {@link ListPrivateKeyTags}.
         */
        this.stampListPrivateKeyTags = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_private_key_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all Private Keys within an Organization
         *
         * Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_keys).
         *
         * See also {@link stampGetPrivateKeys}.
         */
        this.getPrivateKeys = async (input) => {
            return this.request("/public/v1/query/list_private_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.
         *
         * See also {@link GetPrivateKeys}.
         */
        this.stampGetPrivateKeys = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_private_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get all suborg IDs associated given a parent org ID and an optional filter.
         *
         * Sign the provided `TGetSubOrgIdsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_suborgs).
         *
         * See also {@link stampGetSubOrgIds}.
         */
        this.getSubOrgIds = async (input) => {
            return this.request("/public/v1/query/list_suborgs", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetSubOrgIdsBody` by using the client's `stamp` function.
         *
         * See also {@link GetSubOrgIds}.
         */
        this.stampGetSubOrgIds = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_suborgs";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all User Tags within an Organization
         *
         * Sign the provided `TListUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_user_tags).
         *
         * See also {@link stampListUserTags}.
         */
        this.listUserTags = async (input) => {
            return this.request("/public/v1/query/list_user_tags", input);
        };
        /**
         * Produce a `SignedRequest` from `TListUserTagsBody` by using the client's `stamp` function.
         *
         * See also {@link ListUserTags}.
         */
        this.stampListUserTags = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_user_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all Users within an Organization
         *
         * Sign the provided `TGetUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_users).
         *
         * See also {@link stampGetUsers}.
         */
        this.getUsers = async (input) => {
            return this.request("/public/v1/query/list_users", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.
         *
         * See also {@link GetUsers}.
         */
        this.stampGetUsers = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get all email or phone verified suborg IDs associated given a parent org ID.
         *
         * Sign the provided `TGetVerifiedSubOrgIdsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_verified_suborgs).
         *
         * See also {@link stampGetVerifiedSubOrgIds}.
         */
        this.getVerifiedSubOrgIds = async (input) => {
            return this.request("/public/v1/query/list_verified_suborgs", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetVerifiedSubOrgIdsBody` by using the client's `stamp` function.
         *
         * See also {@link GetVerifiedSubOrgIds}.
         */
        this.stampGetVerifiedSubOrgIds = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_verified_suborgs";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all Accounts within a Wallet
         *
         * Sign the provided `TGetWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallet_accounts).
         *
         * See also {@link stampGetWalletAccounts}.
         */
        this.getWalletAccounts = async (input) => {
            return this.request("/public/v1/query/list_wallet_accounts", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetWalletAccountsBody` by using the client's `stamp` function.
         *
         * See also {@link GetWalletAccounts}.
         */
        this.stampGetWalletAccounts = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_wallet_accounts";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * List all Wallets within an Organization
         *
         * Sign the provided `TGetWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallets).
         *
         * See also {@link stampGetWallets}.
         */
        this.getWallets = async (input) => {
            return this.request("/public/v1/query/list_wallets", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetWalletsBody` by using the client's `stamp` function.
         *
         * See also {@link GetWallets}.
         */
        this.stampGetWallets = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/list_wallets";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.
         *
         * Sign the provided `TGetWhoamiBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/whoami).
         *
         * See also {@link stampGetWhoami}.
         */
        this.getWhoami = async (input) => {
            return this.request("/public/v1/query/whoami", input);
        };
        /**
         * Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.
         *
         * See also {@link GetWhoami}.
         */
        this.stampGetWhoami = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/query/whoami";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Approve an Activity
         *
         * Sign the provided `TApproveActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/approve_activity).
         *
         * See also {@link stampApproveActivity}.
         */
        this.approveActivity = async (input) => {
            return this.request("/public/v1/submit/approve_activity", input);
        };
        /**
         * Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.
         *
         * See also {@link ApproveActivity}.
         */
        this.stampApproveActivity = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/approve_activity";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Add api keys to an existing User
         *
         * Sign the provided `TCreateApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_keys).
         *
         * See also {@link stampCreateApiKeys}.
         */
        this.createApiKeys = async (input) => {
            return this.request("/public/v1/submit/create_api_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.
         *
         * See also {@link CreateApiKeys}.
         */
        this.stampCreateApiKeys = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_api_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create API-only Users in an existing Organization
         *
         * Sign the provided `TCreateApiOnlyUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_only_users).
         *
         * See also {@link stampCreateApiOnlyUsers}.
         */
        this.createApiOnlyUsers = async (input) => {
            return this.request("/public/v1/submit/create_api_only_users", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateApiOnlyUsersBody` by using the client's `stamp` function.
         *
         * See also {@link CreateApiOnlyUsers}.
         */
        this.stampCreateApiOnlyUsers = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_api_only_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create Authenticators to authenticate requests to Turnkey
         *
         * Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_authenticators).
         *
         * See also {@link stampCreateAuthenticators}.
         */
        this.createAuthenticators = async (input) => {
            return this.request("/public/v1/submit/create_authenticators", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.
         *
         * See also {@link CreateAuthenticators}.
         */
        this.stampCreateAuthenticators = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_authenticators";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create Invitations to join an existing Organization
         *
         * Sign the provided `TCreateInvitationsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_invitations).
         *
         * See also {@link stampCreateInvitations}.
         */
        this.createInvitations = async (input) => {
            return this.request("/public/v1/submit/create_invitations", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.
         *
         * See also {@link CreateInvitations}.
         */
        this.stampCreateInvitations = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_invitations";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Creates Oauth providers for a specified user - BETA
         *
         * Sign the provided `TCreateOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_oauth_providers).
         *
         * See also {@link stampCreateOauthProviders}.
         */
        this.createOauthProviders = async (input) => {
            return this.request("/public/v1/submit/create_oauth_providers", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateOauthProvidersBody` by using the client's `stamp` function.
         *
         * See also {@link CreateOauthProviders}.
         */
        this.stampCreateOauthProviders = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_oauth_providers";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create new Policies
         *
         * Sign the provided `TCreatePoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policies).
         *
         * See also {@link stampCreatePolicies}.
         */
        this.createPolicies = async (input) => {
            return this.request("/public/v1/submit/create_policies", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreatePoliciesBody` by using the client's `stamp` function.
         *
         * See also {@link CreatePolicies}.
         */
        this.stampCreatePolicies = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_policies";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a new Policy
         *
         * Sign the provided `TCreatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policy).
         *
         * See also {@link stampCreatePolicy}.
         */
        this.createPolicy = async (input) => {
            return this.request("/public/v1/submit/create_policy", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.
         *
         * See also {@link CreatePolicy}.
         */
        this.stampCreatePolicy = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a private key tag and add it to private keys.
         *
         * Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_key_tag).
         *
         * See also {@link stampCreatePrivateKeyTag}.
         */
        this.createPrivateKeyTag = async (input) => {
            return this.request("/public/v1/submit/create_private_key_tag", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.
         *
         * See also {@link CreatePrivateKeyTag}.
         */
        this.stampCreatePrivateKeyTag = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_private_key_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create new Private Keys
         *
         * Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_keys).
         *
         * See also {@link stampCreatePrivateKeys}.
         */
        this.createPrivateKeys = async (input) => {
            return this.request("/public/v1/submit/create_private_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.
         *
         * See also {@link CreatePrivateKeys}.
         */
        this.stampCreatePrivateKeys = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_private_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a read only session for a user (valid for 1 hour)
         *
         * Sign the provided `TCreateReadOnlySessionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_read_only_session).
         *
         * See also {@link stampCreateReadOnlySession}.
         */
        this.createReadOnlySession = async (input) => {
            return this.request("/public/v1/submit/create_read_only_session", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateReadOnlySessionBody` by using the client's `stamp` function.
         *
         * See also {@link CreateReadOnlySession}.
         */
        this.stampCreateReadOnlySession = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_read_only_session";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a read write session for a user
         *
         * Sign the provided `TCreateReadWriteSessionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_read_write_session).
         *
         * See also {@link stampCreateReadWriteSession}.
         */
        this.createReadWriteSession = async (input) => {
            return this.request("/public/v1/submit/create_read_write_session", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateReadWriteSessionBody` by using the client's `stamp` function.
         *
         * See also {@link CreateReadWriteSession}.
         */
        this.stampCreateReadWriteSession = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_read_write_session";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a new Sub-Organization
         *
         * Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_sub_organization).
         *
         * See also {@link stampCreateSubOrganization}.
         */
        this.createSubOrganization = async (input) => {
            return this.request("/public/v1/submit/create_sub_organization", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.
         *
         * See also {@link CreateSubOrganization}.
         */
        this.stampCreateSubOrganization = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_sub_organization";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a user tag and add it to users.
         *
         * Sign the provided `TCreateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_user_tag).
         *
         * See also {@link stampCreateUserTag}.
         */
        this.createUserTag = async (input) => {
            return this.request("/public/v1/submit/create_user_tag", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.
         *
         * See also {@link CreateUserTag}.
         */
        this.stampCreateUserTag = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_user_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create Users in an existing Organization
         *
         * Sign the provided `TCreateUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_users).
         *
         * See also {@link stampCreateUsers}.
         */
        this.createUsers = async (input) => {
            return this.request("/public/v1/submit/create_users", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.
         *
         * See also {@link CreateUsers}.
         */
        this.stampCreateUsers = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a Wallet and derive addresses
         *
         * Sign the provided `TCreateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet).
         *
         * See also {@link stampCreateWallet}.
         */
        this.createWallet = async (input) => {
            return this.request("/public/v1/submit/create_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateWalletBody` by using the client's `stamp` function.
         *
         * See also {@link CreateWallet}.
         */
        this.stampCreateWallet = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Derive additional addresses using an existing wallet
         *
         * Sign the provided `TCreateWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet_accounts).
         *
         * See also {@link stampCreateWalletAccounts}.
         */
        this.createWalletAccounts = async (input) => {
            return this.request("/public/v1/submit/create_wallet_accounts", input);
        };
        /**
         * Produce a `SignedRequest` from `TCreateWalletAccountsBody` by using the client's `stamp` function.
         *
         * See also {@link CreateWalletAccounts}.
         */
        this.stampCreateWalletAccounts = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/create_wallet_accounts";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Remove api keys from a User
         *
         * Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_api_keys).
         *
         * See also {@link stampDeleteApiKeys}.
         */
        this.deleteApiKeys = async (input) => {
            return this.request("/public/v1/submit/delete_api_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteApiKeys}.
         */
        this.stampDeleteApiKeys = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_api_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Remove authenticators from a User
         *
         * Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_authenticators).
         *
         * See also {@link stampDeleteAuthenticators}.
         */
        this.deleteAuthenticators = async (input) => {
            return this.request("/public/v1/submit/delete_authenticators", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteAuthenticators}.
         */
        this.stampDeleteAuthenticators = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_authenticators";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Delete an existing Invitation
         *
         * Sign the provided `TDeleteInvitationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_invitation).
         *
         * See also {@link stampDeleteInvitation}.
         */
        this.deleteInvitation = async (input) => {
            return this.request("/public/v1/submit/delete_invitation", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteInvitation}.
         */
        this.stampDeleteInvitation = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_invitation";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Removes Oauth providers for a specified user - BETA
         *
         * Sign the provided `TDeleteOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_oauth_providers).
         *
         * See also {@link stampDeleteOauthProviders}.
         */
        this.deleteOauthProviders = async (input) => {
            return this.request("/public/v1/submit/delete_oauth_providers", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteOauthProvidersBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteOauthProviders}.
         */
        this.stampDeleteOauthProviders = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_oauth_providers";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Delete an existing Policy
         *
         * Sign the provided `TDeletePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_policy).
         *
         * See also {@link stampDeletePolicy}.
         */
        this.deletePolicy = async (input) => {
            return this.request("/public/v1/submit/delete_policy", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.
         *
         * See also {@link DeletePolicy}.
         */
        this.stampDeletePolicy = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Delete Private Key Tags within an Organization
         *
         * Sign the provided `TDeletePrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_private_key_tags).
         *
         * See also {@link stampDeletePrivateKeyTags}.
         */
        this.deletePrivateKeyTags = async (input) => {
            return this.request("/public/v1/submit/delete_private_key_tags", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeletePrivateKeyTagsBody` by using the client's `stamp` function.
         *
         * See also {@link DeletePrivateKeyTags}.
         */
        this.stampDeletePrivateKeyTags = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_private_key_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Deletes private keys for an organization
         *
         * Sign the provided `TDeletePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_private_keys).
         *
         * See also {@link stampDeletePrivateKeys}.
         */
        this.deletePrivateKeys = async (input) => {
            return this.request("/public/v1/submit/delete_private_keys", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeletePrivateKeysBody` by using the client's `stamp` function.
         *
         * See also {@link DeletePrivateKeys}.
         */
        this.stampDeletePrivateKeys = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_private_keys";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Deletes a sub organization
         *
         * Sign the provided `TDeleteSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_sub_organization).
         *
         * See also {@link stampDeleteSubOrganization}.
         */
        this.deleteSubOrganization = async (input) => {
            return this.request("/public/v1/submit/delete_sub_organization", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteSubOrganizationBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteSubOrganization}.
         */
        this.stampDeleteSubOrganization = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_sub_organization";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Delete User Tags within an Organization
         *
         * Sign the provided `TDeleteUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_user_tags).
         *
         * See also {@link stampDeleteUserTags}.
         */
        this.deleteUserTags = async (input) => {
            return this.request("/public/v1/submit/delete_user_tags", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteUserTagsBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteUserTags}.
         */
        this.stampDeleteUserTags = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_user_tags";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Delete Users within an Organization
         *
         * Sign the provided `TDeleteUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_users).
         *
         * See also {@link stampDeleteUsers}.
         */
        this.deleteUsers = async (input) => {
            return this.request("/public/v1/submit/delete_users", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteUsersBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteUsers}.
         */
        this.stampDeleteUsers = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_users";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Deletes wallets for an organization
         *
         * Sign the provided `TDeleteWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_wallets).
         *
         * See also {@link stampDeleteWallets}.
         */
        this.deleteWallets = async (input) => {
            return this.request("/public/v1/submit/delete_wallets", input);
        };
        /**
         * Produce a `SignedRequest` from `TDeleteWalletsBody` by using the client's `stamp` function.
         *
         * See also {@link DeleteWallets}.
         */
        this.stampDeleteWallets = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_wallets";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Authenticate a user via Email
         *
         * Sign the provided `TEmailAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/email_auth).
         *
         * See also {@link stampEmailAuth}.
         */
        this.emailAuth = async (input) => {
            return this.request("/public/v1/submit/email_auth", input);
        };
        /**
         * Produce a `SignedRequest` from `TEmailAuthBody` by using the client's `stamp` function.
         *
         * See also {@link EmailAuth}.
         */
        this.stampEmailAuth = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/email_auth";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Exports a Private Key
         *
         * Sign the provided `TExportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_private_key).
         *
         * See also {@link stampExportPrivateKey}.
         */
        this.exportPrivateKey = async (input) => {
            return this.request("/public/v1/submit/export_private_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TExportPrivateKeyBody` by using the client's `stamp` function.
         *
         * See also {@link ExportPrivateKey}.
         */
        this.stampExportPrivateKey = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/export_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Exports a Wallet
         *
         * Sign the provided `TExportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet).
         *
         * See also {@link stampExportWallet}.
         */
        this.exportWallet = async (input) => {
            return this.request("/public/v1/submit/export_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TExportWalletBody` by using the client's `stamp` function.
         *
         * See also {@link ExportWallet}.
         */
        this.stampExportWallet = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/export_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Exports a Wallet Account
         *
         * Sign the provided `TExportWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet_account).
         *
         * See also {@link stampExportWalletAccount}.
         */
        this.exportWalletAccount = async (input) => {
            return this.request("/public/v1/submit/export_wallet_account", input);
        };
        /**
         * Produce a `SignedRequest` from `TExportWalletAccountBody` by using the client's `stamp` function.
         *
         * See also {@link ExportWalletAccount}.
         */
        this.stampExportWalletAccount = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/export_wallet_account";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Imports a private key
         *
         * Sign the provided `TImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_private_key).
         *
         * See also {@link stampImportPrivateKey}.
         */
        this.importPrivateKey = async (input) => {
            return this.request("/public/v1/submit/import_private_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TImportPrivateKeyBody` by using the client's `stamp` function.
         *
         * See also {@link ImportPrivateKey}.
         */
        this.stampImportPrivateKey = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/import_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Imports a wallet
         *
         * Sign the provided `TImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_wallet).
         *
         * See also {@link stampImportWallet}.
         */
        this.importWallet = async (input) => {
            return this.request("/public/v1/submit/import_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TImportWalletBody` by using the client's `stamp` function.
         *
         * See also {@link ImportWallet}.
         */
        this.stampImportWallet = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/import_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Initializes a new private key import
         *
         * Sign the provided `TInitImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_private_key).
         *
         * See also {@link stampInitImportPrivateKey}.
         */
        this.initImportPrivateKey = async (input) => {
            return this.request("/public/v1/submit/init_import_private_key", input);
        };
        /**
         * Produce a `SignedRequest` from `TInitImportPrivateKeyBody` by using the client's `stamp` function.
         *
         * See also {@link InitImportPrivateKey}.
         */
        this.stampInitImportPrivateKey = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/init_import_private_key";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Initializes a new wallet import
         *
         * Sign the provided `TInitImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_wallet).
         *
         * See also {@link stampInitImportWallet}.
         */
        this.initImportWallet = async (input) => {
            return this.request("/public/v1/submit/init_import_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TInitImportWalletBody` by using the client's `stamp` function.
         *
         * See also {@link InitImportWallet}.
         */
        this.stampInitImportWallet = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/init_import_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Initiate a Generic OTP activity
         *
         * Sign the provided `TInitOtpBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_otp).
         *
         * See also {@link stampInitOtp}.
         */
        this.initOtp = async (input) => {
            return this.request("/public/v1/submit/init_otp", input);
        };
        /**
         * Produce a `SignedRequest` from `TInitOtpBody` by using the client's `stamp` function.
         *
         * See also {@link InitOtp}.
         */
        this.stampInitOtp = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/init_otp";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Initiate an OTP auth activity
         *
         * Sign the provided `TInitOtpAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_otp_auth).
         *
         * See also {@link stampInitOtpAuth}.
         */
        this.initOtpAuth = async (input) => {
            return this.request("/public/v1/submit/init_otp_auth", input);
        };
        /**
         * Produce a `SignedRequest` from `TInitOtpAuthBody` by using the client's `stamp` function.
         *
         * See also {@link InitOtpAuth}.
         */
        this.stampInitOtpAuth = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/init_otp_auth";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Initializes a new email recovery
         *
         * Sign the provided `TInitUserEmailRecoveryBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_user_email_recovery).
         *
         * See also {@link stampInitUserEmailRecovery}.
         */
        this.initUserEmailRecovery = async (input) => {
            return this.request("/public/v1/submit/init_user_email_recovery", input);
        };
        /**
         * Produce a `SignedRequest` from `TInitUserEmailRecoveryBody` by using the client's `stamp` function.
         *
         * See also {@link InitUserEmailRecovery}.
         */
        this.stampInitUserEmailRecovery = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/init_user_email_recovery";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Authenticate a user with an Oidc token (Oauth) - BETA
         *
         * Sign the provided `TOauthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/oauth).
         *
         * See also {@link stampOauth}.
         */
        this.oauth = async (input) => {
            return this.request("/public/v1/submit/oauth", input);
        };
        /**
         * Produce a `SignedRequest` from `TOauthBody` by using the client's `stamp` function.
         *
         * See also {@link Oauth}.
         */
        this.stampOauth = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/oauth";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create an Oauth session for a user
         *
         * Sign the provided `TOauthLoginBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/oauth_login).
         *
         * See also {@link stampOauthLogin}.
         */
        this.oauthLogin = async (input) => {
            return this.request("/public/v1/submit/oauth_login", input);
        };
        /**
         * Produce a `SignedRequest` from `TOauthLoginBody` by using the client's `stamp` function.
         *
         * See also {@link OauthLogin}.
         */
        this.stampOauthLogin = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/oauth_login";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Authenticate a user with an OTP code sent via email or SMS
         *
         * Sign the provided `TOtpAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/otp_auth).
         *
         * See also {@link stampOtpAuth}.
         */
        this.otpAuth = async (input) => {
            return this.request("/public/v1/submit/otp_auth", input);
        };
        /**
         * Produce a `SignedRequest` from `TOtpAuthBody` by using the client's `stamp` function.
         *
         * See also {@link OtpAuth}.
         */
        this.stampOtpAuth = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/otp_auth";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create an OTP session for a user
         *
         * Sign the provided `TOtpLoginBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/otp_login).
         *
         * See also {@link stampOtpLogin}.
         */
        this.otpLogin = async (input) => {
            return this.request("/public/v1/submit/otp_login", input);
        };
        /**
         * Produce a `SignedRequest` from `TOtpLoginBody` by using the client's `stamp` function.
         *
         * See also {@link OtpLogin}.
         */
        this.stampOtpLogin = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/otp_login";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Completes the process of recovering a user by adding an authenticator
         *
         * Sign the provided `TRecoverUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/recover_user).
         *
         * See also {@link stampRecoverUser}.
         */
        this.recoverUser = async (input) => {
            return this.request("/public/v1/submit/recover_user", input);
        };
        /**
         * Produce a `SignedRequest` from `TRecoverUserBody` by using the client's `stamp` function.
         *
         * See also {@link RecoverUser}.
         */
        this.stampRecoverUser = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/recover_user";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Reject an Activity
         *
         * Sign the provided `TRejectActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/reject_activity).
         *
         * See also {@link stampRejectActivity}.
         */
        this.rejectActivity = async (input) => {
            return this.request("/public/v1/submit/reject_activity", input);
        };
        /**
         * Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.
         *
         * See also {@link RejectActivity}.
         */
        this.stampRejectActivity = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/reject_activity";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Removes an organization feature. This activity must be approved by the current root quorum.
         *
         * Sign the provided `TRemoveOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/remove_organization_feature).
         *
         * See also {@link stampRemoveOrganizationFeature}.
         */
        this.removeOrganizationFeature = async (input) => {
            return this.request("/public/v1/submit/remove_organization_feature", input);
        };
        /**
         * Produce a `SignedRequest` from `TRemoveOrganizationFeatureBody` by using the client's `stamp` function.
         *
         * See also {@link RemoveOrganizationFeature}.
         */
        this.stampRemoveOrganizationFeature = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/remove_organization_feature";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Sets an organization feature. This activity must be approved by the current root quorum.
         *
         * Sign the provided `TSetOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/set_organization_feature).
         *
         * See also {@link stampSetOrganizationFeature}.
         */
        this.setOrganizationFeature = async (input) => {
            return this.request("/public/v1/submit/set_organization_feature", input);
        };
        /**
         * Produce a `SignedRequest` from `TSetOrganizationFeatureBody` by using the client's `stamp` function.
         *
         * See also {@link SetOrganizationFeature}.
         */
        this.stampSetOrganizationFeature = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/set_organization_feature";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Sign a raw payload
         *
         * Sign the provided `TSignRawPayloadBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payload).
         *
         * See also {@link stampSignRawPayload}.
         */
        this.signRawPayload = async (input) => {
            return this.request("/public/v1/submit/sign_raw_payload", input);
        };
        /**
         * Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.
         *
         * See also {@link SignRawPayload}.
         */
        this.stampSignRawPayload = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_raw_payload";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Sign multiple raw payloads with the same signing parameters
         *
         * Sign the provided `TSignRawPayloadsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payloads).
         *
         * See also {@link stampSignRawPayloads}.
         */
        this.signRawPayloads = async (input) => {
            return this.request("/public/v1/submit/sign_raw_payloads", input);
        };
        /**
         * Produce a `SignedRequest` from `TSignRawPayloadsBody` by using the client's `stamp` function.
         *
         * See also {@link SignRawPayloads}.
         */
        this.stampSignRawPayloads = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_raw_payloads";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Sign a transaction
         *
         * Sign the provided `TSignTransactionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_transaction).
         *
         * See also {@link stampSignTransaction}.
         */
        this.signTransaction = async (input) => {
            return this.request("/public/v1/submit/sign_transaction", input);
        };
        /**
         * Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.
         *
         * See also {@link SignTransaction}.
         */
        this.stampSignTransaction = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_transaction";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Create a session for a user through stamping client side (api key, wallet client, or passkey client)
         *
         * Sign the provided `TStampLoginBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/stamp_login).
         *
         * See also {@link stampStampLogin}.
         */
        this.stampLogin = async (input) => {
            return this.request("/public/v1/submit/stamp_login", input);
        };
        /**
         * Produce a `SignedRequest` from `TStampLoginBody` by using the client's `stamp` function.
         *
         * See also {@link StampLogin}.
         */
        this.stampStampLogin = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/stamp_login";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Update an existing Policy
         *
         * Sign the provided `TUpdatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_policy).
         *
         * See also {@link stampUpdatePolicy}.
         */
        this.updatePolicy = async (input) => {
            return this.request("/public/v1/submit/update_policy", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.
         *
         * See also {@link UpdatePolicy}.
         */
        this.stampUpdatePolicy = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_policy";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
         *
         * Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_private_key_tag).
         *
         * See also {@link stampUpdatePrivateKeyTag}.
         */
        this.updatePrivateKeyTag = async (input) => {
            return this.request("/public/v1/submit/update_private_key_tag", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.
         *
         * See also {@link UpdatePrivateKeyTag}.
         */
        this.stampUpdatePrivateKeyTag = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_private_key_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.
         *
         * Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_root_quorum).
         *
         * See also {@link stampUpdateRootQuorum}.
         */
        this.updateRootQuorum = async (input) => {
            return this.request("/public/v1/submit/update_root_quorum", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.
         *
         * See also {@link UpdateRootQuorum}.
         */
        this.stampUpdateRootQuorum = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_root_quorum";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Update a User in an existing Organization
         *
         * Sign the provided `TUpdateUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user).
         *
         * See also {@link stampUpdateUser}.
         */
        this.updateUser = async (input) => {
            return this.request("/public/v1/submit/update_user", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.
         *
         * See also {@link UpdateUser}.
         */
        this.stampUpdateUser = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
         *
         * Sign the provided `TUpdateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_tag).
         *
         * See also {@link stampUpdateUserTag}.
         */
        this.updateUserTag = async (input) => {
            return this.request("/public/v1/submit/update_user_tag", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.
         *
         * See also {@link UpdateUserTag}.
         */
        this.stampUpdateUserTag = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user_tag";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Update a wallet for an organization
         *
         * Sign the provided `TUpdateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_wallet).
         *
         * See also {@link stampUpdateWallet}.
         */
        this.updateWallet = async (input) => {
            return this.request("/public/v1/submit/update_wallet", input);
        };
        /**
         * Produce a `SignedRequest` from `TUpdateWalletBody` by using the client's `stamp` function.
         *
         * See also {@link UpdateWallet}.
         */
        this.stampUpdateWallet = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/update_wallet";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Verify a Generic OTP
         *
         * Sign the provided `TVerifyOtpBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/verify_otp).
         *
         * See also {@link stampVerifyOtp}.
         */
        this.verifyOtp = async (input) => {
            return this.request("/public/v1/submit/verify_otp", input);
        };
        /**
         * Produce a `SignedRequest` from `TVerifyOtpBody` by using the client's `stamp` function.
         *
         * See also {@link VerifyOtp}.
         */
        this.stampVerifyOtp = async (input) => {
            const fullUrl = this.config.baseUrl + "/public/v1/submit/verify_otp";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        /**
         * Set a rate local rate limit just on the current endpoint, for purposes of testing with Vivosuite
         *
         * Sign the provided `TTestRateLimitsBody` with the client's `stamp` function, and submit the request (POST /tkhq/api/v1/test_rate_limits).
         *
         * See also {@link stampTestRateLimits}.
         */
        this.testRateLimits = async (input) => {
            return this.request("/tkhq/api/v1/test_rate_limits", input);
        };
        /**
         * Produce a `SignedRequest` from `TTestRateLimitsBody` by using the client's `stamp` function.
         *
         * See also {@link TestRateLimits}.
         */
        this.stampTestRateLimits = async (input) => {
            const fullUrl = this.config.baseUrl + "/tkhq/api/v1/test_rate_limits";
            const body = JSON.stringify(input);
            const stamp = await this.stamper.stamp(body);
            return {
                body: body,
                stamp: stamp,
                url: fullUrl,
            };
        };
        if (!config.baseUrl) {
            throw new Error(`Missing base URL. Please verify env vars.`);
        }
        this.config = config;
        this.stamper = stamper;
    }
    async request(url, body) {
        const fullUrl = this.config.baseUrl + url;
        const stringifiedBody = JSON.stringify(body);
        const stamp = await this.stamper.stamp(stringifiedBody);
        const response = await fetch(fullUrl, {
            method: "POST",
            headers: {
                [stamp.stampHeaderName]: stamp.stampHeaderValue,
                "X-Client-Version": VERSION,
            },
            body: stringifiedBody,
            redirect: "follow",
        });
        if (!response.ok) {
            let res;
            try {
                res = await response.json();
            }
            catch (_) {
                throw new Error(`${response.status} ${response.statusText}`);
            }
            throw new TurnkeyRequestError(res);
        }
        const data = await response.json();
        return data;
    }
}

export { TurnkeyClient };
//# sourceMappingURL=public_api.client.mjs.map
