'use server';
'use strict';

var base = require('./__types__/base.js');
var sdkClient = require('./sdk-client.js');
var turnkeyHelpers = require('./turnkey-helpers.js');
var walletStamper = require('@turnkey/wallet-stamper');

const turnkeyClient = new sdkClient.TurnkeyServerSDK({
    apiBaseUrl: process.env.NEXT_PUBLIC_BASE_URL,
    defaultOrganizationId: process.env.NEXT_PUBLIC_ORGANIZATION_ID,
    apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY,
    apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY,
});
async function sendCredential(request) {
    try {
        const response = await turnkeyClient.apiClient().emailAuth({
            email: request.email,
            targetPublicKey: request.targetPublicKey,
            organizationId: request.suborgID,
            ...(request.apiKeyName && { apiKeyName: request.apiKeyName }),
            ...(request.sessionLengthSeconds !== undefined && {
                expirationSeconds: request.sessionLengthSeconds.toString(),
            }),
            ...(request.invalidateExisting && {
                invalidateExisting: request.invalidateExisting,
            }),
            ...(request.emailCustomization && {
                emailCustomization: request.emailCustomization,
            }),
            ...(request.sendFromEmailAddress && {
                sendFromEmailAddress: request.sendFromEmailAddress,
            }),
        });
        if (!response.userId) {
            throw new Error("Expected a non-null userId.");
        }
    }
    catch (error) {
        console.error(error);
        return undefined;
    }
}
async function sendOtp(request) {
    try {
        const response = await turnkeyClient.apiClient().initOtp({
            contact: request.contact,
            otpType: request.otpType,
            ...(request.emailCustomization && {
                emailCustomization: request.emailCustomization,
            }),
            ...(request.sendFromEmailAddress && {
                sendFromEmailAddress: request.sendFromEmailAddress,
            }),
            ...(request.sendFromEmailSenderName && {
                sendFromEmailSenderName: request.sendFromEmailSenderName,
            }),
            ...(request.userIdentifier && { userIdentifier: request.userIdentifier }),
            ...(request.customSmsMessage && {
                smsCustomization: { template: request.customSmsMessage },
            }),
            ...(request.otpLength && {
                otpLength: request.otpLength,
            }),
            alphanumeric: request.alphanumeric ?? true,
        });
        if (!response.otpId) {
            throw new Error("Expected a non-null otpId.");
        }
        return response;
    }
    catch (error) {
        console.error(error);
        return undefined;
    }
}
async function verifyOtp(request) {
    try {
        const response = await turnkeyClient.apiClient().verifyOtp({
            otpId: request.otpId,
            otpCode: request.otpCode,
            ...(request.sessionLengthSeconds !== undefined && {
                expirationSeconds: request.sessionLengthSeconds.toString(),
            }),
        });
        const { verificationToken } = response;
        if (!verificationToken) {
            throw new Error("Expected a non-null value for verificationToken");
        }
        return response;
    }
    catch (error) {
        console.error(error);
        return undefined;
    }
}
async function otpLogin(request) {
    try {
        const response = await turnkeyClient.apiClient().otpLogin({
            organizationId: request.suborgID,
            verificationToken: request.verificationToken,
            publicKey: request.publicKey,
            ...(request.sessionLengthSeconds !== undefined && {
                expirationSeconds: request.sessionLengthSeconds.toString(),
            }),
        });
        const { session } = response;
        if (!session) {
            throw new Error("Expected a non-null value for session");
        }
        return response;
    }
    catch (error) {
        console.error(error);
        return undefined;
    }
}
async function oauthLogin(request) {
    try {
        const response = await turnkeyClient.apiClient().oauthLogin({
            organizationId: request.suborgID,
            oidcToken: request.oidcToken,
            publicKey: request.publicKey,
            ...(request.sessionLengthSeconds !== undefined && {
                expirationSeconds: request.sessionLengthSeconds.toString(),
            }),
        });
        const { session } = response;
        if (!session) {
            throw new Error("Expected a non-null value for session");
        }
        return response;
    }
    catch (error) {
        console.error(error);
        return undefined;
    }
}
async function getSuborgs(request) {
    try {
        const response = await turnkeyClient.apiClient().getSubOrgIds({
            organizationId: turnkeyClient.config.defaultOrganizationId,
            filterType: request.filterType,
            filterValue: request.filterValue,
        });
        if (!response || !response.organizationIds) {
            throw new Error("Expected a non-null response with organizationIds.");
        }
        return { organizationIds: response.organizationIds };
    }
    catch (error) {
        console.error(error);
        return undefined;
    }
}
async function getVerifiedSuborgs(request) {
    try {
        const response = await turnkeyClient.apiClient().getVerifiedSubOrgIds({
            organizationId: turnkeyClient.config.defaultOrganizationId,
            filterType: request.filterType,
            filterValue: request.filterValue,
        });
        if (!response || !response.organizationIds) {
            throw new Error("Expected a non-null response with organizationIds.");
        }
        return { organizationIds: response.organizationIds };
    }
    catch (error) {
        console.error(error);
        return undefined;
    }
}
async function createSuborg(request) {
    try {
        const response = await turnkeyClient.apiClient().createSubOrganization({
            subOrganizationName: `suborg-${String(Date.now())}`,
            rootQuorumThreshold: 1,
            rootUsers: [
                {
                    userName: request.email ?? "",
                    userEmail: request.email ?? "",
                    ...(request.phoneNumber
                        ? { userPhoneNumber: request.phoneNumber }
                        : {}),
                    apiKeys: request.wallet
                        ? [
                            {
                                apiKeyName: `wallet-auth:${request.wallet.publicKey}`,
                                publicKey: request.wallet.publicKey,
                                curveType: request.wallet.type === walletStamper.WalletType.Ethereum
                                    ? "API_KEY_CURVE_SECP256K1"
                                    : "API_KEY_CURVE_ED25519",
                            },
                        ]
                        : [],
                    authenticators: request.passkey ? [request.passkey] : [],
                    oauthProviders: request.oauthProviders ?? [],
                },
            ],
            wallet: {
                walletName: `Wallet 1`,
                accounts: request.customAccounts ?? [
                    ...turnkeyHelpers.DEFAULT_ETHEREUM_ACCOUNTS,
                    ...turnkeyHelpers.DEFAULT_SOLANA_ACCOUNTS,
                ],
            },
        });
        if (!response.subOrganizationId) {
            throw new Error("Expected a non-null subOrganizationId.");
        }
        return { subOrganizationId: response.subOrganizationId };
    }
    catch (error) {
        console.error(error);
        return undefined;
    }
}
async function getOrCreateSuborg(request) {
    try {
        // First try to get existing suborgs
        let suborgResponse;
        if (request.filterType === base.FilterType.Email ||
            request.filterType === base.FilterType.PhoneNumber) {
            suborgResponse = await getVerifiedSuborgs({
                filterType: request.filterType,
                filterValue: request.filterValue,
            });
        }
        else {
            suborgResponse = await getSuborgs({
                // For OIDC
                filterType: request.filterType,
                filterValue: request.filterValue,
            });
        }
        // If we found existing suborgs, return the first one
        if (suborgResponse &&
            suborgResponse?.organizationIds &&
            suborgResponse?.organizationIds?.length > 0) {
            return {
                subOrganizationIds: suborgResponse.organizationIds,
            };
        }
        // No existing suborg found - create a new one
        const createPayload = {
            ...(request.additionalData?.email && {
                email: request.additionalData.email,
            }),
            ...(request.additionalData?.phoneNumber && {
                phoneNumber: request.additionalData.phoneNumber,
            }),
            ...(request.additionalData?.passkey && {
                passkey: request.additionalData.passkey,
            }),
            ...(request.additionalData?.oauthProviders && {
                oauthProviders: request.additionalData.oauthProviders,
            }),
            ...(request.additionalData?.customAccounts && {
                customAccounts: request.additionalData.customAccounts,
            }),
            ...(request.additionalData?.wallet && {
                wallet: request.additionalData.wallet,
            }),
        };
        const creationResponse = await createSuborg(createPayload);
        if (!creationResponse?.subOrganizationId) {
            throw new Error("Suborg creation failed");
        }
        return {
            subOrganizationIds: [creationResponse.subOrganizationId],
        };
    }
    catch (error) {
        console.error("Error in getOrCreateSuborg:", error);
        return undefined;
    }
}

exports.createSuborg = createSuborg;
exports.getOrCreateSuborg = getOrCreateSuborg;
exports.getSuborgs = getSuborgs;
exports.getVerifiedSuborgs = getVerifiedSuborgs;
exports.oauthLogin = oauthLogin;
exports.otpLogin = otpLogin;
exports.sendCredential = sendCredential;
exports.sendOtp = sendOtp;
exports.verifyOtp = verifyOtp;
//# sourceMappingURL=actions.js.map
