import AuthenticationServices
import CryptoKit
import Foundation
import OpenAPIRuntime
import OpenAPIURLSession

public struct TurnkeyClient {
  public static let baseURLString = "https://api.turnkey.com"

  private let underlyingClient: any APIProtocol

  internal init(underlyingClient: any APIProtocol) {
    self.underlyingClient = underlyingClient
  }
  
  {% import "macros.stencil" %}
  {% for class in types.implementing.APIProtocol %}
      {% for method in class.instanceMethods %}
          {% set bodyInput method.parameters.0.typeName %}
          {% set requestStructName %}{{method.callName}}Request{% endset %}
          {% set isActivityRequest %}
          {% for struct in types.structs where struct.name|hasSuffix:requestStructName and struct.methods.0.parameters.0.name == "_type" -%}true{%- endfor %}
          {% endset %}
          {% if isActivityRequest|contains:"true" -%}
              {% call generateActivityMethod method.callName -%}
          {% else -%}
          {% set okStructType %}Operations.{{method.callName}}.Output.Ok{% endset %}
          public func {{ method.callName|lowerFirstLetter }}({% call addMethodParams method.callName %}) async throws -> {{ okStructType }} {

          // Create the {{ requestStructName }}
          let {{ method.callName|lowerFirstLetter }}Request = Components.Schemas.{{ requestStructName }}(
              {% for struct in types.structs where struct.name|hasSuffix:requestStructName -%}
                  {% for var in struct.variables -%}
                      {{ var.name }}: {{ var.name }}{% if not forloop.last %}, {% endif %}
                  {%- endfor %}
              {%- endfor %}
          )

          let input = {{ bodyInput }}(
              headers: .init(accept: [.init(contentType: .json)]),
              body: .json({{ requestStructName|lowerFirstLetter }})
          )

          return try await call { try await underlyingClient.{{ method.callName }}(input) }

      }
      {% endif -%}
      {% endfor %}
  {% endfor %}
}
