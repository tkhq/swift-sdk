// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime

#if os(Linux)
  @preconcurrency import struct Foundation.URL
  @preconcurrency import struct Foundation.Data
  @preconcurrency import struct Foundation.Date
#else
  import struct Foundation.URL
  import struct Foundation.Data
  import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
  /// Get Activity
  ///
  /// Get details about an Activity
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_activity`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_activity/post(GetActivity)`.
  func GetActivity(_ input: Operations.GetActivity.Input) async throws
    -> Operations.GetActivity.Output
  /// Get API key
  ///
  /// Get details about an API key
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_api_key`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_api_key/post(GetApiKey)`.
  func GetApiKey(_ input: Operations.GetApiKey.Input) async throws -> Operations.GetApiKey.Output
  /// Get API keys
  ///
  /// Get details about API keys for a user
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_api_keys`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_api_keys/post(GetApiKeys)`.
  func GetApiKeys(_ input: Operations.GetApiKeys.Input) async throws -> Operations.GetApiKeys.Output
  /// Get Authenticator
  ///
  /// Get details about an authenticator
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_authenticator`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_authenticator/post(GetAuthenticator)`.
  func GetAuthenticator(_ input: Operations.GetAuthenticator.Input) async throws
    -> Operations.GetAuthenticator.Output
  /// Get Authenticators
  ///
  /// Get details about authenticators for a user
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_authenticators`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_authenticators/post(GetAuthenticators)`.
  func GetAuthenticators(_ input: Operations.GetAuthenticators.Input) async throws
    -> Operations.GetAuthenticators.Output
  /// Get Oauth providers
  ///
  /// Get details about Oauth providers for a user
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_oauth_providers`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_oauth_providers/post(GetOauthProviders)`.
  func GetOauthProviders(_ input: Operations.GetOauthProviders.Input) async throws
    -> Operations.GetOauthProviders.Output
  /// Get Configs
  ///
  /// Get quorum settings and features for an organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_organization_configs`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_organization_configs/post(GetOrganizationConfigs)`.
  func GetOrganizationConfigs(_ input: Operations.GetOrganizationConfigs.Input) async throws
    -> Operations.GetOrganizationConfigs.Output
  /// Get Policy
  ///
  /// Get details about a Policy
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_policy`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_policy/post(GetPolicy)`.
  func GetPolicy(_ input: Operations.GetPolicy.Input) async throws -> Operations.GetPolicy.Output
  /// Get Private Key
  ///
  /// Get details about a Private Key
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_private_key`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_private_key/post(GetPrivateKey)`.
  func GetPrivateKey(_ input: Operations.GetPrivateKey.Input) async throws
    -> Operations.GetPrivateKey.Output
  /// Get User
  ///
  /// Get details about a User
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_user`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_user/post(GetUser)`.
  func GetUser(_ input: Operations.GetUser.Input) async throws -> Operations.GetUser.Output
  /// Get Wallet
  ///
  /// Get details about a Wallet
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_wallet/post(GetWallet)`.
  func GetWallet(_ input: Operations.GetWallet.Input) async throws -> Operations.GetWallet.Output
  /// Get Wallet Account
  ///
  /// Get a single wallet account
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_wallet_account`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_wallet_account/post(GetWalletAccount)`.
  func GetWalletAccount(_ input: Operations.GetWalletAccount.Input) async throws
    -> Operations.GetWalletAccount.Output
  /// List Activities
  ///
  /// List all Activities within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_activities`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_activities/post(GetActivities)`.
  func GetActivities(_ input: Operations.GetActivities.Input) async throws
    -> Operations.GetActivities.Output
  /// List Policies
  ///
  /// List all Policies within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_policies`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_policies/post(GetPolicies)`.
  func GetPolicies(_ input: Operations.GetPolicies.Input) async throws
    -> Operations.GetPolicies.Output
  /// List Private Key Tags
  ///
  /// List all Private Key Tags within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_private_key_tags`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_private_key_tags/post(ListPrivateKeyTags)`.
  func ListPrivateKeyTags(_ input: Operations.ListPrivateKeyTags.Input) async throws
    -> Operations.ListPrivateKeyTags.Output
  /// List Private Keys
  ///
  /// List all Private Keys within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_private_keys`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_private_keys/post(GetPrivateKeys)`.
  func GetPrivateKeys(_ input: Operations.GetPrivateKeys.Input) async throws
    -> Operations.GetPrivateKeys.Output
  /// Get Suborgs
  ///
  /// Get all suborg IDs associated given a parent org ID and an optional filter.
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_suborgs`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_suborgs/post(GetSubOrgIds)`.
  func GetSubOrgIds(_ input: Operations.GetSubOrgIds.Input) async throws
    -> Operations.GetSubOrgIds.Output
  /// List User Tags
  ///
  /// List all User Tags within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_user_tags`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_user_tags/post(ListUserTags)`.
  func ListUserTags(_ input: Operations.ListUserTags.Input) async throws
    -> Operations.ListUserTags.Output
  /// List Users
  ///
  /// List all Users within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_users`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_users/post(GetUsers)`.
  func GetUsers(_ input: Operations.GetUsers.Input) async throws -> Operations.GetUsers.Output
  /// Get Verified Suborgs
  ///
  /// Get all email or phone verified suborg IDs associated given a parent org ID.
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_verified_suborgs`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_verified_suborgs/post(GetVerifiedSubOrgIds)`.
  func GetVerifiedSubOrgIds(_ input: Operations.GetVerifiedSubOrgIds.Input) async throws
    -> Operations.GetVerifiedSubOrgIds.Output
  /// List Wallets Accounts
  ///
  /// List all Accounts within a Wallet
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_wallet_accounts`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_wallet_accounts/post(GetWalletAccounts)`.
  func GetWalletAccounts(_ input: Operations.GetWalletAccounts.Input) async throws
    -> Operations.GetWalletAccounts.Output
  /// List Wallets
  ///
  /// List all Wallets within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_wallets`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_wallets/post(GetWallets)`.
  func GetWallets(_ input: Operations.GetWallets.Input) async throws -> Operations.GetWallets.Output
  /// Who am I?
  ///
  /// Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.
  ///
  /// - Remark: HTTP `POST /public/v1/query/whoami`.
  /// - Remark: Generated from `#/paths//public/v1/query/whoami/post(GetWhoami)`.
  func GetWhoami(_ input: Operations.GetWhoami.Input) async throws -> Operations.GetWhoami.Output
  /// Approve Activity
  ///
  /// Approve an Activity
  ///
  /// - Remark: HTTP `POST /public/v1/submit/approve_activity`.
  /// - Remark: Generated from `#/paths//public/v1/submit/approve_activity/post(ApproveActivity)`.
  func ApproveActivity(_ input: Operations.ApproveActivity.Input) async throws
    -> Operations.ApproveActivity.Output
  /// Create API Keys
  ///
  /// Add api keys to an existing User
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_api_keys`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_api_keys/post(CreateApiKeys)`.
  func CreateApiKeys(_ input: Operations.CreateApiKeys.Input) async throws
    -> Operations.CreateApiKeys.Output
  /// Create Authenticators
  ///
  /// Create Authenticators to authenticate requests to Turnkey
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_authenticators`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_authenticators/post(CreateAuthenticators)`.
  func CreateAuthenticators(_ input: Operations.CreateAuthenticators.Input) async throws
    -> Operations.CreateAuthenticators.Output
  /// Create Invitations
  ///
  /// Create Invitations to join an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_invitations`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_invitations/post(CreateInvitations)`.
  func CreateInvitations(_ input: Operations.CreateInvitations.Input) async throws
    -> Operations.CreateInvitations.Output
  /// Create Oauth Providers
  ///
  /// Creates Oauth providers for a specified user - BETA
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_oauth_providers`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_oauth_providers/post(CreateOauthProviders)`.
  func CreateOauthProviders(_ input: Operations.CreateOauthProviders.Input) async throws
    -> Operations.CreateOauthProviders.Output
  /// Create Policies
  ///
  /// Create new Policies
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_policies`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_policies/post(CreatePolicies)`.
  func CreatePolicies(_ input: Operations.CreatePolicies.Input) async throws
    -> Operations.CreatePolicies.Output
  /// Create Policy
  ///
  /// Create a new Policy
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_policy`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_policy/post(CreatePolicy)`.
  func CreatePolicy(_ input: Operations.CreatePolicy.Input) async throws
    -> Operations.CreatePolicy.Output
  /// Create Private Key Tag
  ///
  /// Create a private key tag and add it to private keys.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_private_key_tag`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_private_key_tag/post(CreatePrivateKeyTag)`.
  func CreatePrivateKeyTag(_ input: Operations.CreatePrivateKeyTag.Input) async throws
    -> Operations.CreatePrivateKeyTag.Output
  /// Create Private Keys
  ///
  /// Create new Private Keys
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_private_keys`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_private_keys/post(CreatePrivateKeys)`.
  func CreatePrivateKeys(_ input: Operations.CreatePrivateKeys.Input) async throws
    -> Operations.CreatePrivateKeys.Output
  /// Create Read Only Session
  ///
  /// Create a read only session for a user (valid for 1 hour)
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_read_only_session`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_read_only_session/post(CreateReadOnlySession)`.
  func CreateReadOnlySession(_ input: Operations.CreateReadOnlySession.Input) async throws
    -> Operations.CreateReadOnlySession.Output
  /// Create Read Write Session
  ///
  /// Create a read write session for a user
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_read_write_session`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_read_write_session/post(CreateReadWriteSession)`.
  func CreateReadWriteSession(_ input: Operations.CreateReadWriteSession.Input) async throws
    -> Operations.CreateReadWriteSession.Output
  /// Create Sub-Organization
  ///
  /// Create a new Sub-Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_sub_organization`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_sub_organization/post(CreateSubOrganization)`.
  func CreateSubOrganization(_ input: Operations.CreateSubOrganization.Input) async throws
    -> Operations.CreateSubOrganization.Output
  /// Create User Tag
  ///
  /// Create a user tag and add it to users.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_user_tag`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_user_tag/post(CreateUserTag)`.
  func CreateUserTag(_ input: Operations.CreateUserTag.Input) async throws
    -> Operations.CreateUserTag.Output
  /// Create Users
  ///
  /// Create Users in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_users`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_users/post(CreateUsers)`.
  func CreateUsers(_ input: Operations.CreateUsers.Input) async throws
    -> Operations.CreateUsers.Output
  /// Create Wallet
  ///
  /// Create a Wallet and derive addresses
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_wallet/post(CreateWallet)`.
  func CreateWallet(_ input: Operations.CreateWallet.Input) async throws
    -> Operations.CreateWallet.Output
  /// Create Wallet Accounts
  ///
  /// Derive additional addresses using an existing wallet
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_wallet_accounts`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_wallet_accounts/post(CreateWalletAccounts)`.
  func CreateWalletAccounts(_ input: Operations.CreateWalletAccounts.Input) async throws
    -> Operations.CreateWalletAccounts.Output
  /// Delete API Keys
  ///
  /// Remove api keys from a User
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_api_keys`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_api_keys/post(DeleteApiKeys)`.
  func DeleteApiKeys(_ input: Operations.DeleteApiKeys.Input) async throws
    -> Operations.DeleteApiKeys.Output
  /// Delete Authenticators
  ///
  /// Remove authenticators from a User
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_authenticators`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_authenticators/post(DeleteAuthenticators)`.
  func DeleteAuthenticators(_ input: Operations.DeleteAuthenticators.Input) async throws
    -> Operations.DeleteAuthenticators.Output
  /// Delete Invitation
  ///
  /// Delete an existing Invitation
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_invitation`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_invitation/post(DeleteInvitation)`.
  func DeleteInvitation(_ input: Operations.DeleteInvitation.Input) async throws
    -> Operations.DeleteInvitation.Output
  /// Delete Oauth Providers
  ///
  /// Removes Oauth providers for a specified user - BETA
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_oauth_providers`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_oauth_providers/post(DeleteOauthProviders)`.
  func DeleteOauthProviders(_ input: Operations.DeleteOauthProviders.Input) async throws
    -> Operations.DeleteOauthProviders.Output
  /// Delete Policy
  ///
  /// Delete an existing Policy
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_policy`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_policy/post(DeletePolicy)`.
  func DeletePolicy(_ input: Operations.DeletePolicy.Input) async throws
    -> Operations.DeletePolicy.Output
  /// Delete Private Key Tags
  ///
  /// Delete Private Key Tags within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_private_key_tags`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_private_key_tags/post(DeletePrivateKeyTags)`.
  func DeletePrivateKeyTags(_ input: Operations.DeletePrivateKeyTags.Input) async throws
    -> Operations.DeletePrivateKeyTags.Output
  /// Delete Private Keys
  ///
  /// Deletes private keys for an organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_private_keys`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_private_keys/post(DeletePrivateKeys)`.
  func DeletePrivateKeys(_ input: Operations.DeletePrivateKeys.Input) async throws
    -> Operations.DeletePrivateKeys.Output
  /// Delete Sub Organization
  ///
  /// Deletes a sub organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_sub_organization`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_sub_organization/post(DeleteSubOrganization)`.
  func DeleteSubOrganization(_ input: Operations.DeleteSubOrganization.Input) async throws
    -> Operations.DeleteSubOrganization.Output
  /// Delete User Tags
  ///
  /// Delete User Tags within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_user_tags`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_user_tags/post(DeleteUserTags)`.
  func DeleteUserTags(_ input: Operations.DeleteUserTags.Input) async throws
    -> Operations.DeleteUserTags.Output
  /// Delete Users
  ///
  /// Delete Users within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_users`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_users/post(DeleteUsers)`.
  func DeleteUsers(_ input: Operations.DeleteUsers.Input) async throws
    -> Operations.DeleteUsers.Output
  /// Delete Wallets
  ///
  /// Deletes wallets for an organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_wallets`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_wallets/post(DeleteWallets)`.
  func DeleteWallets(_ input: Operations.DeleteWallets.Input) async throws
    -> Operations.DeleteWallets.Output
  /// Perform Email Auth
  ///
  /// Authenticate a user via Email
  ///
  /// - Remark: HTTP `POST /public/v1/submit/email_auth`.
  /// - Remark: Generated from `#/paths//public/v1/submit/email_auth/post(EmailAuth)`.
  func EmailAuth(_ input: Operations.EmailAuth.Input) async throws -> Operations.EmailAuth.Output
  /// Export Private Key
  ///
  /// Exports a Private Key
  ///
  /// - Remark: HTTP `POST /public/v1/submit/export_private_key`.
  /// - Remark: Generated from `#/paths//public/v1/submit/export_private_key/post(ExportPrivateKey)`.
  func ExportPrivateKey(_ input: Operations.ExportPrivateKey.Input) async throws
    -> Operations.ExportPrivateKey.Output
  /// Export Wallet
  ///
  /// Exports a Wallet
  ///
  /// - Remark: HTTP `POST /public/v1/submit/export_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/export_wallet/post(ExportWallet)`.
  func ExportWallet(_ input: Operations.ExportWallet.Input) async throws
    -> Operations.ExportWallet.Output
  /// Export Wallet Account
  ///
  /// Exports a Wallet Account
  ///
  /// - Remark: HTTP `POST /public/v1/submit/export_wallet_account`.
  /// - Remark: Generated from `#/paths//public/v1/submit/export_wallet_account/post(ExportWalletAccount)`.
  func ExportWalletAccount(_ input: Operations.ExportWalletAccount.Input) async throws
    -> Operations.ExportWalletAccount.Output
  /// Import Private Key
  ///
  /// Imports a private key
  ///
  /// - Remark: HTTP `POST /public/v1/submit/import_private_key`.
  /// - Remark: Generated from `#/paths//public/v1/submit/import_private_key/post(ImportPrivateKey)`.
  func ImportPrivateKey(_ input: Operations.ImportPrivateKey.Input) async throws
    -> Operations.ImportPrivateKey.Output
  /// Import Wallet
  ///
  /// Imports a wallet
  ///
  /// - Remark: HTTP `POST /public/v1/submit/import_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/import_wallet/post(ImportWallet)`.
  func ImportWallet(_ input: Operations.ImportWallet.Input) async throws
    -> Operations.ImportWallet.Output
  /// Init Import Private Key
  ///
  /// Initializes a new private key import
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_import_private_key`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_import_private_key/post(InitImportPrivateKey)`.
  func InitImportPrivateKey(_ input: Operations.InitImportPrivateKey.Input) async throws
    -> Operations.InitImportPrivateKey.Output
  /// Init Import Wallet
  ///
  /// Initializes a new wallet import
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_import_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_import_wallet/post(InitImportWallet)`.
  func InitImportWallet(_ input: Operations.InitImportWallet.Input) async throws
    -> Operations.InitImportWallet.Output
  /// Init Generic OTP
  ///
  /// Initiate a Generic OTP activity
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_otp`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_otp/post(InitOtp)`.
  func InitOtp(_ input: Operations.InitOtp.Input) async throws -> Operations.InitOtp.Output
  /// Init OTP auth
  ///
  /// Initiate an OTP auth activity
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_otp_auth`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_otp_auth/post(InitOtpAuth)`.
  func InitOtpAuth(_ input: Operations.InitOtpAuth.Input) async throws
    -> Operations.InitOtpAuth.Output
  /// Init Email Recovery
  ///
  /// Initializes a new email recovery
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_user_email_recovery`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_user_email_recovery/post(InitUserEmailRecovery)`.
  func InitUserEmailRecovery(_ input: Operations.InitUserEmailRecovery.Input) async throws
    -> Operations.InitUserEmailRecovery.Output
  /// Oauth
  ///
  /// Authenticate a user with an Oidc token (Oauth) - BETA
  ///
  /// - Remark: HTTP `POST /public/v1/submit/oauth`.
  /// - Remark: Generated from `#/paths//public/v1/submit/oauth/post(Oauth)`.
  func Oauth(_ input: Operations.Oauth.Input) async throws -> Operations.Oauth.Output
  /// Login with Oauth
  ///
  /// Create an Oauth session for a user
  ///
  /// - Remark: HTTP `POST /public/v1/submit/oauth_login`.
  /// - Remark: Generated from `#/paths//public/v1/submit/oauth_login/post(OauthLogin)`.
  func OauthLogin(_ input: Operations.OauthLogin.Input) async throws -> Operations.OauthLogin.Output
  /// OTP auth
  ///
  /// Authenticate a user with an OTP code sent via email or SMS
  ///
  /// - Remark: HTTP `POST /public/v1/submit/otp_auth`.
  /// - Remark: Generated from `#/paths//public/v1/submit/otp_auth/post(OtpAuth)`.
  func OtpAuth(_ input: Operations.OtpAuth.Input) async throws -> Operations.OtpAuth.Output
  /// Login with OTP
  ///
  /// Create an OTP session for a user
  ///
  /// - Remark: HTTP `POST /public/v1/submit/otp_login`.
  /// - Remark: Generated from `#/paths//public/v1/submit/otp_login/post(OtpLogin)`.
  func OtpLogin(_ input: Operations.OtpLogin.Input) async throws -> Operations.OtpLogin.Output
  /// Recover a user
  ///
  /// Completes the process of recovering a user by adding an authenticator
  ///
  /// - Remark: HTTP `POST /public/v1/submit/recover_user`.
  /// - Remark: Generated from `#/paths//public/v1/submit/recover_user/post(RecoverUser)`.
  func RecoverUser(_ input: Operations.RecoverUser.Input) async throws
    -> Operations.RecoverUser.Output
  /// Reject Activity
  ///
  /// Reject an Activity
  ///
  /// - Remark: HTTP `POST /public/v1/submit/reject_activity`.
  /// - Remark: Generated from `#/paths//public/v1/submit/reject_activity/post(RejectActivity)`.
  func RejectActivity(_ input: Operations.RejectActivity.Input) async throws
    -> Operations.RejectActivity.Output
  /// Remove Organization Feature
  ///
  /// Removes an organization feature. This activity must be approved by the current root quorum.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/remove_organization_feature`.
  /// - Remark: Generated from `#/paths//public/v1/submit/remove_organization_feature/post(RemoveOrganizationFeature)`.
  func RemoveOrganizationFeature(_ input: Operations.RemoveOrganizationFeature.Input) async throws
    -> Operations.RemoveOrganizationFeature.Output
  /// Set Organization Feature
  ///
  /// Sets an organization feature. This activity must be approved by the current root quorum.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/set_organization_feature`.
  /// - Remark: Generated from `#/paths//public/v1/submit/set_organization_feature/post(SetOrganizationFeature)`.
  func SetOrganizationFeature(_ input: Operations.SetOrganizationFeature.Input) async throws
    -> Operations.SetOrganizationFeature.Output
  /// Sign Raw Payload
  ///
  /// Sign a raw payload
  ///
  /// - Remark: HTTP `POST /public/v1/submit/sign_raw_payload`.
  /// - Remark: Generated from `#/paths//public/v1/submit/sign_raw_payload/post(SignRawPayload)`.
  func SignRawPayload(_ input: Operations.SignRawPayload.Input) async throws
    -> Operations.SignRawPayload.Output
  /// Sign Raw Payloads
  ///
  /// Sign multiple raw payloads with the same signing parameters
  ///
  /// - Remark: HTTP `POST /public/v1/submit/sign_raw_payloads`.
  /// - Remark: Generated from `#/paths//public/v1/submit/sign_raw_payloads/post(SignRawPayloads)`.
  func SignRawPayloads(_ input: Operations.SignRawPayloads.Input) async throws
    -> Operations.SignRawPayloads.Output
  /// Sign Transaction
  ///
  /// Sign a transaction
  ///
  /// - Remark: HTTP `POST /public/v1/submit/sign_transaction`.
  /// - Remark: Generated from `#/paths//public/v1/submit/sign_transaction/post(SignTransaction)`.
  func SignTransaction(_ input: Operations.SignTransaction.Input) async throws
    -> Operations.SignTransaction.Output
  /// Login with a Stamp
  ///
  /// Create a session for a user through stamping client side (api key, wallet client, or passkey client)
  ///
  /// - Remark: HTTP `POST /public/v1/submit/stamp_login`.
  /// - Remark: Generated from `#/paths//public/v1/submit/stamp_login/post(StampLogin)`.
  func StampLogin(_ input: Operations.StampLogin.Input) async throws -> Operations.StampLogin.Output
  /// Update Policy
  ///
  /// Update an existing Policy
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_policy`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_policy/post(UpdatePolicy)`.
  func UpdatePolicy(_ input: Operations.UpdatePolicy.Input) async throws
    -> Operations.UpdatePolicy.Output
  /// Update Private Key Tag
  ///
  /// Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_private_key_tag`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_private_key_tag/post(UpdatePrivateKeyTag)`.
  func UpdatePrivateKeyTag(_ input: Operations.UpdatePrivateKeyTag.Input) async throws
    -> Operations.UpdatePrivateKeyTag.Output
  /// Update Root Quorum
  ///
  /// Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_root_quorum`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_root_quorum/post(UpdateRootQuorum)`.
  func UpdateRootQuorum(_ input: Operations.UpdateRootQuorum.Input) async throws
    -> Operations.UpdateRootQuorum.Output
  /// Update User
  ///
  /// Update a User in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user/post(UpdateUser)`.
  func UpdateUser(_ input: Operations.UpdateUser.Input) async throws -> Operations.UpdateUser.Output
  /// Update User's Email
  ///
  /// Update a User's email in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user_email`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user_email/post(UpdateUserEmail)`.
  func UpdateUserEmail(_ input: Operations.UpdateUserEmail.Input) async throws
    -> Operations.UpdateUserEmail.Output
  /// Update User's Name
  ///
  /// Update a User's name in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user_name`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user_name/post(UpdateUserName)`.
  func UpdateUserName(_ input: Operations.UpdateUserName.Input) async throws
    -> Operations.UpdateUserName.Output
  /// Update User's Phone Number
  ///
  /// Update a User's phone number in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user_phone_number`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user_phone_number/post(UpdateUserPhoneNumber)`.
  func UpdateUserPhoneNumber(_ input: Operations.UpdateUserPhoneNumber.Input) async throws
    -> Operations.UpdateUserPhoneNumber.Output
  /// Update User Tag
  ///
  /// Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user_tag`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user_tag/post(UpdateUserTag)`.
  func UpdateUserTag(_ input: Operations.UpdateUserTag.Input) async throws
    -> Operations.UpdateUserTag.Output
  /// Update Wallet
  ///
  /// Update a wallet for an organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_wallet/post(UpdateWallet)`.
  func UpdateWallet(_ input: Operations.UpdateWallet.Input) async throws
    -> Operations.UpdateWallet.Output
  /// Verify Generic OTP
  ///
  /// Verify a Generic OTP
  ///
  /// - Remark: HTTP `POST /public/v1/submit/verify_otp`.
  /// - Remark: Generated from `#/paths//public/v1/submit/verify_otp/post(VerifyOtp)`.
  func VerifyOtp(_ input: Operations.VerifyOtp.Input) async throws -> Operations.VerifyOtp.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
  /// Get Activity
  ///
  /// Get details about an Activity
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_activity`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_activity/post(GetActivity)`.
  public func GetActivity(
    headers: Operations.GetActivity.Input.Headers = .init(),
    body: Operations.GetActivity.Input.Body
  ) async throws -> Operations.GetActivity.Output {
    try await GetActivity(
      Operations.GetActivity.Input(
        headers: headers,
        body: body
      ))
  }
  /// Get API key
  ///
  /// Get details about an API key
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_api_key`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_api_key/post(GetApiKey)`.
  public func GetApiKey(
    headers: Operations.GetApiKey.Input.Headers = .init(),
    body: Operations.GetApiKey.Input.Body
  ) async throws -> Operations.GetApiKey.Output {
    try await GetApiKey(
      Operations.GetApiKey.Input(
        headers: headers,
        body: body
      ))
  }
  /// Get API keys
  ///
  /// Get details about API keys for a user
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_api_keys`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_api_keys/post(GetApiKeys)`.
  public func GetApiKeys(
    headers: Operations.GetApiKeys.Input.Headers = .init(),
    body: Operations.GetApiKeys.Input.Body
  ) async throws -> Operations.GetApiKeys.Output {
    try await GetApiKeys(
      Operations.GetApiKeys.Input(
        headers: headers,
        body: body
      ))
  }
  /// Get Authenticator
  ///
  /// Get details about an authenticator
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_authenticator`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_authenticator/post(GetAuthenticator)`.
  public func GetAuthenticator(
    headers: Operations.GetAuthenticator.Input.Headers = .init(),
    body: Operations.GetAuthenticator.Input.Body
  ) async throws -> Operations.GetAuthenticator.Output {
    try await GetAuthenticator(
      Operations.GetAuthenticator.Input(
        headers: headers,
        body: body
      ))
  }
  /// Get Authenticators
  ///
  /// Get details about authenticators for a user
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_authenticators`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_authenticators/post(GetAuthenticators)`.
  public func GetAuthenticators(
    headers: Operations.GetAuthenticators.Input.Headers = .init(),
    body: Operations.GetAuthenticators.Input.Body
  ) async throws -> Operations.GetAuthenticators.Output {
    try await GetAuthenticators(
      Operations.GetAuthenticators.Input(
        headers: headers,
        body: body
      ))
  }
  /// Get Oauth providers
  ///
  /// Get details about Oauth providers for a user
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_oauth_providers`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_oauth_providers/post(GetOauthProviders)`.
  public func GetOauthProviders(
    headers: Operations.GetOauthProviders.Input.Headers = .init(),
    body: Operations.GetOauthProviders.Input.Body
  ) async throws -> Operations.GetOauthProviders.Output {
    try await GetOauthProviders(
      Operations.GetOauthProviders.Input(
        headers: headers,
        body: body
      ))
  }
  /// Get Configs
  ///
  /// Get quorum settings and features for an organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_organization_configs`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_organization_configs/post(GetOrganizationConfigs)`.
  public func GetOrganizationConfigs(
    headers: Operations.GetOrganizationConfigs.Input.Headers = .init(),
    body: Operations.GetOrganizationConfigs.Input.Body
  ) async throws -> Operations.GetOrganizationConfigs.Output {
    try await GetOrganizationConfigs(
      Operations.GetOrganizationConfigs.Input(
        headers: headers,
        body: body
      ))
  }
  /// Get Policy
  ///
  /// Get details about a Policy
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_policy`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_policy/post(GetPolicy)`.
  public func GetPolicy(
    headers: Operations.GetPolicy.Input.Headers = .init(),
    body: Operations.GetPolicy.Input.Body
  ) async throws -> Operations.GetPolicy.Output {
    try await GetPolicy(
      Operations.GetPolicy.Input(
        headers: headers,
        body: body
      ))
  }
  /// Get Private Key
  ///
  /// Get details about a Private Key
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_private_key`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_private_key/post(GetPrivateKey)`.
  public func GetPrivateKey(
    headers: Operations.GetPrivateKey.Input.Headers = .init(),
    body: Operations.GetPrivateKey.Input.Body
  ) async throws -> Operations.GetPrivateKey.Output {
    try await GetPrivateKey(
      Operations.GetPrivateKey.Input(
        headers: headers,
        body: body
      ))
  }
  /// Get User
  ///
  /// Get details about a User
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_user`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_user/post(GetUser)`.
  public func GetUser(
    headers: Operations.GetUser.Input.Headers = .init(),
    body: Operations.GetUser.Input.Body
  ) async throws -> Operations.GetUser.Output {
    try await GetUser(
      Operations.GetUser.Input(
        headers: headers,
        body: body
      ))
  }
  /// Get Wallet
  ///
  /// Get details about a Wallet
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_wallet/post(GetWallet)`.
  public func GetWallet(
    headers: Operations.GetWallet.Input.Headers = .init(),
    body: Operations.GetWallet.Input.Body
  ) async throws -> Operations.GetWallet.Output {
    try await GetWallet(
      Operations.GetWallet.Input(
        headers: headers,
        body: body
      ))
  }
  /// Get Wallet Account
  ///
  /// Get a single wallet account
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_wallet_account`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_wallet_account/post(GetWalletAccount)`.
  public func GetWalletAccount(
    headers: Operations.GetWalletAccount.Input.Headers = .init(),
    body: Operations.GetWalletAccount.Input.Body
  ) async throws -> Operations.GetWalletAccount.Output {
    try await GetWalletAccount(
      Operations.GetWalletAccount.Input(
        headers: headers,
        body: body
      ))
  }
  /// List Activities
  ///
  /// List all Activities within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_activities`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_activities/post(GetActivities)`.
  public func GetActivities(
    headers: Operations.GetActivities.Input.Headers = .init(),
    body: Operations.GetActivities.Input.Body
  ) async throws -> Operations.GetActivities.Output {
    try await GetActivities(
      Operations.GetActivities.Input(
        headers: headers,
        body: body
      ))
  }
  /// List Policies
  ///
  /// List all Policies within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_policies`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_policies/post(GetPolicies)`.
  public func GetPolicies(
    headers: Operations.GetPolicies.Input.Headers = .init(),
    body: Operations.GetPolicies.Input.Body
  ) async throws -> Operations.GetPolicies.Output {
    try await GetPolicies(
      Operations.GetPolicies.Input(
        headers: headers,
        body: body
      ))
  }
  /// List Private Key Tags
  ///
  /// List all Private Key Tags within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_private_key_tags`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_private_key_tags/post(ListPrivateKeyTags)`.
  public func ListPrivateKeyTags(
    headers: Operations.ListPrivateKeyTags.Input.Headers = .init(),
    body: Operations.ListPrivateKeyTags.Input.Body
  ) async throws -> Operations.ListPrivateKeyTags.Output {
    try await ListPrivateKeyTags(
      Operations.ListPrivateKeyTags.Input(
        headers: headers,
        body: body
      ))
  }
  /// List Private Keys
  ///
  /// List all Private Keys within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_private_keys`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_private_keys/post(GetPrivateKeys)`.
  public func GetPrivateKeys(
    headers: Operations.GetPrivateKeys.Input.Headers = .init(),
    body: Operations.GetPrivateKeys.Input.Body
  ) async throws -> Operations.GetPrivateKeys.Output {
    try await GetPrivateKeys(
      Operations.GetPrivateKeys.Input(
        headers: headers,
        body: body
      ))
  }
  /// Get Suborgs
  ///
  /// Get all suborg IDs associated given a parent org ID and an optional filter.
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_suborgs`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_suborgs/post(GetSubOrgIds)`.
  public func GetSubOrgIds(
    headers: Operations.GetSubOrgIds.Input.Headers = .init(),
    body: Operations.GetSubOrgIds.Input.Body
  ) async throws -> Operations.GetSubOrgIds.Output {
    try await GetSubOrgIds(
      Operations.GetSubOrgIds.Input(
        headers: headers,
        body: body
      ))
  }
  /// List User Tags
  ///
  /// List all User Tags within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_user_tags`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_user_tags/post(ListUserTags)`.
  public func ListUserTags(
    headers: Operations.ListUserTags.Input.Headers = .init(),
    body: Operations.ListUserTags.Input.Body
  ) async throws -> Operations.ListUserTags.Output {
    try await ListUserTags(
      Operations.ListUserTags.Input(
        headers: headers,
        body: body
      ))
  }
  /// List Users
  ///
  /// List all Users within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_users`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_users/post(GetUsers)`.
  public func GetUsers(
    headers: Operations.GetUsers.Input.Headers = .init(),
    body: Operations.GetUsers.Input.Body
  ) async throws -> Operations.GetUsers.Output {
    try await GetUsers(
      Operations.GetUsers.Input(
        headers: headers,
        body: body
      ))
  }
  /// Get Verified Suborgs
  ///
  /// Get all email or phone verified suborg IDs associated given a parent org ID.
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_verified_suborgs`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_verified_suborgs/post(GetVerifiedSubOrgIds)`.
  public func GetVerifiedSubOrgIds(
    headers: Operations.GetVerifiedSubOrgIds.Input.Headers = .init(),
    body: Operations.GetVerifiedSubOrgIds.Input.Body
  ) async throws -> Operations.GetVerifiedSubOrgIds.Output {
    try await GetVerifiedSubOrgIds(
      Operations.GetVerifiedSubOrgIds.Input(
        headers: headers,
        body: body
      ))
  }
  /// List Wallets Accounts
  ///
  /// List all Accounts within a Wallet
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_wallet_accounts`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_wallet_accounts/post(GetWalletAccounts)`.
  public func GetWalletAccounts(
    headers: Operations.GetWalletAccounts.Input.Headers = .init(),
    body: Operations.GetWalletAccounts.Input.Body
  ) async throws -> Operations.GetWalletAccounts.Output {
    try await GetWalletAccounts(
      Operations.GetWalletAccounts.Input(
        headers: headers,
        body: body
      ))
  }
  /// List Wallets
  ///
  /// List all Wallets within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_wallets`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_wallets/post(GetWallets)`.
  public func GetWallets(
    headers: Operations.GetWallets.Input.Headers = .init(),
    body: Operations.GetWallets.Input.Body
  ) async throws -> Operations.GetWallets.Output {
    try await GetWallets(
      Operations.GetWallets.Input(
        headers: headers,
        body: body
      ))
  }
  /// Who am I?
  ///
  /// Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.
  ///
  /// - Remark: HTTP `POST /public/v1/query/whoami`.
  /// - Remark: Generated from `#/paths//public/v1/query/whoami/post(GetWhoami)`.
  public func GetWhoami(
    headers: Operations.GetWhoami.Input.Headers = .init(),
    body: Operations.GetWhoami.Input.Body
  ) async throws -> Operations.GetWhoami.Output {
    try await GetWhoami(
      Operations.GetWhoami.Input(
        headers: headers,
        body: body
      ))
  }
  /// Approve Activity
  ///
  /// Approve an Activity
  ///
  /// - Remark: HTTP `POST /public/v1/submit/approve_activity`.
  /// - Remark: Generated from `#/paths//public/v1/submit/approve_activity/post(ApproveActivity)`.
  public func ApproveActivity(
    headers: Operations.ApproveActivity.Input.Headers = .init(),
    body: Operations.ApproveActivity.Input.Body
  ) async throws -> Operations.ApproveActivity.Output {
    try await ApproveActivity(
      Operations.ApproveActivity.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create API Keys
  ///
  /// Add api keys to an existing User
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_api_keys`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_api_keys/post(CreateApiKeys)`.
  public func CreateApiKeys(
    headers: Operations.CreateApiKeys.Input.Headers = .init(),
    body: Operations.CreateApiKeys.Input.Body
  ) async throws -> Operations.CreateApiKeys.Output {
    try await CreateApiKeys(
      Operations.CreateApiKeys.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create Authenticators
  ///
  /// Create Authenticators to authenticate requests to Turnkey
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_authenticators`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_authenticators/post(CreateAuthenticators)`.
  public func CreateAuthenticators(
    headers: Operations.CreateAuthenticators.Input.Headers = .init(),
    body: Operations.CreateAuthenticators.Input.Body
  ) async throws -> Operations.CreateAuthenticators.Output {
    try await CreateAuthenticators(
      Operations.CreateAuthenticators.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create Invitations
  ///
  /// Create Invitations to join an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_invitations`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_invitations/post(CreateInvitations)`.
  public func CreateInvitations(
    headers: Operations.CreateInvitations.Input.Headers = .init(),
    body: Operations.CreateInvitations.Input.Body
  ) async throws -> Operations.CreateInvitations.Output {
    try await CreateInvitations(
      Operations.CreateInvitations.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create Oauth Providers
  ///
  /// Creates Oauth providers for a specified user - BETA
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_oauth_providers`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_oauth_providers/post(CreateOauthProviders)`.
  public func CreateOauthProviders(
    headers: Operations.CreateOauthProviders.Input.Headers = .init(),
    body: Operations.CreateOauthProviders.Input.Body
  ) async throws -> Operations.CreateOauthProviders.Output {
    try await CreateOauthProviders(
      Operations.CreateOauthProviders.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create Policies
  ///
  /// Create new Policies
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_policies`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_policies/post(CreatePolicies)`.
  public func CreatePolicies(
    headers: Operations.CreatePolicies.Input.Headers = .init(),
    body: Operations.CreatePolicies.Input.Body
  ) async throws -> Operations.CreatePolicies.Output {
    try await CreatePolicies(
      Operations.CreatePolicies.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create Policy
  ///
  /// Create a new Policy
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_policy`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_policy/post(CreatePolicy)`.
  public func CreatePolicy(
    headers: Operations.CreatePolicy.Input.Headers = .init(),
    body: Operations.CreatePolicy.Input.Body
  ) async throws -> Operations.CreatePolicy.Output {
    try await CreatePolicy(
      Operations.CreatePolicy.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create Private Key Tag
  ///
  /// Create a private key tag and add it to private keys.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_private_key_tag`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_private_key_tag/post(CreatePrivateKeyTag)`.
  public func CreatePrivateKeyTag(
    headers: Operations.CreatePrivateKeyTag.Input.Headers = .init(),
    body: Operations.CreatePrivateKeyTag.Input.Body
  ) async throws -> Operations.CreatePrivateKeyTag.Output {
    try await CreatePrivateKeyTag(
      Operations.CreatePrivateKeyTag.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create Private Keys
  ///
  /// Create new Private Keys
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_private_keys`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_private_keys/post(CreatePrivateKeys)`.
  public func CreatePrivateKeys(
    headers: Operations.CreatePrivateKeys.Input.Headers = .init(),
    body: Operations.CreatePrivateKeys.Input.Body
  ) async throws -> Operations.CreatePrivateKeys.Output {
    try await CreatePrivateKeys(
      Operations.CreatePrivateKeys.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create Read Only Session
  ///
  /// Create a read only session for a user (valid for 1 hour)
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_read_only_session`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_read_only_session/post(CreateReadOnlySession)`.
  public func CreateReadOnlySession(
    headers: Operations.CreateReadOnlySession.Input.Headers = .init(),
    body: Operations.CreateReadOnlySession.Input.Body
  ) async throws -> Operations.CreateReadOnlySession.Output {
    try await CreateReadOnlySession(
      Operations.CreateReadOnlySession.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create Read Write Session
  ///
  /// Create a read write session for a user
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_read_write_session`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_read_write_session/post(CreateReadWriteSession)`.
  public func CreateReadWriteSession(
    headers: Operations.CreateReadWriteSession.Input.Headers = .init(),
    body: Operations.CreateReadWriteSession.Input.Body
  ) async throws -> Operations.CreateReadWriteSession.Output {
    try await CreateReadWriteSession(
      Operations.CreateReadWriteSession.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create Sub-Organization
  ///
  /// Create a new Sub-Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_sub_organization`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_sub_organization/post(CreateSubOrganization)`.
  public func CreateSubOrganization(
    headers: Operations.CreateSubOrganization.Input.Headers = .init(),
    body: Operations.CreateSubOrganization.Input.Body
  ) async throws -> Operations.CreateSubOrganization.Output {
    try await CreateSubOrganization(
      Operations.CreateSubOrganization.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create User Tag
  ///
  /// Create a user tag and add it to users.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_user_tag`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_user_tag/post(CreateUserTag)`.
  public func CreateUserTag(
    headers: Operations.CreateUserTag.Input.Headers = .init(),
    body: Operations.CreateUserTag.Input.Body
  ) async throws -> Operations.CreateUserTag.Output {
    try await CreateUserTag(
      Operations.CreateUserTag.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create Users
  ///
  /// Create Users in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_users`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_users/post(CreateUsers)`.
  public func CreateUsers(
    headers: Operations.CreateUsers.Input.Headers = .init(),
    body: Operations.CreateUsers.Input.Body
  ) async throws -> Operations.CreateUsers.Output {
    try await CreateUsers(
      Operations.CreateUsers.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create Wallet
  ///
  /// Create a Wallet and derive addresses
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_wallet/post(CreateWallet)`.
  public func CreateWallet(
    headers: Operations.CreateWallet.Input.Headers = .init(),
    body: Operations.CreateWallet.Input.Body
  ) async throws -> Operations.CreateWallet.Output {
    try await CreateWallet(
      Operations.CreateWallet.Input(
        headers: headers,
        body: body
      ))
  }
  /// Create Wallet Accounts
  ///
  /// Derive additional addresses using an existing wallet
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_wallet_accounts`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_wallet_accounts/post(CreateWalletAccounts)`.
  public func CreateWalletAccounts(
    headers: Operations.CreateWalletAccounts.Input.Headers = .init(),
    body: Operations.CreateWalletAccounts.Input.Body
  ) async throws -> Operations.CreateWalletAccounts.Output {
    try await CreateWalletAccounts(
      Operations.CreateWalletAccounts.Input(
        headers: headers,
        body: body
      ))
  }
  /// Delete API Keys
  ///
  /// Remove api keys from a User
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_api_keys`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_api_keys/post(DeleteApiKeys)`.
  public func DeleteApiKeys(
    headers: Operations.DeleteApiKeys.Input.Headers = .init(),
    body: Operations.DeleteApiKeys.Input.Body
  ) async throws -> Operations.DeleteApiKeys.Output {
    try await DeleteApiKeys(
      Operations.DeleteApiKeys.Input(
        headers: headers,
        body: body
      ))
  }
  /// Delete Authenticators
  ///
  /// Remove authenticators from a User
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_authenticators`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_authenticators/post(DeleteAuthenticators)`.
  public func DeleteAuthenticators(
    headers: Operations.DeleteAuthenticators.Input.Headers = .init(),
    body: Operations.DeleteAuthenticators.Input.Body
  ) async throws -> Operations.DeleteAuthenticators.Output {
    try await DeleteAuthenticators(
      Operations.DeleteAuthenticators.Input(
        headers: headers,
        body: body
      ))
  }
  /// Delete Invitation
  ///
  /// Delete an existing Invitation
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_invitation`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_invitation/post(DeleteInvitation)`.
  public func DeleteInvitation(
    headers: Operations.DeleteInvitation.Input.Headers = .init(),
    body: Operations.DeleteInvitation.Input.Body
  ) async throws -> Operations.DeleteInvitation.Output {
    try await DeleteInvitation(
      Operations.DeleteInvitation.Input(
        headers: headers,
        body: body
      ))
  }
  /// Delete Oauth Providers
  ///
  /// Removes Oauth providers for a specified user - BETA
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_oauth_providers`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_oauth_providers/post(DeleteOauthProviders)`.
  public func DeleteOauthProviders(
    headers: Operations.DeleteOauthProviders.Input.Headers = .init(),
    body: Operations.DeleteOauthProviders.Input.Body
  ) async throws -> Operations.DeleteOauthProviders.Output {
    try await DeleteOauthProviders(
      Operations.DeleteOauthProviders.Input(
        headers: headers,
        body: body
      ))
  }
  /// Delete Policy
  ///
  /// Delete an existing Policy
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_policy`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_policy/post(DeletePolicy)`.
  public func DeletePolicy(
    headers: Operations.DeletePolicy.Input.Headers = .init(),
    body: Operations.DeletePolicy.Input.Body
  ) async throws -> Operations.DeletePolicy.Output {
    try await DeletePolicy(
      Operations.DeletePolicy.Input(
        headers: headers,
        body: body
      ))
  }
  /// Delete Private Key Tags
  ///
  /// Delete Private Key Tags within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_private_key_tags`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_private_key_tags/post(DeletePrivateKeyTags)`.
  public func DeletePrivateKeyTags(
    headers: Operations.DeletePrivateKeyTags.Input.Headers = .init(),
    body: Operations.DeletePrivateKeyTags.Input.Body
  ) async throws -> Operations.DeletePrivateKeyTags.Output {
    try await DeletePrivateKeyTags(
      Operations.DeletePrivateKeyTags.Input(
        headers: headers,
        body: body
      ))
  }
  /// Delete Private Keys
  ///
  /// Deletes private keys for an organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_private_keys`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_private_keys/post(DeletePrivateKeys)`.
  public func DeletePrivateKeys(
    headers: Operations.DeletePrivateKeys.Input.Headers = .init(),
    body: Operations.DeletePrivateKeys.Input.Body
  ) async throws -> Operations.DeletePrivateKeys.Output {
    try await DeletePrivateKeys(
      Operations.DeletePrivateKeys.Input(
        headers: headers,
        body: body
      ))
  }
  /// Delete Sub Organization
  ///
  /// Deletes a sub organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_sub_organization`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_sub_organization/post(DeleteSubOrganization)`.
  public func DeleteSubOrganization(
    headers: Operations.DeleteSubOrganization.Input.Headers = .init(),
    body: Operations.DeleteSubOrganization.Input.Body
  ) async throws -> Operations.DeleteSubOrganization.Output {
    try await DeleteSubOrganization(
      Operations.DeleteSubOrganization.Input(
        headers: headers,
        body: body
      ))
  }
  /// Delete User Tags
  ///
  /// Delete User Tags within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_user_tags`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_user_tags/post(DeleteUserTags)`.
  public func DeleteUserTags(
    headers: Operations.DeleteUserTags.Input.Headers = .init(),
    body: Operations.DeleteUserTags.Input.Body
  ) async throws -> Operations.DeleteUserTags.Output {
    try await DeleteUserTags(
      Operations.DeleteUserTags.Input(
        headers: headers,
        body: body
      ))
  }
  /// Delete Users
  ///
  /// Delete Users within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_users`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_users/post(DeleteUsers)`.
  public func DeleteUsers(
    headers: Operations.DeleteUsers.Input.Headers = .init(),
    body: Operations.DeleteUsers.Input.Body
  ) async throws -> Operations.DeleteUsers.Output {
    try await DeleteUsers(
      Operations.DeleteUsers.Input(
        headers: headers,
        body: body
      ))
  }
  /// Delete Wallets
  ///
  /// Deletes wallets for an organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_wallets`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_wallets/post(DeleteWallets)`.
  public func DeleteWallets(
    headers: Operations.DeleteWallets.Input.Headers = .init(),
    body: Operations.DeleteWallets.Input.Body
  ) async throws -> Operations.DeleteWallets.Output {
    try await DeleteWallets(
      Operations.DeleteWallets.Input(
        headers: headers,
        body: body
      ))
  }
  /// Perform Email Auth
  ///
  /// Authenticate a user via Email
  ///
  /// - Remark: HTTP `POST /public/v1/submit/email_auth`.
  /// - Remark: Generated from `#/paths//public/v1/submit/email_auth/post(EmailAuth)`.
  public func EmailAuth(
    headers: Operations.EmailAuth.Input.Headers = .init(),
    body: Operations.EmailAuth.Input.Body
  ) async throws -> Operations.EmailAuth.Output {
    try await EmailAuth(
      Operations.EmailAuth.Input(
        headers: headers,
        body: body
      ))
  }
  /// Export Private Key
  ///
  /// Exports a Private Key
  ///
  /// - Remark: HTTP `POST /public/v1/submit/export_private_key`.
  /// - Remark: Generated from `#/paths//public/v1/submit/export_private_key/post(ExportPrivateKey)`.
  public func ExportPrivateKey(
    headers: Operations.ExportPrivateKey.Input.Headers = .init(),
    body: Operations.ExportPrivateKey.Input.Body
  ) async throws -> Operations.ExportPrivateKey.Output {
    try await ExportPrivateKey(
      Operations.ExportPrivateKey.Input(
        headers: headers,
        body: body
      ))
  }
  /// Export Wallet
  ///
  /// Exports a Wallet
  ///
  /// - Remark: HTTP `POST /public/v1/submit/export_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/export_wallet/post(ExportWallet)`.
  public func ExportWallet(
    headers: Operations.ExportWallet.Input.Headers = .init(),
    body: Operations.ExportWallet.Input.Body
  ) async throws -> Operations.ExportWallet.Output {
    try await ExportWallet(
      Operations.ExportWallet.Input(
        headers: headers,
        body: body
      ))
  }
  /// Export Wallet Account
  ///
  /// Exports a Wallet Account
  ///
  /// - Remark: HTTP `POST /public/v1/submit/export_wallet_account`.
  /// - Remark: Generated from `#/paths//public/v1/submit/export_wallet_account/post(ExportWalletAccount)`.
  public func ExportWalletAccount(
    headers: Operations.ExportWalletAccount.Input.Headers = .init(),
    body: Operations.ExportWalletAccount.Input.Body
  ) async throws -> Operations.ExportWalletAccount.Output {
    try await ExportWalletAccount(
      Operations.ExportWalletAccount.Input(
        headers: headers,
        body: body
      ))
  }
  /// Import Private Key
  ///
  /// Imports a private key
  ///
  /// - Remark: HTTP `POST /public/v1/submit/import_private_key`.
  /// - Remark: Generated from `#/paths//public/v1/submit/import_private_key/post(ImportPrivateKey)`.
  public func ImportPrivateKey(
    headers: Operations.ImportPrivateKey.Input.Headers = .init(),
    body: Operations.ImportPrivateKey.Input.Body
  ) async throws -> Operations.ImportPrivateKey.Output {
    try await ImportPrivateKey(
      Operations.ImportPrivateKey.Input(
        headers: headers,
        body: body
      ))
  }
  /// Import Wallet
  ///
  /// Imports a wallet
  ///
  /// - Remark: HTTP `POST /public/v1/submit/import_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/import_wallet/post(ImportWallet)`.
  public func ImportWallet(
    headers: Operations.ImportWallet.Input.Headers = .init(),
    body: Operations.ImportWallet.Input.Body
  ) async throws -> Operations.ImportWallet.Output {
    try await ImportWallet(
      Operations.ImportWallet.Input(
        headers: headers,
        body: body
      ))
  }
  /// Init Import Private Key
  ///
  /// Initializes a new private key import
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_import_private_key`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_import_private_key/post(InitImportPrivateKey)`.
  public func InitImportPrivateKey(
    headers: Operations.InitImportPrivateKey.Input.Headers = .init(),
    body: Operations.InitImportPrivateKey.Input.Body
  ) async throws -> Operations.InitImportPrivateKey.Output {
    try await InitImportPrivateKey(
      Operations.InitImportPrivateKey.Input(
        headers: headers,
        body: body
      ))
  }
  /// Init Import Wallet
  ///
  /// Initializes a new wallet import
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_import_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_import_wallet/post(InitImportWallet)`.
  public func InitImportWallet(
    headers: Operations.InitImportWallet.Input.Headers = .init(),
    body: Operations.InitImportWallet.Input.Body
  ) async throws -> Operations.InitImportWallet.Output {
    try await InitImportWallet(
      Operations.InitImportWallet.Input(
        headers: headers,
        body: body
      ))
  }
  /// Init Generic OTP
  ///
  /// Initiate a Generic OTP activity
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_otp`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_otp/post(InitOtp)`.
  public func InitOtp(
    headers: Operations.InitOtp.Input.Headers = .init(),
    body: Operations.InitOtp.Input.Body
  ) async throws -> Operations.InitOtp.Output {
    try await InitOtp(
      Operations.InitOtp.Input(
        headers: headers,
        body: body
      ))
  }
  /// Init OTP auth
  ///
  /// Initiate an OTP auth activity
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_otp_auth`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_otp_auth/post(InitOtpAuth)`.
  public func InitOtpAuth(
    headers: Operations.InitOtpAuth.Input.Headers = .init(),
    body: Operations.InitOtpAuth.Input.Body
  ) async throws -> Operations.InitOtpAuth.Output {
    try await InitOtpAuth(
      Operations.InitOtpAuth.Input(
        headers: headers,
        body: body
      ))
  }
  /// Init Email Recovery
  ///
  /// Initializes a new email recovery
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_user_email_recovery`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_user_email_recovery/post(InitUserEmailRecovery)`.
  public func InitUserEmailRecovery(
    headers: Operations.InitUserEmailRecovery.Input.Headers = .init(),
    body: Operations.InitUserEmailRecovery.Input.Body
  ) async throws -> Operations.InitUserEmailRecovery.Output {
    try await InitUserEmailRecovery(
      Operations.InitUserEmailRecovery.Input(
        headers: headers,
        body: body
      ))
  }
  /// Oauth
  ///
  /// Authenticate a user with an Oidc token (Oauth) - BETA
  ///
  /// - Remark: HTTP `POST /public/v1/submit/oauth`.
  /// - Remark: Generated from `#/paths//public/v1/submit/oauth/post(Oauth)`.
  public func Oauth(
    headers: Operations.Oauth.Input.Headers = .init(),
    body: Operations.Oauth.Input.Body
  ) async throws -> Operations.Oauth.Output {
    try await Oauth(
      Operations.Oauth.Input(
        headers: headers,
        body: body
      ))
  }
  /// Login with Oauth
  ///
  /// Create an Oauth session for a user
  ///
  /// - Remark: HTTP `POST /public/v1/submit/oauth_login`.
  /// - Remark: Generated from `#/paths//public/v1/submit/oauth_login/post(OauthLogin)`.
  public func OauthLogin(
    headers: Operations.OauthLogin.Input.Headers = .init(),
    body: Operations.OauthLogin.Input.Body
  ) async throws -> Operations.OauthLogin.Output {
    try await OauthLogin(
      Operations.OauthLogin.Input(
        headers: headers,
        body: body
      ))
  }
  /// OTP auth
  ///
  /// Authenticate a user with an OTP code sent via email or SMS
  ///
  /// - Remark: HTTP `POST /public/v1/submit/otp_auth`.
  /// - Remark: Generated from `#/paths//public/v1/submit/otp_auth/post(OtpAuth)`.
  public func OtpAuth(
    headers: Operations.OtpAuth.Input.Headers = .init(),
    body: Operations.OtpAuth.Input.Body
  ) async throws -> Operations.OtpAuth.Output {
    try await OtpAuth(
      Operations.OtpAuth.Input(
        headers: headers,
        body: body
      ))
  }
  /// Login with OTP
  ///
  /// Create an OTP session for a user
  ///
  /// - Remark: HTTP `POST /public/v1/submit/otp_login`.
  /// - Remark: Generated from `#/paths//public/v1/submit/otp_login/post(OtpLogin)`.
  public func OtpLogin(
    headers: Operations.OtpLogin.Input.Headers = .init(),
    body: Operations.OtpLogin.Input.Body
  ) async throws -> Operations.OtpLogin.Output {
    try await OtpLogin(
      Operations.OtpLogin.Input(
        headers: headers,
        body: body
      ))
  }
  /// Recover a user
  ///
  /// Completes the process of recovering a user by adding an authenticator
  ///
  /// - Remark: HTTP `POST /public/v1/submit/recover_user`.
  /// - Remark: Generated from `#/paths//public/v1/submit/recover_user/post(RecoverUser)`.
  public func RecoverUser(
    headers: Operations.RecoverUser.Input.Headers = .init(),
    body: Operations.RecoverUser.Input.Body
  ) async throws -> Operations.RecoverUser.Output {
    try await RecoverUser(
      Operations.RecoverUser.Input(
        headers: headers,
        body: body
      ))
  }
  /// Reject Activity
  ///
  /// Reject an Activity
  ///
  /// - Remark: HTTP `POST /public/v1/submit/reject_activity`.
  /// - Remark: Generated from `#/paths//public/v1/submit/reject_activity/post(RejectActivity)`.
  public func RejectActivity(
    headers: Operations.RejectActivity.Input.Headers = .init(),
    body: Operations.RejectActivity.Input.Body
  ) async throws -> Operations.RejectActivity.Output {
    try await RejectActivity(
      Operations.RejectActivity.Input(
        headers: headers,
        body: body
      ))
  }
  /// Remove Organization Feature
  ///
  /// Removes an organization feature. This activity must be approved by the current root quorum.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/remove_organization_feature`.
  /// - Remark: Generated from `#/paths//public/v1/submit/remove_organization_feature/post(RemoveOrganizationFeature)`.
  public func RemoveOrganizationFeature(
    headers: Operations.RemoveOrganizationFeature.Input.Headers = .init(),
    body: Operations.RemoveOrganizationFeature.Input.Body
  ) async throws -> Operations.RemoveOrganizationFeature.Output {
    try await RemoveOrganizationFeature(
      Operations.RemoveOrganizationFeature.Input(
        headers: headers,
        body: body
      ))
  }
  /// Set Organization Feature
  ///
  /// Sets an organization feature. This activity must be approved by the current root quorum.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/set_organization_feature`.
  /// - Remark: Generated from `#/paths//public/v1/submit/set_organization_feature/post(SetOrganizationFeature)`.
  public func SetOrganizationFeature(
    headers: Operations.SetOrganizationFeature.Input.Headers = .init(),
    body: Operations.SetOrganizationFeature.Input.Body
  ) async throws -> Operations.SetOrganizationFeature.Output {
    try await SetOrganizationFeature(
      Operations.SetOrganizationFeature.Input(
        headers: headers,
        body: body
      ))
  }
  /// Sign Raw Payload
  ///
  /// Sign a raw payload
  ///
  /// - Remark: HTTP `POST /public/v1/submit/sign_raw_payload`.
  /// - Remark: Generated from `#/paths//public/v1/submit/sign_raw_payload/post(SignRawPayload)`.
  public func SignRawPayload(
    headers: Operations.SignRawPayload.Input.Headers = .init(),
    body: Operations.SignRawPayload.Input.Body
  ) async throws -> Operations.SignRawPayload.Output {
    try await SignRawPayload(
      Operations.SignRawPayload.Input(
        headers: headers,
        body: body
      ))
  }
  /// Sign Raw Payloads
  ///
  /// Sign multiple raw payloads with the same signing parameters
  ///
  /// - Remark: HTTP `POST /public/v1/submit/sign_raw_payloads`.
  /// - Remark: Generated from `#/paths//public/v1/submit/sign_raw_payloads/post(SignRawPayloads)`.
  public func SignRawPayloads(
    headers: Operations.SignRawPayloads.Input.Headers = .init(),
    body: Operations.SignRawPayloads.Input.Body
  ) async throws -> Operations.SignRawPayloads.Output {
    try await SignRawPayloads(
      Operations.SignRawPayloads.Input(
        headers: headers,
        body: body
      ))
  }
  /// Sign Transaction
  ///
  /// Sign a transaction
  ///
  /// - Remark: HTTP `POST /public/v1/submit/sign_transaction`.
  /// - Remark: Generated from `#/paths//public/v1/submit/sign_transaction/post(SignTransaction)`.
  public func SignTransaction(
    headers: Operations.SignTransaction.Input.Headers = .init(),
    body: Operations.SignTransaction.Input.Body
  ) async throws -> Operations.SignTransaction.Output {
    try await SignTransaction(
      Operations.SignTransaction.Input(
        headers: headers,
        body: body
      ))
  }
  /// Login with a Stamp
  ///
  /// Create a session for a user through stamping client side (api key, wallet client, or passkey client)
  ///
  /// - Remark: HTTP `POST /public/v1/submit/stamp_login`.
  /// - Remark: Generated from `#/paths//public/v1/submit/stamp_login/post(StampLogin)`.
  public func StampLogin(
    headers: Operations.StampLogin.Input.Headers = .init(),
    body: Operations.StampLogin.Input.Body
  ) async throws -> Operations.StampLogin.Output {
    try await StampLogin(
      Operations.StampLogin.Input(
        headers: headers,
        body: body
      ))
  }
  /// Update Policy
  ///
  /// Update an existing Policy
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_policy`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_policy/post(UpdatePolicy)`.
  public func UpdatePolicy(
    headers: Operations.UpdatePolicy.Input.Headers = .init(),
    body: Operations.UpdatePolicy.Input.Body
  ) async throws -> Operations.UpdatePolicy.Output {
    try await UpdatePolicy(
      Operations.UpdatePolicy.Input(
        headers: headers,
        body: body
      ))
  }
  /// Update Private Key Tag
  ///
  /// Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_private_key_tag`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_private_key_tag/post(UpdatePrivateKeyTag)`.
  public func UpdatePrivateKeyTag(
    headers: Operations.UpdatePrivateKeyTag.Input.Headers = .init(),
    body: Operations.UpdatePrivateKeyTag.Input.Body
  ) async throws -> Operations.UpdatePrivateKeyTag.Output {
    try await UpdatePrivateKeyTag(
      Operations.UpdatePrivateKeyTag.Input(
        headers: headers,
        body: body
      ))
  }
  /// Update Root Quorum
  ///
  /// Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_root_quorum`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_root_quorum/post(UpdateRootQuorum)`.
  public func UpdateRootQuorum(
    headers: Operations.UpdateRootQuorum.Input.Headers = .init(),
    body: Operations.UpdateRootQuorum.Input.Body
  ) async throws -> Operations.UpdateRootQuorum.Output {
    try await UpdateRootQuorum(
      Operations.UpdateRootQuorum.Input(
        headers: headers,
        body: body
      ))
  }
  /// Update User
  ///
  /// Update a User in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user/post(UpdateUser)`.
  public func UpdateUser(
    headers: Operations.UpdateUser.Input.Headers = .init(),
    body: Operations.UpdateUser.Input.Body
  ) async throws -> Operations.UpdateUser.Output {
    try await UpdateUser(
      Operations.UpdateUser.Input(
        headers: headers,
        body: body
      ))
  }
  /// Update User's Email
  ///
  /// Update a User's email in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user_email`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user_email/post(UpdateUserEmail)`.
  public func UpdateUserEmail(
    headers: Operations.UpdateUserEmail.Input.Headers = .init(),
    body: Operations.UpdateUserEmail.Input.Body
  ) async throws -> Operations.UpdateUserEmail.Output {
    try await UpdateUserEmail(
      Operations.UpdateUserEmail.Input(
        headers: headers,
        body: body
      ))
  }
  /// Update User's Name
  ///
  /// Update a User's name in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user_name`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user_name/post(UpdateUserName)`.
  public func UpdateUserName(
    headers: Operations.UpdateUserName.Input.Headers = .init(),
    body: Operations.UpdateUserName.Input.Body
  ) async throws -> Operations.UpdateUserName.Output {
    try await UpdateUserName(
      Operations.UpdateUserName.Input(
        headers: headers,
        body: body
      ))
  }
  /// Update User's Phone Number
  ///
  /// Update a User's phone number in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user_phone_number`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user_phone_number/post(UpdateUserPhoneNumber)`.
  public func UpdateUserPhoneNumber(
    headers: Operations.UpdateUserPhoneNumber.Input.Headers = .init(),
    body: Operations.UpdateUserPhoneNumber.Input.Body
  ) async throws -> Operations.UpdateUserPhoneNumber.Output {
    try await UpdateUserPhoneNumber(
      Operations.UpdateUserPhoneNumber.Input(
        headers: headers,
        body: body
      ))
  }
  /// Update User Tag
  ///
  /// Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user_tag`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user_tag/post(UpdateUserTag)`.
  public func UpdateUserTag(
    headers: Operations.UpdateUserTag.Input.Headers = .init(),
    body: Operations.UpdateUserTag.Input.Body
  ) async throws -> Operations.UpdateUserTag.Output {
    try await UpdateUserTag(
      Operations.UpdateUserTag.Input(
        headers: headers,
        body: body
      ))
  }
  /// Update Wallet
  ///
  /// Update a wallet for an organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_wallet/post(UpdateWallet)`.
  public func UpdateWallet(
    headers: Operations.UpdateWallet.Input.Headers = .init(),
    body: Operations.UpdateWallet.Input.Body
  ) async throws -> Operations.UpdateWallet.Output {
    try await UpdateWallet(
      Operations.UpdateWallet.Input(
        headers: headers,
        body: body
      ))
  }
  /// Verify Generic OTP
  ///
  /// Verify a Generic OTP
  ///
  /// - Remark: HTTP `POST /public/v1/submit/verify_otp`.
  /// - Remark: Generated from `#/paths//public/v1/submit/verify_otp/post(VerifyOtp)`.
  public func VerifyOtp(
    headers: Operations.VerifyOtp.Input.Headers = .init(),
    body: Operations.VerifyOtp.Input.Body
  ) async throws -> Operations.VerifyOtp.Output {
    try await VerifyOtp(
      Operations.VerifyOtp.Input(
        headers: headers,
        body: body
      ))
  }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
  public enum Server1 {
    public static func url() throws -> Foundation.URL {
      try Foundation.URL(
        validatingOpenAPIServerURL: "https://api.turnkey.com/",
        variables: []
      )
    }
  }
  @available(*, deprecated, renamed: "Servers.Server1.url")
  public static func server1() throws -> Foundation.URL {
    try Foundation.URL(
      validatingOpenAPIServerURL: "https://api.turnkey.com/",
      variables: []
    )
  }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
  /// Types generated from the `#/components/schemas` section of the OpenAPI document.
  public enum Schemas {
    /// - Remark: Generated from `#/components/schemas/AcceptInvitationIntent`.
    public struct AcceptInvitationIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given Invitation object.
      ///
      /// - Remark: Generated from `#/components/schemas/AcceptInvitationIntent/invitationId`.
      public var invitationId: Swift.String
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/AcceptInvitationIntent/userId`.
      public var userId: Swift.String
      /// - Remark: Generated from `#/components/schemas/AcceptInvitationIntent/authenticator`.
      public var authenticator: Components.Schemas.AuthenticatorParams
      /// Creates a new `AcceptInvitationIntent`.
      ///
      /// - Parameters:
      ///   - invitationId: Unique identifier for a given Invitation object.
      ///   - userId: Unique identifier for a given User.
      ///   - authenticator:
      public init(
        invitationId: Swift.String,
        userId: Swift.String,
        authenticator: Components.Schemas.AuthenticatorParams
      ) {
        self.invitationId = invitationId
        self.userId = userId
        self.authenticator = authenticator
      }
      public enum CodingKeys: String, CodingKey {
        case invitationId
        case userId
        case authenticator
      }
    }
    /// - Remark: Generated from `#/components/schemas/AcceptInvitationIntentV2`.
    public struct AcceptInvitationIntentV2: Codable, Hashable, Sendable {
      /// Unique identifier for a given Invitation object.
      ///
      /// - Remark: Generated from `#/components/schemas/AcceptInvitationIntentV2/invitationId`.
      public var invitationId: Swift.String
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/AcceptInvitationIntentV2/userId`.
      public var userId: Swift.String
      /// - Remark: Generated from `#/components/schemas/AcceptInvitationIntentV2/authenticator`.
      public var authenticator: Components.Schemas.AuthenticatorParamsV2
      /// Creates a new `AcceptInvitationIntentV2`.
      ///
      /// - Parameters:
      ///   - invitationId: Unique identifier for a given Invitation object.
      ///   - userId: Unique identifier for a given User.
      ///   - authenticator:
      public init(
        invitationId: Swift.String,
        userId: Swift.String,
        authenticator: Components.Schemas.AuthenticatorParamsV2
      ) {
        self.invitationId = invitationId
        self.userId = userId
        self.authenticator = authenticator
      }
      public enum CodingKeys: String, CodingKey {
        case invitationId
        case userId
        case authenticator
      }
    }
    /// - Remark: Generated from `#/components/schemas/AcceptInvitationResult`.
    public struct AcceptInvitationResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Invitation.
      ///
      /// - Remark: Generated from `#/components/schemas/AcceptInvitationResult/invitationId`.
      public var invitationId: Swift.String
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/AcceptInvitationResult/userId`.
      public var userId: Swift.String
      /// Creates a new `AcceptInvitationResult`.
      ///
      /// - Parameters:
      ///   - invitationId: Unique identifier for a given Invitation.
      ///   - userId: Unique identifier for a given User.
      public init(
        invitationId: Swift.String,
        userId: Swift.String
      ) {
        self.invitationId = invitationId
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case invitationId
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/AccessType`.
    @frozen public enum AccessType: String, Codable, Hashable, Sendable, CaseIterable {
      case ACCESS_TYPE_WEB = "ACCESS_TYPE_WEB"
      case ACCESS_TYPE_API = "ACCESS_TYPE_API"
      case ACCESS_TYPE_ALL = "ACCESS_TYPE_ALL"
    }
    /// - Remark: Generated from `#/components/schemas/ActivateBillingTierIntent`.
    public struct ActivateBillingTierIntent: Codable, Hashable, Sendable {
      /// The product that the customer wants to subscribe to.
      ///
      /// - Remark: Generated from `#/components/schemas/ActivateBillingTierIntent/productId`.
      public var productId: Swift.String
      /// Creates a new `ActivateBillingTierIntent`.
      ///
      /// - Parameters:
      ///   - productId: The product that the customer wants to subscribe to.
      public init(productId: Swift.String) {
        self.productId = productId
      }
      public enum CodingKeys: String, CodingKey {
        case productId
      }
    }
    /// - Remark: Generated from `#/components/schemas/ActivateBillingTierResult`.
    public struct ActivateBillingTierResult: Codable, Hashable, Sendable {
      /// The id of the product being subscribed to.
      ///
      /// - Remark: Generated from `#/components/schemas/ActivateBillingTierResult/productId`.
      public var productId: Swift.String
      /// Creates a new `ActivateBillingTierResult`.
      ///
      /// - Parameters:
      ///   - productId: The id of the product being subscribed to.
      public init(productId: Swift.String) {
        self.productId = productId
      }
      public enum CodingKeys: String, CodingKey {
        case productId
      }
    }
    /// - Remark: Generated from `#/components/schemas/Activity`.
    public struct Activity: Codable, Hashable, Sendable {
      /// Unique identifier for a given Activity object.
      ///
      /// - Remark: Generated from `#/components/schemas/Activity/id`.
      public var id: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/Activity/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/Activity/status`.
      public var status: Components.Schemas.ActivityStatus
      /// - Remark: Generated from `#/components/schemas/Activity/type`.
      public var _type: Components.Schemas.ActivityType
      /// - Remark: Generated from `#/components/schemas/Activity/intent`.
      public var intent: Components.Schemas.Intent
      /// - Remark: Generated from `#/components/schemas/Activity/result`.
      public var result: Components.Schemas.Result
      /// A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
      ///
      /// - Remark: Generated from `#/components/schemas/Activity/votes`.
      public var votes: [Components.Schemas.Vote]
      /// An artifact verifying a User's action.
      ///
      /// - Remark: Generated from `#/components/schemas/Activity/fingerprint`.
      public var fingerprint: Swift.String
      /// - Remark: Generated from `#/components/schemas/Activity/canApprove`.
      public var canApprove: Swift.Bool
      /// - Remark: Generated from `#/components/schemas/Activity/canReject`.
      public var canReject: Swift.Bool
      /// - Remark: Generated from `#/components/schemas/Activity/createdAt`.
      public var createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// - Remark: Generated from `#/components/schemas/Activity/updatedAt`.
      public var updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// - Remark: Generated from `#/components/schemas/Activity/failure`.
      public var failure: Components.Schemas.Status?
      /// Creates a new `Activity`.
      ///
      /// - Parameters:
      ///   - id: Unique identifier for a given Activity object.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - status:
      ///   - _type:
      ///   - intent:
      ///   - result:
      ///   - votes: A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
      ///   - fingerprint: An artifact verifying a User's action.
      ///   - canApprove:
      ///   - canReject:
      ///   - createdAt:
      ///   - updatedAt:
      ///   - failure:
      public init(
        id: Swift.String,
        organizationId: Swift.String,
        status: Components.Schemas.ActivityStatus,
        _type: Components.Schemas.ActivityType,
        intent: Components.Schemas.Intent,
        result: Components.Schemas.Result,
        votes: [Components.Schemas.Vote],
        fingerprint: Swift.String,
        canApprove: Swift.Bool,
        canReject: Swift.Bool,
        createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        failure: Components.Schemas.Status? = nil
      ) {
        self.id = id
        self.organizationId = organizationId
        self.status = status
        self._type = _type
        self.intent = intent
        self.result = result
        self.votes = votes
        self.fingerprint = fingerprint
        self.canApprove = canApprove
        self.canReject = canReject
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.failure = failure
      }
      public enum CodingKeys: String, CodingKey {
        case id
        case organizationId
        case status
        case _type = "type"
        case intent
        case result
        case votes
        case fingerprint
        case canApprove
        case canReject
        case createdAt
        case updatedAt
        case failure
      }
    }
    /// - Remark: Generated from `#/components/schemas/ActivityResponse`.
    public struct ActivityResponse: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/ActivityResponse/activity`.
      public var activity: Components.Schemas.Activity
      /// Creates a new `ActivityResponse`.
      ///
      /// - Parameters:
      ///   - activity:
      public init(activity: Components.Schemas.Activity) {
        self.activity = activity
      }
      public enum CodingKeys: String, CodingKey {
        case activity
      }
    }
    /// - Remark: Generated from `#/components/schemas/ActivityStatus`.
    @frozen public enum ActivityStatus: String, Codable, Hashable, Sendable, CaseIterable {
      case ACTIVITY_STATUS_CREATED = "ACTIVITY_STATUS_CREATED"
      case ACTIVITY_STATUS_PENDING = "ACTIVITY_STATUS_PENDING"
      case ACTIVITY_STATUS_COMPLETED = "ACTIVITY_STATUS_COMPLETED"
      case ACTIVITY_STATUS_FAILED = "ACTIVITY_STATUS_FAILED"
      case ACTIVITY_STATUS_CONSENSUS_NEEDED = "ACTIVITY_STATUS_CONSENSUS_NEEDED"
      case ACTIVITY_STATUS_REJECTED = "ACTIVITY_STATUS_REJECTED"
    }
    /// - Remark: Generated from `#/components/schemas/ActivityType`.
    @frozen public enum ActivityType: String, Codable, Hashable, Sendable, CaseIterable {
      case ACTIVITY_TYPE_CREATE_API_KEYS = "ACTIVITY_TYPE_CREATE_API_KEYS"
      case ACTIVITY_TYPE_CREATE_USERS = "ACTIVITY_TYPE_CREATE_USERS"
      case ACTIVITY_TYPE_CREATE_PRIVATE_KEYS = "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS"
      case ACTIVITY_TYPE_SIGN_RAW_PAYLOAD = "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD"
      case ACTIVITY_TYPE_CREATE_INVITATIONS = "ACTIVITY_TYPE_CREATE_INVITATIONS"
      case ACTIVITY_TYPE_ACCEPT_INVITATION = "ACTIVITY_TYPE_ACCEPT_INVITATION"
      case ACTIVITY_TYPE_CREATE_POLICY = "ACTIVITY_TYPE_CREATE_POLICY"
      case ACTIVITY_TYPE_DISABLE_PRIVATE_KEY = "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY"
      case ACTIVITY_TYPE_DELETE_USERS = "ACTIVITY_TYPE_DELETE_USERS"
      case ACTIVITY_TYPE_DELETE_API_KEYS = "ACTIVITY_TYPE_DELETE_API_KEYS"
      case ACTIVITY_TYPE_DELETE_INVITATION = "ACTIVITY_TYPE_DELETE_INVITATION"
      case ACTIVITY_TYPE_DELETE_ORGANIZATION = "ACTIVITY_TYPE_DELETE_ORGANIZATION"
      case ACTIVITY_TYPE_DELETE_POLICY = "ACTIVITY_TYPE_DELETE_POLICY"
      case ACTIVITY_TYPE_CREATE_USER_TAG = "ACTIVITY_TYPE_CREATE_USER_TAG"
      case ACTIVITY_TYPE_DELETE_USER_TAGS = "ACTIVITY_TYPE_DELETE_USER_TAGS"
      case ACTIVITY_TYPE_CREATE_ORGANIZATION = "ACTIVITY_TYPE_CREATE_ORGANIZATION"
      case ACTIVITY_TYPE_SIGN_TRANSACTION = "ACTIVITY_TYPE_SIGN_TRANSACTION"
      case ACTIVITY_TYPE_APPROVE_ACTIVITY = "ACTIVITY_TYPE_APPROVE_ACTIVITY"
      case ACTIVITY_TYPE_REJECT_ACTIVITY = "ACTIVITY_TYPE_REJECT_ACTIVITY"
      case ACTIVITY_TYPE_DELETE_AUTHENTICATORS = "ACTIVITY_TYPE_DELETE_AUTHENTICATORS"
      case ACTIVITY_TYPE_CREATE_AUTHENTICATORS = "ACTIVITY_TYPE_CREATE_AUTHENTICATORS"
      case ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG = "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG"
      case ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS = "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS"
      case ACTIVITY_TYPE_SET_PAYMENT_METHOD = "ACTIVITY_TYPE_SET_PAYMENT_METHOD"
      case ACTIVITY_TYPE_ACTIVATE_BILLING_TIER = "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER"
      case ACTIVITY_TYPE_DELETE_PAYMENT_METHOD = "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD"
      case ACTIVITY_TYPE_CREATE_POLICY_V2 = "ACTIVITY_TYPE_CREATE_POLICY_V2"
      case ACTIVITY_TYPE_CREATE_POLICY_V3 = "ACTIVITY_TYPE_CREATE_POLICY_V3"
      case ACTIVITY_TYPE_CREATE_API_ONLY_USERS = "ACTIVITY_TYPE_CREATE_API_ONLY_USERS"
      case ACTIVITY_TYPE_UPDATE_ROOT_QUORUM = "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM"
      case ACTIVITY_TYPE_UPDATE_USER_TAG = "ACTIVITY_TYPE_UPDATE_USER_TAG"
      case ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG = "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG"
      case ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2 = "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2"
      case ACTIVITY_TYPE_CREATE_ORGANIZATION_V2 = "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2"
      case ACTIVITY_TYPE_CREATE_USERS_V2 = "ACTIVITY_TYPE_CREATE_USERS_V2"
      case ACTIVITY_TYPE_ACCEPT_INVITATION_V2 = "ACTIVITY_TYPE_ACCEPT_INVITATION_V2"
      case ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION = "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION"
      case ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2 = "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2"
      case ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS = "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS"
      case ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2 = "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2"
      case ACTIVITY_TYPE_UPDATE_USER = "ACTIVITY_TYPE_UPDATE_USER"
      case ACTIVITY_TYPE_UPDATE_POLICY = "ACTIVITY_TYPE_UPDATE_POLICY"
      case ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2 = "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2"
      case ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3 = "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3"
      case ACTIVITY_TYPE_CREATE_WALLET = "ACTIVITY_TYPE_CREATE_WALLET"
      case ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS = "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS"
      case ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY = "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY"
      case ACTIVITY_TYPE_RECOVER_USER = "ACTIVITY_TYPE_RECOVER_USER"
      case ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE = "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE"
      case ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE = "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE"
      case ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2 = "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2"
      case ACTIVITY_TYPE_SIGN_TRANSACTION_V2 = "ACTIVITY_TYPE_SIGN_TRANSACTION_V2"
      case ACTIVITY_TYPE_EXPORT_PRIVATE_KEY = "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY"
      case ACTIVITY_TYPE_EXPORT_WALLET = "ACTIVITY_TYPE_EXPORT_WALLET"
      case ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4 = "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4"
      case ACTIVITY_TYPE_EMAIL_AUTH = "ACTIVITY_TYPE_EMAIL_AUTH"
      case ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT = "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT"
      case ACTIVITY_TYPE_INIT_IMPORT_WALLET = "ACTIVITY_TYPE_INIT_IMPORT_WALLET"
      case ACTIVITY_TYPE_IMPORT_WALLET = "ACTIVITY_TYPE_IMPORT_WALLET"
      case ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY = "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY"
      case ACTIVITY_TYPE_IMPORT_PRIVATE_KEY = "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY"
      case ACTIVITY_TYPE_CREATE_POLICIES = "ACTIVITY_TYPE_CREATE_POLICIES"
      case ACTIVITY_TYPE_SIGN_RAW_PAYLOADS = "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS"
      case ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION = "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION"
      case ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS = "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS"
      case ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS = "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS"
      case ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5 = "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5"
      case ACTIVITY_TYPE_OAUTH = "ACTIVITY_TYPE_OAUTH"
      case ACTIVITY_TYPE_CREATE_API_KEYS_V2 = "ACTIVITY_TYPE_CREATE_API_KEYS_V2"
      case ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION = "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION"
      case ACTIVITY_TYPE_EMAIL_AUTH_V2 = "ACTIVITY_TYPE_EMAIL_AUTH_V2"
      case ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6 = "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6"
      case ACTIVITY_TYPE_DELETE_PRIVATE_KEYS = "ACTIVITY_TYPE_DELETE_PRIVATE_KEYS"
      case ACTIVITY_TYPE_DELETE_WALLETS = "ACTIVITY_TYPE_DELETE_WALLETS"
      case ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2 = "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2"
      case ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION = "ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION"
      case ACTIVITY_TYPE_INIT_OTP_AUTH = "ACTIVITY_TYPE_INIT_OTP_AUTH"
      case ACTIVITY_TYPE_OTP_AUTH = "ACTIVITY_TYPE_OTP_AUTH"
      case ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7 = "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7"
      case ACTIVITY_TYPE_UPDATE_WALLET = "ACTIVITY_TYPE_UPDATE_WALLET"
      case ACTIVITY_TYPE_UPDATE_POLICY_V2 = "ACTIVITY_TYPE_UPDATE_POLICY_V2"
      case ACTIVITY_TYPE_CREATE_USERS_V3 = "ACTIVITY_TYPE_CREATE_USERS_V3"
      case ACTIVITY_TYPE_INIT_OTP_AUTH_V2 = "ACTIVITY_TYPE_INIT_OTP_AUTH_V2"
      case ACTIVITY_TYPE_INIT_OTP = "ACTIVITY_TYPE_INIT_OTP"
      case ACTIVITY_TYPE_VERIFY_OTP = "ACTIVITY_TYPE_VERIFY_OTP"
      case ACTIVITY_TYPE_OTP_LOGIN = "ACTIVITY_TYPE_OTP_LOGIN"
      case ACTIVITY_TYPE_STAMP_LOGIN = "ACTIVITY_TYPE_STAMP_LOGIN"
      case ACTIVITY_TYPE_OAUTH_LOGIN = "ACTIVITY_TYPE_OAUTH_LOGIN"
      case ACTIVITY_TYPE_UPDATE_USER_NAME = "ACTIVITY_TYPE_UPDATE_USER_NAME"
      case ACTIVITY_TYPE_UPDATE_USER_EMAIL = "ACTIVITY_TYPE_UPDATE_USER_EMAIL"
      case ACTIVITY_TYPE_UPDATE_USER_PHONE_NUMBER = "ACTIVITY_TYPE_UPDATE_USER_PHONE_NUMBER"
    }
    /// - Remark: Generated from `#/components/schemas/AddressFormat`.
    @frozen public enum AddressFormat: String, Codable, Hashable, Sendable, CaseIterable {
      case ADDRESS_FORMAT_UNCOMPRESSED = "ADDRESS_FORMAT_UNCOMPRESSED"
      case ADDRESS_FORMAT_COMPRESSED = "ADDRESS_FORMAT_COMPRESSED"
      case ADDRESS_FORMAT_ETHEREUM = "ADDRESS_FORMAT_ETHEREUM"
      case ADDRESS_FORMAT_SOLANA = "ADDRESS_FORMAT_SOLANA"
      case ADDRESS_FORMAT_COSMOS = "ADDRESS_FORMAT_COSMOS"
      case ADDRESS_FORMAT_TRON = "ADDRESS_FORMAT_TRON"
      case ADDRESS_FORMAT_SUI = "ADDRESS_FORMAT_SUI"
      case ADDRESS_FORMAT_APTOS = "ADDRESS_FORMAT_APTOS"
      case ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH = "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH"
      case ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH = "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH"
      case ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH = "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH"
      case ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH = "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH"
      case ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR = "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR"
      case ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH = "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH"
      case ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH = "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH"
      case ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH = "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH"
      case ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH = "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH"
      case ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR = "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR"
      case ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH = "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH"
      case ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH = "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH"
      case ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH = "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH"
      case ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH = "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH"
      case ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR = "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR"
      case ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH = "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH"
      case ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH = "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH"
      case ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH = "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH"
      case ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH = "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH"
      case ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR = "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR"
      case ADDRESS_FORMAT_SEI = "ADDRESS_FORMAT_SEI"
      case ADDRESS_FORMAT_XLM = "ADDRESS_FORMAT_XLM"
      case ADDRESS_FORMAT_DOGE_MAINNET = "ADDRESS_FORMAT_DOGE_MAINNET"
      case ADDRESS_FORMAT_DOGE_TESTNET = "ADDRESS_FORMAT_DOGE_TESTNET"
      case ADDRESS_FORMAT_TON_V3R2 = "ADDRESS_FORMAT_TON_V3R2"
      case ADDRESS_FORMAT_TON_V4R2 = "ADDRESS_FORMAT_TON_V4R2"
      case ADDRESS_FORMAT_TON_V5R1 = "ADDRESS_FORMAT_TON_V5R1"
      case ADDRESS_FORMAT_XRP = "ADDRESS_FORMAT_XRP"
    }
    /// - Remark: Generated from `#/components/schemas/Any`.
    public struct _Any: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/Any/@type`.
      public var _commat_type: Swift.String?
      /// A container of undocumented properties.
      public var additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer]
      /// Creates a new `_Any`.
      ///
      /// - Parameters:
      ///   - _commat_type:
      ///   - additionalProperties: A container of undocumented properties.
      public init(
        _commat_type: Swift.String? = nil,
        additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer] = .init()
      ) {
        self._commat_type = _commat_type
        self.additionalProperties = additionalProperties
      }
      public enum CodingKeys: String, CodingKey {
        case _commat_type = "@type"
      }
      public init(from decoder: any Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self._commat_type = try container.decodeIfPresent(
          Swift.String.self,
          forKey: ._commat_type
        )
        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
          "@type"
        ])
      }
      public func encode(to encoder: any Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(
          self._commat_type,
          forKey: ._commat_type
        )
        try encoder.encodeAdditionalProperties(additionalProperties)
      }
    }
    /// - Remark: Generated from `#/components/schemas/ApiKey`.
    public struct ApiKey: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/ApiKey/credential`.
      public var credential: Components.Schemas.external_period_data_period_v1_period_Credential
      /// Unique identifier for a given API Key.
      ///
      /// - Remark: Generated from `#/components/schemas/ApiKey/apiKeyId`.
      public var apiKeyId: Swift.String
      /// Human-readable name for an API Key.
      ///
      /// - Remark: Generated from `#/components/schemas/ApiKey/apiKeyName`.
      public var apiKeyName: Swift.String
      /// - Remark: Generated from `#/components/schemas/ApiKey/createdAt`.
      public var createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// - Remark: Generated from `#/components/schemas/ApiKey/updatedAt`.
      public var updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// Optional window (in seconds) indicating how long the API Key should last.
      ///
      /// - Remark: Generated from `#/components/schemas/ApiKey/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// Creates a new `ApiKey`.
      ///
      /// - Parameters:
      ///   - credential:
      ///   - apiKeyId: Unique identifier for a given API Key.
      ///   - apiKeyName: Human-readable name for an API Key.
      ///   - createdAt:
      ///   - updatedAt:
      ///   - expirationSeconds: Optional window (in seconds) indicating how long the API Key should last.
      public init(
        credential: Components.Schemas.external_period_data_period_v1_period_Credential,
        apiKeyId: Swift.String,
        apiKeyName: Swift.String,
        createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        expirationSeconds: Swift.String? = nil
      ) {
        self.credential = credential
        self.apiKeyId = apiKeyId
        self.apiKeyName = apiKeyName
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.expirationSeconds = expirationSeconds
      }
      public enum CodingKeys: String, CodingKey {
        case credential
        case apiKeyId
        case apiKeyName
        case createdAt
        case updatedAt
        case expirationSeconds
      }
    }
    /// - Remark: Generated from `#/components/schemas/ApiKeyCurve`.
    @frozen public enum ApiKeyCurve: String, Codable, Hashable, Sendable, CaseIterable {
      case API_KEY_CURVE_P256 = "API_KEY_CURVE_P256"
      case API_KEY_CURVE_SECP256K1 = "API_KEY_CURVE_SECP256K1"
      case API_KEY_CURVE_ED25519 = "API_KEY_CURVE_ED25519"
    }
    /// - Remark: Generated from `#/components/schemas/ApiKeyParams`.
    public struct ApiKeyParams: Codable, Hashable, Sendable {
      /// Human-readable name for an API Key.
      ///
      /// - Remark: Generated from `#/components/schemas/ApiKeyParams/apiKeyName`.
      public var apiKeyName: Swift.String
      /// The public component of a cryptographic key pair used to sign messages and transactions.
      ///
      /// - Remark: Generated from `#/components/schemas/ApiKeyParams/publicKey`.
      public var publicKey: Swift.String
      /// Optional window (in seconds) indicating how long the API Key should last.
      ///
      /// - Remark: Generated from `#/components/schemas/ApiKeyParams/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// Creates a new `ApiKeyParams`.
      ///
      /// - Parameters:
      ///   - apiKeyName: Human-readable name for an API Key.
      ///   - publicKey: The public component of a cryptographic key pair used to sign messages and transactions.
      ///   - expirationSeconds: Optional window (in seconds) indicating how long the API Key should last.
      public init(
        apiKeyName: Swift.String,
        publicKey: Swift.String,
        expirationSeconds: Swift.String? = nil
      ) {
        self.apiKeyName = apiKeyName
        self.publicKey = publicKey
        self.expirationSeconds = expirationSeconds
      }
      public enum CodingKeys: String, CodingKey {
        case apiKeyName
        case publicKey
        case expirationSeconds
      }
    }
    /// - Remark: Generated from `#/components/schemas/ApiKeyParamsV2`.
    public struct ApiKeyParamsV2: Codable, Hashable, Sendable {
      /// Human-readable name for an API Key.
      ///
      /// - Remark: Generated from `#/components/schemas/ApiKeyParamsV2/apiKeyName`.
      public var apiKeyName: Swift.String
      /// The public component of a cryptographic key pair used to sign messages and transactions.
      ///
      /// - Remark: Generated from `#/components/schemas/ApiKeyParamsV2/publicKey`.
      public var publicKey: Swift.String
      /// - Remark: Generated from `#/components/schemas/ApiKeyParamsV2/curveType`.
      public var curveType: Components.Schemas.ApiKeyCurve
      /// Optional window (in seconds) indicating how long the API Key should last.
      ///
      /// - Remark: Generated from `#/components/schemas/ApiKeyParamsV2/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// Creates a new `ApiKeyParamsV2`.
      ///
      /// - Parameters:
      ///   - apiKeyName: Human-readable name for an API Key.
      ///   - publicKey: The public component of a cryptographic key pair used to sign messages and transactions.
      ///   - curveType:
      ///   - expirationSeconds: Optional window (in seconds) indicating how long the API Key should last.
      public init(
        apiKeyName: Swift.String,
        publicKey: Swift.String,
        curveType: Components.Schemas.ApiKeyCurve,
        expirationSeconds: Swift.String? = nil
      ) {
        self.apiKeyName = apiKeyName
        self.publicKey = publicKey
        self.curveType = curveType
        self.expirationSeconds = expirationSeconds
      }
      public enum CodingKeys: String, CodingKey {
        case apiKeyName
        case publicKey
        case curveType
        case expirationSeconds
      }
    }
    /// - Remark: Generated from `#/components/schemas/ApiOnlyUserParams`.
    public struct ApiOnlyUserParams: Codable, Hashable, Sendable {
      /// The name of the new API-only User.
      ///
      /// - Remark: Generated from `#/components/schemas/ApiOnlyUserParams/userName`.
      public var userName: Swift.String
      /// The email address for this API-only User (optional).
      ///
      /// - Remark: Generated from `#/components/schemas/ApiOnlyUserParams/userEmail`.
      public var userEmail: Swift.String?
      /// A list of tags assigned to the new API-only User. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/ApiOnlyUserParams/userTags`.
      public var userTags: [Swift.String]
      /// A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/ApiOnlyUserParams/apiKeys`.
      public var apiKeys: [Components.Schemas.ApiKeyParams]
      /// Creates a new `ApiOnlyUserParams`.
      ///
      /// - Parameters:
      ///   - userName: The name of the new API-only User.
      ///   - userEmail: The email address for this API-only User (optional).
      ///   - userTags: A list of tags assigned to the new API-only User. This field, if not needed, should be an empty array in your request body.
      ///   - apiKeys: A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      public init(
        userName: Swift.String,
        userEmail: Swift.String? = nil,
        userTags: [Swift.String],
        apiKeys: [Components.Schemas.ApiKeyParams]
      ) {
        self.userName = userName
        self.userEmail = userEmail
        self.userTags = userTags
        self.apiKeys = apiKeys
      }
      public enum CodingKeys: String, CodingKey {
        case userName
        case userEmail
        case userTags
        case apiKeys
      }
    }
    /// - Remark: Generated from `#/components/schemas/ApproveActivityIntent`.
    public struct ApproveActivityIntent: Codable, Hashable, Sendable {
      /// An artifact verifying a User's action.
      ///
      /// - Remark: Generated from `#/components/schemas/ApproveActivityIntent/fingerprint`.
      public var fingerprint: Swift.String
      /// Creates a new `ApproveActivityIntent`.
      ///
      /// - Parameters:
      ///   - fingerprint: An artifact verifying a User's action.
      public init(fingerprint: Swift.String) {
        self.fingerprint = fingerprint
      }
      public enum CodingKeys: String, CodingKey {
        case fingerprint
      }
    }
    /// - Remark: Generated from `#/components/schemas/ApproveActivityRequest`.
    public struct ApproveActivityRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/ApproveActivityRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_APPROVE_ACTIVITY = "ACTIVITY_TYPE_APPROVE_ACTIVITY"
      }
      /// - Remark: Generated from `#/components/schemas/ApproveActivityRequest/type`.
      public var _type: Components.Schemas.ApproveActivityRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/ApproveActivityRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/ApproveActivityRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/ApproveActivityRequest/parameters`.
      public var parameters: Components.Schemas.ApproveActivityIntent
      /// Creates a new `ApproveActivityRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.ApproveActivityRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.ApproveActivityIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/Attestation`.
    public struct Attestation: Codable, Hashable, Sendable {
      /// The cbor encoded then base64 url encoded id of the credential.
      ///
      /// - Remark: Generated from `#/components/schemas/Attestation/credentialId`.
      public var credentialId: Swift.String
      /// A base64 url encoded payload containing metadata about the signing context and the challenge.
      ///
      /// - Remark: Generated from `#/components/schemas/Attestation/clientDataJson`.
      public var clientDataJson: Swift.String
      /// A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
      ///
      /// - Remark: Generated from `#/components/schemas/Attestation/attestationObject`.
      public var attestationObject: Swift.String
      /// The type of authenticator transports.
      ///
      /// - Remark: Generated from `#/components/schemas/Attestation/transports`.
      public var transports: [Components.Schemas.AuthenticatorTransport]
      /// Creates a new `Attestation`.
      ///
      /// - Parameters:
      ///   - credentialId: The cbor encoded then base64 url encoded id of the credential.
      ///   - clientDataJson: A base64 url encoded payload containing metadata about the signing context and the challenge.
      ///   - attestationObject: A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
      ///   - transports: The type of authenticator transports.
      public init(
        credentialId: Swift.String,
        clientDataJson: Swift.String,
        attestationObject: Swift.String,
        transports: [Components.Schemas.AuthenticatorTransport]
      ) {
        self.credentialId = credentialId
        self.clientDataJson = clientDataJson
        self.attestationObject = attestationObject
        self.transports = transports
      }
      public enum CodingKeys: String, CodingKey {
        case credentialId
        case clientDataJson
        case attestationObject
        case transports
      }
    }
    /// - Remark: Generated from `#/components/schemas/Authenticator`.
    public struct Authenticator: Codable, Hashable, Sendable {
      /// Types of transports that may be used by an Authenticator (e.g., USB, NFC, BLE).
      ///
      /// - Remark: Generated from `#/components/schemas/Authenticator/transports`.
      public var transports: [Components.Schemas.AuthenticatorTransport]
      /// - Remark: Generated from `#/components/schemas/Authenticator/attestationType`.
      public var attestationType: Swift.String
      /// Identifier indicating the type of the Security Key.
      ///
      /// - Remark: Generated from `#/components/schemas/Authenticator/aaguid`.
      public var aaguid: Swift.String
      /// Unique identifier for a WebAuthn credential.
      ///
      /// - Remark: Generated from `#/components/schemas/Authenticator/credentialId`.
      public var credentialId: Swift.String
      /// The type of Authenticator device.
      ///
      /// - Remark: Generated from `#/components/schemas/Authenticator/model`.
      public var model: Swift.String
      /// - Remark: Generated from `#/components/schemas/Authenticator/credential`.
      public var credential: Components.Schemas.external_period_data_period_v1_period_Credential
      /// Unique identifier for a given Authenticator.
      ///
      /// - Remark: Generated from `#/components/schemas/Authenticator/authenticatorId`.
      public var authenticatorId: Swift.String
      /// Human-readable name for an Authenticator.
      ///
      /// - Remark: Generated from `#/components/schemas/Authenticator/authenticatorName`.
      public var authenticatorName: Swift.String
      /// - Remark: Generated from `#/components/schemas/Authenticator/createdAt`.
      public var createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// - Remark: Generated from `#/components/schemas/Authenticator/updatedAt`.
      public var updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// Creates a new `Authenticator`.
      ///
      /// - Parameters:
      ///   - transports: Types of transports that may be used by an Authenticator (e.g., USB, NFC, BLE).
      ///   - attestationType:
      ///   - aaguid: Identifier indicating the type of the Security Key.
      ///   - credentialId: Unique identifier for a WebAuthn credential.
      ///   - model: The type of Authenticator device.
      ///   - credential:
      ///   - authenticatorId: Unique identifier for a given Authenticator.
      ///   - authenticatorName: Human-readable name for an Authenticator.
      ///   - createdAt:
      ///   - updatedAt:
      public init(
        transports: [Components.Schemas.AuthenticatorTransport],
        attestationType: Swift.String,
        aaguid: Swift.String,
        credentialId: Swift.String,
        model: Swift.String,
        credential: Components.Schemas.external_period_data_period_v1_period_Credential,
        authenticatorId: Swift.String,
        authenticatorName: Swift.String,
        createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      ) {
        self.transports = transports
        self.attestationType = attestationType
        self.aaguid = aaguid
        self.credentialId = credentialId
        self.model = model
        self.credential = credential
        self.authenticatorId = authenticatorId
        self.authenticatorName = authenticatorName
        self.createdAt = createdAt
        self.updatedAt = updatedAt
      }
      public enum CodingKeys: String, CodingKey {
        case transports
        case attestationType
        case aaguid
        case credentialId
        case model
        case credential
        case authenticatorId
        case authenticatorName
        case createdAt
        case updatedAt
      }
    }
    /// - Remark: Generated from `#/components/schemas/AuthenticatorAttestationResponse`.
    public struct AuthenticatorAttestationResponse: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/AuthenticatorAttestationResponse/clientDataJson`.
      public var clientDataJson: Swift.String
      /// - Remark: Generated from `#/components/schemas/AuthenticatorAttestationResponse/attestationObject`.
      public var attestationObject: Swift.String
      /// - Remark: Generated from `#/components/schemas/AuthenticatorAttestationResponse/transports`.
      public var transports: [Components.Schemas.AuthenticatorTransport]?
      /// - Remark: Generated from `#/components/schemas/AuthenticatorAttestationResponse/authenticatorAttachment`.
      @frozen
      public enum authenticatorAttachmentPayload: String, Codable, Hashable, Sendable, CaseIterable
      {
        case cross_hyphen_platform = "cross-platform"
        case platform = "platform"
      }
      /// - Remark: Generated from `#/components/schemas/AuthenticatorAttestationResponse/authenticatorAttachment`.
      public var authenticatorAttachment:
        Components.Schemas.AuthenticatorAttestationResponse.authenticatorAttachmentPayload?
      /// Creates a new `AuthenticatorAttestationResponse`.
      ///
      /// - Parameters:
      ///   - clientDataJson:
      ///   - attestationObject:
      ///   - transports:
      ///   - authenticatorAttachment:
      public init(
        clientDataJson: Swift.String,
        attestationObject: Swift.String,
        transports: [Components.Schemas.AuthenticatorTransport]? = nil,
        authenticatorAttachment: Components.Schemas.AuthenticatorAttestationResponse
          .authenticatorAttachmentPayload? = nil
      ) {
        self.clientDataJson = clientDataJson
        self.attestationObject = attestationObject
        self.transports = transports
        self.authenticatorAttachment = authenticatorAttachment
      }
      public enum CodingKeys: String, CodingKey {
        case clientDataJson
        case attestationObject
        case transports
        case authenticatorAttachment
      }
    }
    /// - Remark: Generated from `#/components/schemas/AuthenticatorParams`.
    public struct AuthenticatorParams: Codable, Hashable, Sendable {
      /// Human-readable name for an Authenticator.
      ///
      /// - Remark: Generated from `#/components/schemas/AuthenticatorParams/authenticatorName`.
      public var authenticatorName: Swift.String
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/AuthenticatorParams/userId`.
      public var userId: Swift.String
      /// - Remark: Generated from `#/components/schemas/AuthenticatorParams/attestation`.
      public var attestation: Components.Schemas.PublicKeyCredentialWithAttestation
      /// Challenge presented for authentication purposes.
      ///
      /// - Remark: Generated from `#/components/schemas/AuthenticatorParams/challenge`.
      public var challenge: Swift.String
      /// Creates a new `AuthenticatorParams`.
      ///
      /// - Parameters:
      ///   - authenticatorName: Human-readable name for an Authenticator.
      ///   - userId: Unique identifier for a given User.
      ///   - attestation:
      ///   - challenge: Challenge presented for authentication purposes.
      public init(
        authenticatorName: Swift.String,
        userId: Swift.String,
        attestation: Components.Schemas.PublicKeyCredentialWithAttestation,
        challenge: Swift.String
      ) {
        self.authenticatorName = authenticatorName
        self.userId = userId
        self.attestation = attestation
        self.challenge = challenge
      }
      public enum CodingKeys: String, CodingKey {
        case authenticatorName
        case userId
        case attestation
        case challenge
      }
    }
    /// - Remark: Generated from `#/components/schemas/AuthenticatorParamsV2`.
    public struct AuthenticatorParamsV2: Codable, Hashable, Sendable {
      /// Human-readable name for an Authenticator.
      ///
      /// - Remark: Generated from `#/components/schemas/AuthenticatorParamsV2/authenticatorName`.
      public var authenticatorName: Swift.String
      /// Challenge presented for authentication purposes.
      ///
      /// - Remark: Generated from `#/components/schemas/AuthenticatorParamsV2/challenge`.
      public var challenge: Swift.String
      /// - Remark: Generated from `#/components/schemas/AuthenticatorParamsV2/attestation`.
      public var attestation: Components.Schemas.Attestation
      /// Creates a new `AuthenticatorParamsV2`.
      ///
      /// - Parameters:
      ///   - authenticatorName: Human-readable name for an Authenticator.
      ///   - challenge: Challenge presented for authentication purposes.
      ///   - attestation:
      public init(
        authenticatorName: Swift.String,
        challenge: Swift.String,
        attestation: Components.Schemas.Attestation
      ) {
        self.authenticatorName = authenticatorName
        self.challenge = challenge
        self.attestation = attestation
      }
      public enum CodingKeys: String, CodingKey {
        case authenticatorName
        case challenge
        case attestation
      }
    }
    /// - Remark: Generated from `#/components/schemas/AuthenticatorTransport`.
    @frozen public enum AuthenticatorTransport: String, Codable, Hashable, Sendable, CaseIterable {
      case AUTHENTICATOR_TRANSPORT_BLE = "AUTHENTICATOR_TRANSPORT_BLE"
      case AUTHENTICATOR_TRANSPORT_INTERNAL = "AUTHENTICATOR_TRANSPORT_INTERNAL"
      case AUTHENTICATOR_TRANSPORT_NFC = "AUTHENTICATOR_TRANSPORT_NFC"
      case AUTHENTICATOR_TRANSPORT_USB = "AUTHENTICATOR_TRANSPORT_USB"
      case AUTHENTICATOR_TRANSPORT_HYBRID = "AUTHENTICATOR_TRANSPORT_HYBRID"
    }
    /// - Remark: Generated from `#/components/schemas/Config`.
    public struct Config: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/Config/features`.
      public var features: [Components.Schemas.Feature]?
      /// - Remark: Generated from `#/components/schemas/Config/quorum`.
      public var quorum: Components.Schemas.external_period_data_period_v1_period_Quorum?
      /// Creates a new `Config`.
      ///
      /// - Parameters:
      ///   - features:
      ///   - quorum:
      public init(
        features: [Components.Schemas.Feature]? = nil,
        quorum: Components.Schemas.external_period_data_period_v1_period_Quorum? = nil
      ) {
        self.features = features
        self.quorum = quorum
      }
      public enum CodingKeys: String, CodingKey {
        case features
        case quorum
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateApiKeysIntent`.
    public struct CreateApiKeysIntent: Codable, Hashable, Sendable {
      /// A list of API Keys.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateApiKeysIntent/apiKeys`.
      public var apiKeys: [Components.Schemas.ApiKeyParams]
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateApiKeysIntent/userId`.
      public var userId: Swift.String
      /// Creates a new `CreateApiKeysIntent`.
      ///
      /// - Parameters:
      ///   - apiKeys: A list of API Keys.
      ///   - userId: Unique identifier for a given User.
      public init(
        apiKeys: [Components.Schemas.ApiKeyParams],
        userId: Swift.String
      ) {
        self.apiKeys = apiKeys
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case apiKeys
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateApiKeysIntentV2`.
    public struct CreateApiKeysIntentV2: Codable, Hashable, Sendable {
      /// A list of API Keys.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateApiKeysIntentV2/apiKeys`.
      public var apiKeys: [Components.Schemas.ApiKeyParamsV2]
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateApiKeysIntentV2/userId`.
      public var userId: Swift.String
      /// Creates a new `CreateApiKeysIntentV2`.
      ///
      /// - Parameters:
      ///   - apiKeys: A list of API Keys.
      ///   - userId: Unique identifier for a given User.
      public init(
        apiKeys: [Components.Schemas.ApiKeyParamsV2],
        userId: Swift.String
      ) {
        self.apiKeys = apiKeys
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case apiKeys
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateApiKeysRequest`.
    public struct CreateApiKeysRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateApiKeysRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_API_KEYS_V2 = "ACTIVITY_TYPE_CREATE_API_KEYS_V2"
      }
      /// - Remark: Generated from `#/components/schemas/CreateApiKeysRequest/type`.
      public var _type: Components.Schemas.CreateApiKeysRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateApiKeysRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateApiKeysRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateApiKeysRequest/parameters`.
      public var parameters: Components.Schemas.CreateApiKeysIntentV2
      /// Creates a new `CreateApiKeysRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreateApiKeysRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreateApiKeysIntentV2
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateApiKeysResult`.
    public struct CreateApiKeysResult: Codable, Hashable, Sendable {
      /// A list of API Key IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateApiKeysResult/apiKeyIds`.
      public var apiKeyIds: [Swift.String]
      /// Creates a new `CreateApiKeysResult`.
      ///
      /// - Parameters:
      ///   - apiKeyIds: A list of API Key IDs.
      public init(apiKeyIds: [Swift.String]) {
        self.apiKeyIds = apiKeyIds
      }
      public enum CodingKeys: String, CodingKey {
        case apiKeyIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateApiOnlyUsersIntent`.
    public struct CreateApiOnlyUsersIntent: Codable, Hashable, Sendable {
      /// A list of API-only Users to create.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateApiOnlyUsersIntent/apiOnlyUsers`.
      public var apiOnlyUsers: [Components.Schemas.ApiOnlyUserParams]
      /// Creates a new `CreateApiOnlyUsersIntent`.
      ///
      /// - Parameters:
      ///   - apiOnlyUsers: A list of API-only Users to create.
      public init(apiOnlyUsers: [Components.Schemas.ApiOnlyUserParams]) {
        self.apiOnlyUsers = apiOnlyUsers
      }
      public enum CodingKeys: String, CodingKey {
        case apiOnlyUsers
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateApiOnlyUsersResult`.
    public struct CreateApiOnlyUsersResult: Codable, Hashable, Sendable {
      /// A list of API-only User IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateApiOnlyUsersResult/userIds`.
      public var userIds: [Swift.String]
      /// Creates a new `CreateApiOnlyUsersResult`.
      ///
      /// - Parameters:
      ///   - userIds: A list of API-only User IDs.
      public init(userIds: [Swift.String]) {
        self.userIds = userIds
      }
      public enum CodingKeys: String, CodingKey {
        case userIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateAuthenticatorsIntent`.
    public struct CreateAuthenticatorsIntent: Codable, Hashable, Sendable {
      /// A list of Authenticators.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateAuthenticatorsIntent/authenticators`.
      public var authenticators: [Components.Schemas.AuthenticatorParams]
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateAuthenticatorsIntent/userId`.
      public var userId: Swift.String
      /// Creates a new `CreateAuthenticatorsIntent`.
      ///
      /// - Parameters:
      ///   - authenticators: A list of Authenticators.
      ///   - userId: Unique identifier for a given User.
      public init(
        authenticators: [Components.Schemas.AuthenticatorParams],
        userId: Swift.String
      ) {
        self.authenticators = authenticators
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case authenticators
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateAuthenticatorsIntentV2`.
    public struct CreateAuthenticatorsIntentV2: Codable, Hashable, Sendable {
      /// A list of Authenticators.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateAuthenticatorsIntentV2/authenticators`.
      public var authenticators: [Components.Schemas.AuthenticatorParamsV2]
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateAuthenticatorsIntentV2/userId`.
      public var userId: Swift.String
      /// Creates a new `CreateAuthenticatorsIntentV2`.
      ///
      /// - Parameters:
      ///   - authenticators: A list of Authenticators.
      ///   - userId: Unique identifier for a given User.
      public init(
        authenticators: [Components.Schemas.AuthenticatorParamsV2],
        userId: Swift.String
      ) {
        self.authenticators = authenticators
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case authenticators
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateAuthenticatorsRequest`.
    public struct CreateAuthenticatorsRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateAuthenticatorsRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2 = "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2"
      }
      /// - Remark: Generated from `#/components/schemas/CreateAuthenticatorsRequest/type`.
      public var _type: Components.Schemas.CreateAuthenticatorsRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateAuthenticatorsRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateAuthenticatorsRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateAuthenticatorsRequest/parameters`.
      public var parameters: Components.Schemas.CreateAuthenticatorsIntentV2
      /// Creates a new `CreateAuthenticatorsRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreateAuthenticatorsRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreateAuthenticatorsIntentV2
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateAuthenticatorsResult`.
    public struct CreateAuthenticatorsResult: Codable, Hashable, Sendable {
      /// A list of Authenticator IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateAuthenticatorsResult/authenticatorIds`.
      public var authenticatorIds: [Swift.String]
      /// Creates a new `CreateAuthenticatorsResult`.
      ///
      /// - Parameters:
      ///   - authenticatorIds: A list of Authenticator IDs.
      public init(authenticatorIds: [Swift.String]) {
        self.authenticatorIds = authenticatorIds
      }
      public enum CodingKeys: String, CodingKey {
        case authenticatorIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateInvitationsIntent`.
    public struct CreateInvitationsIntent: Codable, Hashable, Sendable {
      /// A list of Invitations.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateInvitationsIntent/invitations`.
      public var invitations: [Components.Schemas.InvitationParams]
      /// Creates a new `CreateInvitationsIntent`.
      ///
      /// - Parameters:
      ///   - invitations: A list of Invitations.
      public init(invitations: [Components.Schemas.InvitationParams]) {
        self.invitations = invitations
      }
      public enum CodingKeys: String, CodingKey {
        case invitations
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateInvitationsRequest`.
    public struct CreateInvitationsRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateInvitationsRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_INVITATIONS = "ACTIVITY_TYPE_CREATE_INVITATIONS"
      }
      /// - Remark: Generated from `#/components/schemas/CreateInvitationsRequest/type`.
      public var _type: Components.Schemas.CreateInvitationsRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateInvitationsRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateInvitationsRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateInvitationsRequest/parameters`.
      public var parameters: Components.Schemas.CreateInvitationsIntent
      /// Creates a new `CreateInvitationsRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreateInvitationsRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreateInvitationsIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateInvitationsResult`.
    public struct CreateInvitationsResult: Codable, Hashable, Sendable {
      /// A list of Invitation IDs
      ///
      /// - Remark: Generated from `#/components/schemas/CreateInvitationsResult/invitationIds`.
      public var invitationIds: [Swift.String]
      /// Creates a new `CreateInvitationsResult`.
      ///
      /// - Parameters:
      ///   - invitationIds: A list of Invitation IDs
      public init(invitationIds: [Swift.String]) {
        self.invitationIds = invitationIds
      }
      public enum CodingKeys: String, CodingKey {
        case invitationIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateOauthProvidersIntent`.
    public struct CreateOauthProvidersIntent: Codable, Hashable, Sendable {
      /// The ID of the User to add an Oauth provider to
      ///
      /// - Remark: Generated from `#/components/schemas/CreateOauthProvidersIntent/userId`.
      public var userId: Swift.String
      /// A list of Oauth providers.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateOauthProvidersIntent/oauthProviders`.
      public var oauthProviders: [Components.Schemas.OauthProviderParams]
      /// Creates a new `CreateOauthProvidersIntent`.
      ///
      /// - Parameters:
      ///   - userId: The ID of the User to add an Oauth provider to
      ///   - oauthProviders: A list of Oauth providers.
      public init(
        userId: Swift.String,
        oauthProviders: [Components.Schemas.OauthProviderParams]
      ) {
        self.userId = userId
        self.oauthProviders = oauthProviders
      }
      public enum CodingKeys: String, CodingKey {
        case userId
        case oauthProviders
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateOauthProvidersRequest`.
    public struct CreateOauthProvidersRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateOauthProvidersRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS = "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS"
      }
      /// - Remark: Generated from `#/components/schemas/CreateOauthProvidersRequest/type`.
      public var _type: Components.Schemas.CreateOauthProvidersRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateOauthProvidersRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateOauthProvidersRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateOauthProvidersRequest/parameters`.
      public var parameters: Components.Schemas.CreateOauthProvidersIntent
      /// Creates a new `CreateOauthProvidersRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreateOauthProvidersRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreateOauthProvidersIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateOauthProvidersResult`.
    public struct CreateOauthProvidersResult: Codable, Hashable, Sendable {
      /// A list of unique identifiers for Oauth Providers
      ///
      /// - Remark: Generated from `#/components/schemas/CreateOauthProvidersResult/providerIds`.
      public var providerIds: [Swift.String]
      /// Creates a new `CreateOauthProvidersResult`.
      ///
      /// - Parameters:
      ///   - providerIds: A list of unique identifiers for Oauth Providers
      public init(providerIds: [Swift.String]) {
        self.providerIds = providerIds
      }
      public enum CodingKeys: String, CodingKey {
        case providerIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateOrganizationIntent`.
    public struct CreateOrganizationIntent: Codable, Hashable, Sendable {
      /// Human-readable name for an Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateOrganizationIntent/organizationName`.
      public var organizationName: Swift.String
      /// The root user's email address.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateOrganizationIntent/rootEmail`.
      public var rootEmail: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateOrganizationIntent/rootAuthenticator`.
      public var rootAuthenticator: Components.Schemas.AuthenticatorParams
      /// Unique identifier for the root user object.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateOrganizationIntent/rootUserId`.
      public var rootUserId: Swift.String?
      /// Creates a new `CreateOrganizationIntent`.
      ///
      /// - Parameters:
      ///   - organizationName: Human-readable name for an Organization.
      ///   - rootEmail: The root user's email address.
      ///   - rootAuthenticator:
      ///   - rootUserId: Unique identifier for the root user object.
      public init(
        organizationName: Swift.String,
        rootEmail: Swift.String,
        rootAuthenticator: Components.Schemas.AuthenticatorParams,
        rootUserId: Swift.String? = nil
      ) {
        self.organizationName = organizationName
        self.rootEmail = rootEmail
        self.rootAuthenticator = rootAuthenticator
        self.rootUserId = rootUserId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationName
        case rootEmail
        case rootAuthenticator
        case rootUserId
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateOrganizationIntentV2`.
    public struct CreateOrganizationIntentV2: Codable, Hashable, Sendable {
      /// Human-readable name for an Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateOrganizationIntentV2/organizationName`.
      public var organizationName: Swift.String
      /// The root user's email address.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateOrganizationIntentV2/rootEmail`.
      public var rootEmail: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateOrganizationIntentV2/rootAuthenticator`.
      public var rootAuthenticator: Components.Schemas.AuthenticatorParamsV2
      /// Unique identifier for the root user object.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateOrganizationIntentV2/rootUserId`.
      public var rootUserId: Swift.String?
      /// Creates a new `CreateOrganizationIntentV2`.
      ///
      /// - Parameters:
      ///   - organizationName: Human-readable name for an Organization.
      ///   - rootEmail: The root user's email address.
      ///   - rootAuthenticator:
      ///   - rootUserId: Unique identifier for the root user object.
      public init(
        organizationName: Swift.String,
        rootEmail: Swift.String,
        rootAuthenticator: Components.Schemas.AuthenticatorParamsV2,
        rootUserId: Swift.String? = nil
      ) {
        self.organizationName = organizationName
        self.rootEmail = rootEmail
        self.rootAuthenticator = rootAuthenticator
        self.rootUserId = rootUserId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationName
        case rootEmail
        case rootAuthenticator
        case rootUserId
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateOrganizationResult`.
    public struct CreateOrganizationResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateOrganizationResult/organizationId`.
      public var organizationId: Swift.String
      /// Creates a new `CreateOrganizationResult`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      public init(organizationId: Swift.String) {
        self.organizationId = organizationId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePoliciesIntent`.
    public struct CreatePoliciesIntent: Codable, Hashable, Sendable {
      /// An array of policy intents to be created.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePoliciesIntent/policies`.
      public var policies: [Components.Schemas.CreatePolicyIntentV3]
      /// Creates a new `CreatePoliciesIntent`.
      ///
      /// - Parameters:
      ///   - policies: An array of policy intents to be created.
      public init(policies: [Components.Schemas.CreatePolicyIntentV3]) {
        self.policies = policies
      }
      public enum CodingKeys: String, CodingKey {
        case policies
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePoliciesRequest`.
    public struct CreatePoliciesRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreatePoliciesRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_POLICIES = "ACTIVITY_TYPE_CREATE_POLICIES"
      }
      /// - Remark: Generated from `#/components/schemas/CreatePoliciesRequest/type`.
      public var _type: Components.Schemas.CreatePoliciesRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePoliciesRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePoliciesRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreatePoliciesRequest/parameters`.
      public var parameters: Components.Schemas.CreatePoliciesIntent
      /// Creates a new `CreatePoliciesRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreatePoliciesRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreatePoliciesIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePoliciesResult`.
    public struct CreatePoliciesResult: Codable, Hashable, Sendable {
      /// A list of unique identifiers for the created policies.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePoliciesResult/policyIds`.
      public var policyIds: [Swift.String]
      /// Creates a new `CreatePoliciesResult`.
      ///
      /// - Parameters:
      ///   - policyIds: A list of unique identifiers for the created policies.
      public init(policyIds: [Swift.String]) {
        self.policyIds = policyIds
      }
      public enum CodingKeys: String, CodingKey {
        case policyIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePolicyIntent`.
    public struct CreatePolicyIntent: Codable, Hashable, Sendable {
      /// Human-readable name for a Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePolicyIntent/policyName`.
      public var policyName: Swift.String
      /// A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePolicyIntent/selectors`.
      public var selectors: [Components.Schemas.Selector]
      /// - Remark: Generated from `#/components/schemas/CreatePolicyIntent/effect`.
      public var effect: Components.Schemas.Effect
      /// - Remark: Generated from `#/components/schemas/CreatePolicyIntent/notes`.
      public var notes: Swift.String?
      /// Creates a new `CreatePolicyIntent`.
      ///
      /// - Parameters:
      ///   - policyName: Human-readable name for a Policy.
      ///   - selectors: A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details.
      ///   - effect:
      ///   - notes:
      public init(
        policyName: Swift.String,
        selectors: [Components.Schemas.Selector],
        effect: Components.Schemas.Effect,
        notes: Swift.String? = nil
      ) {
        self.policyName = policyName
        self.selectors = selectors
        self.effect = effect
        self.notes = notes
      }
      public enum CodingKeys: String, CodingKey {
        case policyName
        case selectors
        case effect
        case notes
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePolicyIntentV2`.
    public struct CreatePolicyIntentV2: Codable, Hashable, Sendable {
      /// Human-readable name for a Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePolicyIntentV2/policyName`.
      public var policyName: Swift.String
      /// A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePolicyIntentV2/selectors`.
      public var selectors: [Components.Schemas.SelectorV2]
      /// - Remark: Generated from `#/components/schemas/CreatePolicyIntentV2/effect`.
      public var effect: Components.Schemas.Effect
      /// - Remark: Generated from `#/components/schemas/CreatePolicyIntentV2/notes`.
      public var notes: Swift.String?
      /// Creates a new `CreatePolicyIntentV2`.
      ///
      /// - Parameters:
      ///   - policyName: Human-readable name for a Policy.
      ///   - selectors: A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details.
      ///   - effect:
      ///   - notes:
      public init(
        policyName: Swift.String,
        selectors: [Components.Schemas.SelectorV2],
        effect: Components.Schemas.Effect,
        notes: Swift.String? = nil
      ) {
        self.policyName = policyName
        self.selectors = selectors
        self.effect = effect
        self.notes = notes
      }
      public enum CodingKeys: String, CodingKey {
        case policyName
        case selectors
        case effect
        case notes
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePolicyIntentV3`.
    public struct CreatePolicyIntentV3: Codable, Hashable, Sendable {
      /// Human-readable name for a Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePolicyIntentV3/policyName`.
      public var policyName: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreatePolicyIntentV3/effect`.
      public var effect: Components.Schemas.Effect
      /// The condition expression that triggers the Effect
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePolicyIntentV3/condition`.
      public var condition: Swift.String?
      /// The consensus expression that triggers the Effect
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePolicyIntentV3/consensus`.
      public var consensus: Swift.String?
      /// - Remark: Generated from `#/components/schemas/CreatePolicyIntentV3/notes`.
      public var notes: Swift.String?
      /// Creates a new `CreatePolicyIntentV3`.
      ///
      /// - Parameters:
      ///   - policyName: Human-readable name for a Policy.
      ///   - effect:
      ///   - condition: The condition expression that triggers the Effect
      ///   - consensus: The consensus expression that triggers the Effect
      ///   - notes:
      public init(
        policyName: Swift.String,
        effect: Components.Schemas.Effect,
        condition: Swift.String? = nil,
        consensus: Swift.String? = nil,
        notes: Swift.String? = nil
      ) {
        self.policyName = policyName
        self.effect = effect
        self.condition = condition
        self.consensus = consensus
        self.notes = notes
      }
      public enum CodingKeys: String, CodingKey {
        case policyName
        case effect
        case condition
        case consensus
        case notes
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePolicyRequest`.
    public struct CreatePolicyRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreatePolicyRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_POLICY_V3 = "ACTIVITY_TYPE_CREATE_POLICY_V3"
      }
      /// - Remark: Generated from `#/components/schemas/CreatePolicyRequest/type`.
      public var _type: Components.Schemas.CreatePolicyRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePolicyRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePolicyRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreatePolicyRequest/parameters`.
      public var parameters: Components.Schemas.CreatePolicyIntentV3
      /// Creates a new `CreatePolicyRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreatePolicyRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreatePolicyIntentV3
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePolicyResult`.
    public struct CreatePolicyResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePolicyResult/policyId`.
      public var policyId: Swift.String
      /// Creates a new `CreatePolicyResult`.
      ///
      /// - Parameters:
      ///   - policyId: Unique identifier for a given Policy.
      public init(policyId: Swift.String) {
        self.policyId = policyId
      }
      public enum CodingKeys: String, CodingKey {
        case policyId
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePrivateKeyTagIntent`.
    public struct CreatePrivateKeyTagIntent: Codable, Hashable, Sendable {
      /// Human-readable name for a Private Key Tag.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeyTagIntent/privateKeyTagName`.
      public var privateKeyTagName: Swift.String
      /// A list of Private Key IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeyTagIntent/privateKeyIds`.
      public var privateKeyIds: [Swift.String]
      /// Creates a new `CreatePrivateKeyTagIntent`.
      ///
      /// - Parameters:
      ///   - privateKeyTagName: Human-readable name for a Private Key Tag.
      ///   - privateKeyIds: A list of Private Key IDs.
      public init(
        privateKeyTagName: Swift.String,
        privateKeyIds: [Swift.String]
      ) {
        self.privateKeyTagName = privateKeyTagName
        self.privateKeyIds = privateKeyIds
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyTagName
        case privateKeyIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePrivateKeyTagRequest`.
    public struct CreatePrivateKeyTagRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeyTagRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG = "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG"
      }
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeyTagRequest/type`.
      public var _type: Components.Schemas.CreatePrivateKeyTagRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeyTagRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeyTagRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeyTagRequest/parameters`.
      public var parameters: Components.Schemas.CreatePrivateKeyTagIntent
      /// Creates a new `CreatePrivateKeyTagRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreatePrivateKeyTagRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreatePrivateKeyTagIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePrivateKeyTagResult`.
    public struct CreatePrivateKeyTagResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Private Key Tag.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeyTagResult/privateKeyTagId`.
      public var privateKeyTagId: Swift.String
      /// A list of Private Key IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeyTagResult/privateKeyIds`.
      public var privateKeyIds: [Swift.String]
      /// Creates a new `CreatePrivateKeyTagResult`.
      ///
      /// - Parameters:
      ///   - privateKeyTagId: Unique identifier for a given Private Key Tag.
      ///   - privateKeyIds: A list of Private Key IDs.
      public init(
        privateKeyTagId: Swift.String,
        privateKeyIds: [Swift.String]
      ) {
        self.privateKeyTagId = privateKeyTagId
        self.privateKeyIds = privateKeyIds
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyTagId
        case privateKeyIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePrivateKeysIntent`.
    public struct CreatePrivateKeysIntent: Codable, Hashable, Sendable {
      /// A list of Private Keys.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeysIntent/privateKeys`.
      public var privateKeys: [Components.Schemas.PrivateKeyParams]
      /// Creates a new `CreatePrivateKeysIntent`.
      ///
      /// - Parameters:
      ///   - privateKeys: A list of Private Keys.
      public init(privateKeys: [Components.Schemas.PrivateKeyParams]) {
        self.privateKeys = privateKeys
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeys
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePrivateKeysIntentV2`.
    public struct CreatePrivateKeysIntentV2: Codable, Hashable, Sendable {
      /// A list of Private Keys.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeysIntentV2/privateKeys`.
      public var privateKeys: [Components.Schemas.PrivateKeyParams]
      /// Creates a new `CreatePrivateKeysIntentV2`.
      ///
      /// - Parameters:
      ///   - privateKeys: A list of Private Keys.
      public init(privateKeys: [Components.Schemas.PrivateKeyParams]) {
        self.privateKeys = privateKeys
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeys
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePrivateKeysRequest`.
    public struct CreatePrivateKeysRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeysRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2 = "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2"
      }
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeysRequest/type`.
      public var _type: Components.Schemas.CreatePrivateKeysRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeysRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeysRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeysRequest/parameters`.
      public var parameters: Components.Schemas.CreatePrivateKeysIntentV2
      /// Creates a new `CreatePrivateKeysRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreatePrivateKeysRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreatePrivateKeysIntentV2
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePrivateKeysResult`.
    public struct CreatePrivateKeysResult: Codable, Hashable, Sendable {
      /// A list of Private Key IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeysResult/privateKeyIds`.
      public var privateKeyIds: [Swift.String]
      /// Creates a new `CreatePrivateKeysResult`.
      ///
      /// - Parameters:
      ///   - privateKeyIds: A list of Private Key IDs.
      public init(privateKeyIds: [Swift.String]) {
        self.privateKeyIds = privateKeyIds
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreatePrivateKeysResultV2`.
    public struct CreatePrivateKeysResultV2: Codable, Hashable, Sendable {
      /// A list of Private Key IDs and addresses.
      ///
      /// - Remark: Generated from `#/components/schemas/CreatePrivateKeysResultV2/privateKeys`.
      public var privateKeys: [Components.Schemas.PrivateKeyResult]
      /// Creates a new `CreatePrivateKeysResultV2`.
      ///
      /// - Parameters:
      ///   - privateKeys: A list of Private Key IDs and addresses.
      public init(privateKeys: [Components.Schemas.PrivateKeyResult]) {
        self.privateKeys = privateKeys
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeys
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateReadOnlySessionIntent`.
    public typealias CreateReadOnlySessionIntent = OpenAPIRuntime.OpenAPIObjectContainer
    /// - Remark: Generated from `#/components/schemas/CreateReadOnlySessionRequest`.
    public struct CreateReadOnlySessionRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateReadOnlySessionRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION = "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION"
      }
      /// - Remark: Generated from `#/components/schemas/CreateReadOnlySessionRequest/type`.
      public var _type: Components.Schemas.CreateReadOnlySessionRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadOnlySessionRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadOnlySessionRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateReadOnlySessionRequest/parameters`.
      public var parameters: Components.Schemas.CreateReadOnlySessionIntent
      /// Creates a new `CreateReadOnlySessionRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreateReadOnlySessionRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreateReadOnlySessionIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateReadOnlySessionResult`.
    public struct CreateReadOnlySessionResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadOnlySessionResult/organizationId`.
      public var organizationId: Swift.String
      /// Human-readable name for an Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadOnlySessionResult/organizationName`.
      public var organizationName: Swift.String
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadOnlySessionResult/userId`.
      public var userId: Swift.String
      /// Human-readable name for a User.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadOnlySessionResult/username`.
      public var username: Swift.String
      /// String representing a read only session
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadOnlySessionResult/session`.
      public var session: Swift.String
      /// UTC timestamp in seconds representing the expiry time for the read only session.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadOnlySessionResult/sessionExpiry`.
      public var sessionExpiry: Swift.String
      /// Creates a new `CreateReadOnlySessionResult`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons.
      ///   - organizationName: Human-readable name for an Organization.
      ///   - userId: Unique identifier for a given User.
      ///   - username: Human-readable name for a User.
      ///   - session: String representing a read only session
      ///   - sessionExpiry: UTC timestamp in seconds representing the expiry time for the read only session.
      public init(
        organizationId: Swift.String,
        organizationName: Swift.String,
        userId: Swift.String,
        username: Swift.String,
        session: Swift.String,
        sessionExpiry: Swift.String
      ) {
        self.organizationId = organizationId
        self.organizationName = organizationName
        self.userId = userId
        self.username = username
        self.session = session
        self.sessionExpiry = sessionExpiry
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case organizationName
        case userId
        case username
        case session
        case sessionExpiry
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionIntent`.
    public struct CreateReadWriteSessionIntent: Codable, Hashable, Sendable {
      /// Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionIntent/targetPublicKey`.
      public var targetPublicKey: Swift.String
      /// Email of the user to create a read write session for
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionIntent/email`.
      public var email: Swift.String
      /// Optional human-readable name for an API Key. If none provided, default to Read Write Session - <Timestamp>
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionIntent/apiKeyName`.
      public var apiKeyName: Swift.String?
      /// Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionIntent/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// Creates a new `CreateReadWriteSessionIntent`.
      ///
      /// - Parameters:
      ///   - targetPublicKey: Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted.
      ///   - email: Email of the user to create a read write session for
      ///   - apiKeyName: Optional human-readable name for an API Key. If none provided, default to Read Write Session - <Timestamp>
      ///   - expirationSeconds: Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
      public init(
        targetPublicKey: Swift.String,
        email: Swift.String,
        apiKeyName: Swift.String? = nil,
        expirationSeconds: Swift.String? = nil
      ) {
        self.targetPublicKey = targetPublicKey
        self.email = email
        self.apiKeyName = apiKeyName
        self.expirationSeconds = expirationSeconds
      }
      public enum CodingKeys: String, CodingKey {
        case targetPublicKey
        case email
        case apiKeyName
        case expirationSeconds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionIntentV2`.
    public struct CreateReadWriteSessionIntentV2: Codable, Hashable, Sendable {
      /// Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionIntentV2/targetPublicKey`.
      public var targetPublicKey: Swift.String
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionIntentV2/userId`.
      public var userId: Swift.String?
      /// Optional human-readable name for an API Key. If none provided, default to Read Write Session - <Timestamp>
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionIntentV2/apiKeyName`.
      public var apiKeyName: Swift.String?
      /// Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionIntentV2/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// Invalidate all other previously generated ReadWriteSession API keys
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionIntentV2/invalidateExisting`.
      public var invalidateExisting: Swift.Bool?
      /// Creates a new `CreateReadWriteSessionIntentV2`.
      ///
      /// - Parameters:
      ///   - targetPublicKey: Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted.
      ///   - userId: Unique identifier for a given User.
      ///   - apiKeyName: Optional human-readable name for an API Key. If none provided, default to Read Write Session - <Timestamp>
      ///   - expirationSeconds: Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
      ///   - invalidateExisting: Invalidate all other previously generated ReadWriteSession API keys
      public init(
        targetPublicKey: Swift.String,
        userId: Swift.String? = nil,
        apiKeyName: Swift.String? = nil,
        expirationSeconds: Swift.String? = nil,
        invalidateExisting: Swift.Bool? = nil
      ) {
        self.targetPublicKey = targetPublicKey
        self.userId = userId
        self.apiKeyName = apiKeyName
        self.expirationSeconds = expirationSeconds
        self.invalidateExisting = invalidateExisting
      }
      public enum CodingKeys: String, CodingKey {
        case targetPublicKey
        case userId
        case apiKeyName
        case expirationSeconds
        case invalidateExisting
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionRequest`.
    public struct CreateReadWriteSessionRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2 =
          "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2"
      }
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionRequest/type`.
      public var _type: Components.Schemas.CreateReadWriteSessionRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionRequest/parameters`.
      public var parameters: Components.Schemas.CreateReadWriteSessionIntentV2
      /// Creates a new `CreateReadWriteSessionRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreateReadWriteSessionRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreateReadWriteSessionIntentV2
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionResult`.
    public struct CreateReadWriteSessionResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionResult/organizationId`.
      public var organizationId: Swift.String
      /// Human-readable name for an Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionResult/organizationName`.
      public var organizationName: Swift.String
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionResult/userId`.
      public var userId: Swift.String
      /// Human-readable name for a User.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionResult/username`.
      public var username: Swift.String
      /// Unique identifier for the created API key.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionResult/apiKeyId`.
      public var apiKeyId: Swift.String
      /// HPKE encrypted credential bundle
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionResult/credentialBundle`.
      public var credentialBundle: Swift.String
      /// Creates a new `CreateReadWriteSessionResult`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons.
      ///   - organizationName: Human-readable name for an Organization.
      ///   - userId: Unique identifier for a given User.
      ///   - username: Human-readable name for a User.
      ///   - apiKeyId: Unique identifier for the created API key.
      ///   - credentialBundle: HPKE encrypted credential bundle
      public init(
        organizationId: Swift.String,
        organizationName: Swift.String,
        userId: Swift.String,
        username: Swift.String,
        apiKeyId: Swift.String,
        credentialBundle: Swift.String
      ) {
        self.organizationId = organizationId
        self.organizationName = organizationName
        self.userId = userId
        self.username = username
        self.apiKeyId = apiKeyId
        self.credentialBundle = credentialBundle
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case organizationName
        case userId
        case username
        case apiKeyId
        case credentialBundle
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionResultV2`.
    public struct CreateReadWriteSessionResultV2: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionResultV2/organizationId`.
      public var organizationId: Swift.String
      /// Human-readable name for an Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionResultV2/organizationName`.
      public var organizationName: Swift.String
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionResultV2/userId`.
      public var userId: Swift.String
      /// Human-readable name for a User.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionResultV2/username`.
      public var username: Swift.String
      /// Unique identifier for the created API key.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionResultV2/apiKeyId`.
      public var apiKeyId: Swift.String
      /// HPKE encrypted credential bundle
      ///
      /// - Remark: Generated from `#/components/schemas/CreateReadWriteSessionResultV2/credentialBundle`.
      public var credentialBundle: Swift.String
      /// Creates a new `CreateReadWriteSessionResultV2`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons.
      ///   - organizationName: Human-readable name for an Organization.
      ///   - userId: Unique identifier for a given User.
      ///   - username: Human-readable name for a User.
      ///   - apiKeyId: Unique identifier for the created API key.
      ///   - credentialBundle: HPKE encrypted credential bundle
      public init(
        organizationId: Swift.String,
        organizationName: Swift.String,
        userId: Swift.String,
        username: Swift.String,
        apiKeyId: Swift.String,
        credentialBundle: Swift.String
      ) {
        self.organizationId = organizationId
        self.organizationName = organizationName
        self.userId = userId
        self.username = username
        self.apiKeyId = apiKeyId
        self.credentialBundle = credentialBundle
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case organizationName
        case userId
        case username
        case apiKeyId
        case credentialBundle
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntent`.
    public struct CreateSubOrganizationIntent: Codable, Hashable, Sendable {
      /// Name for this sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntent/name`.
      public var name: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntent/rootAuthenticator`.
      public var rootAuthenticator: Components.Schemas.AuthenticatorParamsV2
      /// Creates a new `CreateSubOrganizationIntent`.
      ///
      /// - Parameters:
      ///   - name: Name for this sub-organization
      ///   - rootAuthenticator:
      public init(
        name: Swift.String,
        rootAuthenticator: Components.Schemas.AuthenticatorParamsV2
      ) {
        self.name = name
        self.rootAuthenticator = rootAuthenticator
      }
      public enum CodingKeys: String, CodingKey {
        case name
        case rootAuthenticator
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV2`.
    public struct CreateSubOrganizationIntentV2: Codable, Hashable, Sendable {
      /// Name for this sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV2/subOrganizationName`.
      public var subOrganizationName: Swift.String
      /// Root users to create within this sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV2/rootUsers`.
      public var rootUsers: [Components.Schemas.RootUserParams]
      /// The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV2/rootQuorumThreshold`.
      public var rootQuorumThreshold: Swift.Int32
      /// Creates a new `CreateSubOrganizationIntentV2`.
      ///
      /// - Parameters:
      ///   - subOrganizationName: Name for this sub-organization
      ///   - rootUsers: Root users to create within this sub-organization
      ///   - rootQuorumThreshold: The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
      public init(
        subOrganizationName: Swift.String,
        rootUsers: [Components.Schemas.RootUserParams],
        rootQuorumThreshold: Swift.Int32
      ) {
        self.subOrganizationName = subOrganizationName
        self.rootUsers = rootUsers
        self.rootQuorumThreshold = rootQuorumThreshold
      }
      public enum CodingKeys: String, CodingKey {
        case subOrganizationName
        case rootUsers
        case rootQuorumThreshold
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV3`.
    public struct CreateSubOrganizationIntentV3: Codable, Hashable, Sendable {
      /// Name for this sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV3/subOrganizationName`.
      public var subOrganizationName: Swift.String
      /// Root users to create within this sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV3/rootUsers`.
      public var rootUsers: [Components.Schemas.RootUserParams]
      /// The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV3/rootQuorumThreshold`.
      public var rootQuorumThreshold: Swift.Int32
      /// A list of Private Keys.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV3/privateKeys`.
      public var privateKeys: [Components.Schemas.PrivateKeyParams]
      /// Creates a new `CreateSubOrganizationIntentV3`.
      ///
      /// - Parameters:
      ///   - subOrganizationName: Name for this sub-organization
      ///   - rootUsers: Root users to create within this sub-organization
      ///   - rootQuorumThreshold: The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
      ///   - privateKeys: A list of Private Keys.
      public init(
        subOrganizationName: Swift.String,
        rootUsers: [Components.Schemas.RootUserParams],
        rootQuorumThreshold: Swift.Int32,
        privateKeys: [Components.Schemas.PrivateKeyParams]
      ) {
        self.subOrganizationName = subOrganizationName
        self.rootUsers = rootUsers
        self.rootQuorumThreshold = rootQuorumThreshold
        self.privateKeys = privateKeys
      }
      public enum CodingKeys: String, CodingKey {
        case subOrganizationName
        case rootUsers
        case rootQuorumThreshold
        case privateKeys
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV4`.
    public struct CreateSubOrganizationIntentV4: Codable, Hashable, Sendable {
      /// Name for this sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV4/subOrganizationName`.
      public var subOrganizationName: Swift.String
      /// Root users to create within this sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV4/rootUsers`.
      public var rootUsers: [Components.Schemas.RootUserParams]
      /// The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV4/rootQuorumThreshold`.
      public var rootQuorumThreshold: Swift.Int32
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV4/wallet`.
      public var wallet: Components.Schemas.WalletParams?
      /// Disable email recovery for the sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV4/disableEmailRecovery`.
      public var disableEmailRecovery: Swift.Bool?
      /// Disable email auth for the sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV4/disableEmailAuth`.
      public var disableEmailAuth: Swift.Bool?
      /// Creates a new `CreateSubOrganizationIntentV4`.
      ///
      /// - Parameters:
      ///   - subOrganizationName: Name for this sub-organization
      ///   - rootUsers: Root users to create within this sub-organization
      ///   - rootQuorumThreshold: The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
      ///   - wallet:
      ///   - disableEmailRecovery: Disable email recovery for the sub-organization
      ///   - disableEmailAuth: Disable email auth for the sub-organization
      public init(
        subOrganizationName: Swift.String,
        rootUsers: [Components.Schemas.RootUserParams],
        rootQuorumThreshold: Swift.Int32,
        wallet: Components.Schemas.WalletParams? = nil,
        disableEmailRecovery: Swift.Bool? = nil,
        disableEmailAuth: Swift.Bool? = nil
      ) {
        self.subOrganizationName = subOrganizationName
        self.rootUsers = rootUsers
        self.rootQuorumThreshold = rootQuorumThreshold
        self.wallet = wallet
        self.disableEmailRecovery = disableEmailRecovery
        self.disableEmailAuth = disableEmailAuth
      }
      public enum CodingKeys: String, CodingKey {
        case subOrganizationName
        case rootUsers
        case rootQuorumThreshold
        case wallet
        case disableEmailRecovery
        case disableEmailAuth
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV5`.
    public struct CreateSubOrganizationIntentV5: Codable, Hashable, Sendable {
      /// Name for this sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV5/subOrganizationName`.
      public var subOrganizationName: Swift.String
      /// Root users to create within this sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV5/rootUsers`.
      public var rootUsers: [Components.Schemas.RootUserParamsV2]
      /// The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV5/rootQuorumThreshold`.
      public var rootQuorumThreshold: Swift.Int32
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV5/wallet`.
      public var wallet: Components.Schemas.WalletParams?
      /// Disable email recovery for the sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV5/disableEmailRecovery`.
      public var disableEmailRecovery: Swift.Bool?
      /// Disable email auth for the sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV5/disableEmailAuth`.
      public var disableEmailAuth: Swift.Bool?
      /// Creates a new `CreateSubOrganizationIntentV5`.
      ///
      /// - Parameters:
      ///   - subOrganizationName: Name for this sub-organization
      ///   - rootUsers: Root users to create within this sub-organization
      ///   - rootQuorumThreshold: The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
      ///   - wallet:
      ///   - disableEmailRecovery: Disable email recovery for the sub-organization
      ///   - disableEmailAuth: Disable email auth for the sub-organization
      public init(
        subOrganizationName: Swift.String,
        rootUsers: [Components.Schemas.RootUserParamsV2],
        rootQuorumThreshold: Swift.Int32,
        wallet: Components.Schemas.WalletParams? = nil,
        disableEmailRecovery: Swift.Bool? = nil,
        disableEmailAuth: Swift.Bool? = nil
      ) {
        self.subOrganizationName = subOrganizationName
        self.rootUsers = rootUsers
        self.rootQuorumThreshold = rootQuorumThreshold
        self.wallet = wallet
        self.disableEmailRecovery = disableEmailRecovery
        self.disableEmailAuth = disableEmailAuth
      }
      public enum CodingKeys: String, CodingKey {
        case subOrganizationName
        case rootUsers
        case rootQuorumThreshold
        case wallet
        case disableEmailRecovery
        case disableEmailAuth
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV6`.
    public struct CreateSubOrganizationIntentV6: Codable, Hashable, Sendable {
      /// Name for this sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV6/subOrganizationName`.
      public var subOrganizationName: Swift.String
      /// Root users to create within this sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV6/rootUsers`.
      public var rootUsers: [Components.Schemas.RootUserParamsV3]
      /// The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV6/rootQuorumThreshold`.
      public var rootQuorumThreshold: Swift.Int32
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV6/wallet`.
      public var wallet: Components.Schemas.WalletParams?
      /// Disable email recovery for the sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV6/disableEmailRecovery`.
      public var disableEmailRecovery: Swift.Bool?
      /// Disable email auth for the sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV6/disableEmailAuth`.
      public var disableEmailAuth: Swift.Bool?
      /// Creates a new `CreateSubOrganizationIntentV6`.
      ///
      /// - Parameters:
      ///   - subOrganizationName: Name for this sub-organization
      ///   - rootUsers: Root users to create within this sub-organization
      ///   - rootQuorumThreshold: The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
      ///   - wallet:
      ///   - disableEmailRecovery: Disable email recovery for the sub-organization
      ///   - disableEmailAuth: Disable email auth for the sub-organization
      public init(
        subOrganizationName: Swift.String,
        rootUsers: [Components.Schemas.RootUserParamsV3],
        rootQuorumThreshold: Swift.Int32,
        wallet: Components.Schemas.WalletParams? = nil,
        disableEmailRecovery: Swift.Bool? = nil,
        disableEmailAuth: Swift.Bool? = nil
      ) {
        self.subOrganizationName = subOrganizationName
        self.rootUsers = rootUsers
        self.rootQuorumThreshold = rootQuorumThreshold
        self.wallet = wallet
        self.disableEmailRecovery = disableEmailRecovery
        self.disableEmailAuth = disableEmailAuth
      }
      public enum CodingKeys: String, CodingKey {
        case subOrganizationName
        case rootUsers
        case rootQuorumThreshold
        case wallet
        case disableEmailRecovery
        case disableEmailAuth
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV7`.
    public struct CreateSubOrganizationIntentV7: Codable, Hashable, Sendable {
      /// Name for this sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV7/subOrganizationName`.
      public var subOrganizationName: Swift.String
      /// Root users to create within this sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV7/rootUsers`.
      public var rootUsers: [Components.Schemas.RootUserParamsV4]
      /// The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV7/rootQuorumThreshold`.
      public var rootQuorumThreshold: Swift.Int32
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV7/wallet`.
      public var wallet: Components.Schemas.WalletParams?
      /// Disable email recovery for the sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV7/disableEmailRecovery`.
      public var disableEmailRecovery: Swift.Bool?
      /// Disable email auth for the sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV7/disableEmailAuth`.
      public var disableEmailAuth: Swift.Bool?
      /// Disable OTP SMS auth for the sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV7/disableSmsAuth`.
      public var disableSmsAuth: Swift.Bool?
      /// Disable OTP email auth for the sub-organization
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationIntentV7/disableOtpEmailAuth`.
      public var disableOtpEmailAuth: Swift.Bool?
      /// Creates a new `CreateSubOrganizationIntentV7`.
      ///
      /// - Parameters:
      ///   - subOrganizationName: Name for this sub-organization
      ///   - rootUsers: Root users to create within this sub-organization
      ///   - rootQuorumThreshold: The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
      ///   - wallet:
      ///   - disableEmailRecovery: Disable email recovery for the sub-organization
      ///   - disableEmailAuth: Disable email auth for the sub-organization
      ///   - disableSmsAuth: Disable OTP SMS auth for the sub-organization
      ///   - disableOtpEmailAuth: Disable OTP email auth for the sub-organization
      public init(
        subOrganizationName: Swift.String,
        rootUsers: [Components.Schemas.RootUserParamsV4],
        rootQuorumThreshold: Swift.Int32,
        wallet: Components.Schemas.WalletParams? = nil,
        disableEmailRecovery: Swift.Bool? = nil,
        disableEmailAuth: Swift.Bool? = nil,
        disableSmsAuth: Swift.Bool? = nil,
        disableOtpEmailAuth: Swift.Bool? = nil
      ) {
        self.subOrganizationName = subOrganizationName
        self.rootUsers = rootUsers
        self.rootQuorumThreshold = rootQuorumThreshold
        self.wallet = wallet
        self.disableEmailRecovery = disableEmailRecovery
        self.disableEmailAuth = disableEmailAuth
        self.disableSmsAuth = disableSmsAuth
        self.disableOtpEmailAuth = disableOtpEmailAuth
      }
      public enum CodingKeys: String, CodingKey {
        case subOrganizationName
        case rootUsers
        case rootQuorumThreshold
        case wallet
        case disableEmailRecovery
        case disableEmailAuth
        case disableSmsAuth
        case disableOtpEmailAuth
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationRequest`.
    public struct CreateSubOrganizationRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7 = "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7"
      }
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationRequest/type`.
      public var _type: Components.Schemas.CreateSubOrganizationRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationRequest/parameters`.
      public var parameters: Components.Schemas.CreateSubOrganizationIntentV7
      /// Creates a new `CreateSubOrganizationRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreateSubOrganizationRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreateSubOrganizationIntentV7
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResult`.
    public struct CreateSubOrganizationResult: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResult/subOrganizationId`.
      public var subOrganizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResult/rootUserIds`.
      public var rootUserIds: [Swift.String]?
      /// Creates a new `CreateSubOrganizationResult`.
      ///
      /// - Parameters:
      ///   - subOrganizationId:
      ///   - rootUserIds:
      public init(
        subOrganizationId: Swift.String,
        rootUserIds: [Swift.String]? = nil
      ) {
        self.subOrganizationId = subOrganizationId
        self.rootUserIds = rootUserIds
      }
      public enum CodingKeys: String, CodingKey {
        case subOrganizationId
        case rootUserIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV3`.
    public struct CreateSubOrganizationResultV3: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV3/subOrganizationId`.
      public var subOrganizationId: Swift.String
      /// A list of Private Key IDs and addresses.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV3/privateKeys`.
      public var privateKeys: [Components.Schemas.PrivateKeyResult]
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV3/rootUserIds`.
      public var rootUserIds: [Swift.String]?
      /// Creates a new `CreateSubOrganizationResultV3`.
      ///
      /// - Parameters:
      ///   - subOrganizationId:
      ///   - privateKeys: A list of Private Key IDs and addresses.
      ///   - rootUserIds:
      public init(
        subOrganizationId: Swift.String,
        privateKeys: [Components.Schemas.PrivateKeyResult],
        rootUserIds: [Swift.String]? = nil
      ) {
        self.subOrganizationId = subOrganizationId
        self.privateKeys = privateKeys
        self.rootUserIds = rootUserIds
      }
      public enum CodingKeys: String, CodingKey {
        case subOrganizationId
        case privateKeys
        case rootUserIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV4`.
    public struct CreateSubOrganizationResultV4: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV4/subOrganizationId`.
      public var subOrganizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV4/wallet`.
      public var wallet: Components.Schemas.WalletResult?
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV4/rootUserIds`.
      public var rootUserIds: [Swift.String]?
      /// Creates a new `CreateSubOrganizationResultV4`.
      ///
      /// - Parameters:
      ///   - subOrganizationId:
      ///   - wallet:
      ///   - rootUserIds:
      public init(
        subOrganizationId: Swift.String,
        wallet: Components.Schemas.WalletResult? = nil,
        rootUserIds: [Swift.String]? = nil
      ) {
        self.subOrganizationId = subOrganizationId
        self.wallet = wallet
        self.rootUserIds = rootUserIds
      }
      public enum CodingKeys: String, CodingKey {
        case subOrganizationId
        case wallet
        case rootUserIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV5`.
    public struct CreateSubOrganizationResultV5: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV5/subOrganizationId`.
      public var subOrganizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV5/wallet`.
      public var wallet: Components.Schemas.WalletResult?
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV5/rootUserIds`.
      public var rootUserIds: [Swift.String]?
      /// Creates a new `CreateSubOrganizationResultV5`.
      ///
      /// - Parameters:
      ///   - subOrganizationId:
      ///   - wallet:
      ///   - rootUserIds:
      public init(
        subOrganizationId: Swift.String,
        wallet: Components.Schemas.WalletResult? = nil,
        rootUserIds: [Swift.String]? = nil
      ) {
        self.subOrganizationId = subOrganizationId
        self.wallet = wallet
        self.rootUserIds = rootUserIds
      }
      public enum CodingKeys: String, CodingKey {
        case subOrganizationId
        case wallet
        case rootUserIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV6`.
    public struct CreateSubOrganizationResultV6: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV6/subOrganizationId`.
      public var subOrganizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV6/wallet`.
      public var wallet: Components.Schemas.WalletResult?
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV6/rootUserIds`.
      public var rootUserIds: [Swift.String]?
      /// Creates a new `CreateSubOrganizationResultV6`.
      ///
      /// - Parameters:
      ///   - subOrganizationId:
      ///   - wallet:
      ///   - rootUserIds:
      public init(
        subOrganizationId: Swift.String,
        wallet: Components.Schemas.WalletResult? = nil,
        rootUserIds: [Swift.String]? = nil
      ) {
        self.subOrganizationId = subOrganizationId
        self.wallet = wallet
        self.rootUserIds = rootUserIds
      }
      public enum CodingKeys: String, CodingKey {
        case subOrganizationId
        case wallet
        case rootUserIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV7`.
    public struct CreateSubOrganizationResultV7: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV7/subOrganizationId`.
      public var subOrganizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV7/wallet`.
      public var wallet: Components.Schemas.WalletResult?
      /// - Remark: Generated from `#/components/schemas/CreateSubOrganizationResultV7/rootUserIds`.
      public var rootUserIds: [Swift.String]?
      /// Creates a new `CreateSubOrganizationResultV7`.
      ///
      /// - Parameters:
      ///   - subOrganizationId:
      ///   - wallet:
      ///   - rootUserIds:
      public init(
        subOrganizationId: Swift.String,
        wallet: Components.Schemas.WalletResult? = nil,
        rootUserIds: [Swift.String]? = nil
      ) {
        self.subOrganizationId = subOrganizationId
        self.wallet = wallet
        self.rootUserIds = rootUserIds
      }
      public enum CodingKeys: String, CodingKey {
        case subOrganizationId
        case wallet
        case rootUserIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateUserTagIntent`.
    public struct CreateUserTagIntent: Codable, Hashable, Sendable {
      /// Human-readable name for a User Tag.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateUserTagIntent/userTagName`.
      public var userTagName: Swift.String
      /// A list of User IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateUserTagIntent/userIds`.
      public var userIds: [Swift.String]
      /// Creates a new `CreateUserTagIntent`.
      ///
      /// - Parameters:
      ///   - userTagName: Human-readable name for a User Tag.
      ///   - userIds: A list of User IDs.
      public init(
        userTagName: Swift.String,
        userIds: [Swift.String]
      ) {
        self.userTagName = userTagName
        self.userIds = userIds
      }
      public enum CodingKeys: String, CodingKey {
        case userTagName
        case userIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateUserTagRequest`.
    public struct CreateUserTagRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateUserTagRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_USER_TAG = "ACTIVITY_TYPE_CREATE_USER_TAG"
      }
      /// - Remark: Generated from `#/components/schemas/CreateUserTagRequest/type`.
      public var _type: Components.Schemas.CreateUserTagRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateUserTagRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateUserTagRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateUserTagRequest/parameters`.
      public var parameters: Components.Schemas.CreateUserTagIntent
      /// Creates a new `CreateUserTagRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreateUserTagRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreateUserTagIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateUserTagResult`.
    public struct CreateUserTagResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given User Tag.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateUserTagResult/userTagId`.
      public var userTagId: Swift.String
      /// A list of User IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateUserTagResult/userIds`.
      public var userIds: [Swift.String]
      /// Creates a new `CreateUserTagResult`.
      ///
      /// - Parameters:
      ///   - userTagId: Unique identifier for a given User Tag.
      ///   - userIds: A list of User IDs.
      public init(
        userTagId: Swift.String,
        userIds: [Swift.String]
      ) {
        self.userTagId = userTagId
        self.userIds = userIds
      }
      public enum CodingKeys: String, CodingKey {
        case userTagId
        case userIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateUsersIntent`.
    public struct CreateUsersIntent: Codable, Hashable, Sendable {
      /// A list of Users.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateUsersIntent/users`.
      public var users: [Components.Schemas.UserParams]
      /// Creates a new `CreateUsersIntent`.
      ///
      /// - Parameters:
      ///   - users: A list of Users.
      public init(users: [Components.Schemas.UserParams]) {
        self.users = users
      }
      public enum CodingKeys: String, CodingKey {
        case users
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateUsersIntentV2`.
    public struct CreateUsersIntentV2: Codable, Hashable, Sendable {
      /// A list of Users.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateUsersIntentV2/users`.
      public var users: [Components.Schemas.UserParamsV2]
      /// Creates a new `CreateUsersIntentV2`.
      ///
      /// - Parameters:
      ///   - users: A list of Users.
      public init(users: [Components.Schemas.UserParamsV2]) {
        self.users = users
      }
      public enum CodingKeys: String, CodingKey {
        case users
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateUsersIntentV3`.
    public struct CreateUsersIntentV3: Codable, Hashable, Sendable {
      /// A list of Users.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateUsersIntentV3/users`.
      public var users: [Components.Schemas.UserParamsV3]
      /// Creates a new `CreateUsersIntentV3`.
      ///
      /// - Parameters:
      ///   - users: A list of Users.
      public init(users: [Components.Schemas.UserParamsV3]) {
        self.users = users
      }
      public enum CodingKeys: String, CodingKey {
        case users
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateUsersRequest`.
    public struct CreateUsersRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateUsersRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_USERS_V3 = "ACTIVITY_TYPE_CREATE_USERS_V3"
      }
      /// - Remark: Generated from `#/components/schemas/CreateUsersRequest/type`.
      public var _type: Components.Schemas.CreateUsersRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateUsersRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateUsersRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateUsersRequest/parameters`.
      public var parameters: Components.Schemas.CreateUsersIntentV3
      /// Creates a new `CreateUsersRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreateUsersRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreateUsersIntentV3
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateUsersResult`.
    public struct CreateUsersResult: Codable, Hashable, Sendable {
      /// A list of User IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateUsersResult/userIds`.
      public var userIds: [Swift.String]
      /// Creates a new `CreateUsersResult`.
      ///
      /// - Parameters:
      ///   - userIds: A list of User IDs.
      public init(userIds: [Swift.String]) {
        self.userIds = userIds
      }
      public enum CodingKeys: String, CodingKey {
        case userIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateWalletAccountsIntent`.
    public struct CreateWalletAccountsIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateWalletAccountsIntent/walletId`.
      public var walletId: Swift.String
      /// A list of wallet Accounts.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateWalletAccountsIntent/accounts`.
      public var accounts: [Components.Schemas.WalletAccountParams]
      /// Creates a new `CreateWalletAccountsIntent`.
      ///
      /// - Parameters:
      ///   - walletId: Unique identifier for a given Wallet.
      ///   - accounts: A list of wallet Accounts.
      public init(
        walletId: Swift.String,
        accounts: [Components.Schemas.WalletAccountParams]
      ) {
        self.walletId = walletId
        self.accounts = accounts
      }
      public enum CodingKeys: String, CodingKey {
        case walletId
        case accounts
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateWalletAccountsRequest`.
    public struct CreateWalletAccountsRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateWalletAccountsRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS = "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS"
      }
      /// - Remark: Generated from `#/components/schemas/CreateWalletAccountsRequest/type`.
      public var _type: Components.Schemas.CreateWalletAccountsRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateWalletAccountsRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateWalletAccountsRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateWalletAccountsRequest/parameters`.
      public var parameters: Components.Schemas.CreateWalletAccountsIntent
      /// Creates a new `CreateWalletAccountsRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreateWalletAccountsRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreateWalletAccountsIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateWalletAccountsResult`.
    public struct CreateWalletAccountsResult: Codable, Hashable, Sendable {
      /// A list of derived addresses.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateWalletAccountsResult/addresses`.
      public var addresses: [Swift.String]
      /// Creates a new `CreateWalletAccountsResult`.
      ///
      /// - Parameters:
      ///   - addresses: A list of derived addresses.
      public init(addresses: [Swift.String]) {
        self.addresses = addresses
      }
      public enum CodingKeys: String, CodingKey {
        case addresses
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateWalletIntent`.
    public struct CreateWalletIntent: Codable, Hashable, Sendable {
      /// Human-readable name for a Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateWalletIntent/walletName`.
      public var walletName: Swift.String
      /// A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateWalletIntent/accounts`.
      public var accounts: [Components.Schemas.WalletAccountParams]
      /// Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateWalletIntent/mnemonicLength`.
      public var mnemonicLength: Swift.Int32?
      /// Creates a new `CreateWalletIntent`.
      ///
      /// - Parameters:
      ///   - walletName: Human-readable name for a Wallet.
      ///   - accounts: A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.
      ///   - mnemonicLength: Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
      public init(
        walletName: Swift.String,
        accounts: [Components.Schemas.WalletAccountParams],
        mnemonicLength: Swift.Int32? = nil
      ) {
        self.walletName = walletName
        self.accounts = accounts
        self.mnemonicLength = mnemonicLength
      }
      public enum CodingKeys: String, CodingKey {
        case walletName
        case accounts
        case mnemonicLength
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateWalletRequest`.
    public struct CreateWalletRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CreateWalletRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_CREATE_WALLET = "ACTIVITY_TYPE_CREATE_WALLET"
      }
      /// - Remark: Generated from `#/components/schemas/CreateWalletRequest/type`.
      public var _type: Components.Schemas.CreateWalletRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateWalletRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateWalletRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/CreateWalletRequest/parameters`.
      public var parameters: Components.Schemas.CreateWalletIntent
      /// Creates a new `CreateWalletRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.CreateWalletRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.CreateWalletIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/CreateWalletResult`.
    public struct CreateWalletResult: Codable, Hashable, Sendable {
      /// Unique identifier for a Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateWalletResult/walletId`.
      public var walletId: Swift.String
      /// A list of account addresses.
      ///
      /// - Remark: Generated from `#/components/schemas/CreateWalletResult/addresses`.
      public var addresses: [Swift.String]
      /// Creates a new `CreateWalletResult`.
      ///
      /// - Parameters:
      ///   - walletId: Unique identifier for a Wallet.
      ///   - addresses: A list of account addresses.
      public init(
        walletId: Swift.String,
        addresses: [Swift.String]
      ) {
        self.walletId = walletId
        self.addresses = addresses
      }
      public enum CodingKeys: String, CodingKey {
        case walletId
        case addresses
      }
    }
    /// - Remark: Generated from `#/components/schemas/CredPropsAuthenticationExtensionsClientOutputs`.
    public struct CredPropsAuthenticationExtensionsClientOutputs: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/CredPropsAuthenticationExtensionsClientOutputs/rk`.
      public var rk: Swift.Bool
      /// Creates a new `CredPropsAuthenticationExtensionsClientOutputs`.
      ///
      /// - Parameters:
      ///   - rk:
      public init(rk: Swift.Bool) {
        self.rk = rk
      }
      public enum CodingKeys: String, CodingKey {
        case rk
      }
    }
    /// - Remark: Generated from `#/components/schemas/CredentialType`.
    @frozen public enum CredentialType: String, Codable, Hashable, Sendable, CaseIterable {
      case CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR = "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR"
      case CREDENTIAL_TYPE_API_KEY_P256 = "CREDENTIAL_TYPE_API_KEY_P256"
      case CREDENTIAL_TYPE_RECOVER_USER_KEY_P256 = "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256"
      case CREDENTIAL_TYPE_API_KEY_SECP256K1 = "CREDENTIAL_TYPE_API_KEY_SECP256K1"
      case CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256 = "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256"
      case CREDENTIAL_TYPE_API_KEY_ED25519 = "CREDENTIAL_TYPE_API_KEY_ED25519"
      case CREDENTIAL_TYPE_OTP_AUTH_KEY_P256 = "CREDENTIAL_TYPE_OTP_AUTH_KEY_P256"
      case CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256 =
        "CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256"
      case CREDENTIAL_TYPE_OAUTH_KEY_P256 = "CREDENTIAL_TYPE_OAUTH_KEY_P256"
      case CREDENTIAL_TYPE_LOGIN = "CREDENTIAL_TYPE_LOGIN"
    }
    /// - Remark: Generated from `#/components/schemas/Curve`.
    @frozen public enum Curve: String, Codable, Hashable, Sendable, CaseIterable {
      case CURVE_SECP256K1 = "CURVE_SECP256K1"
      case CURVE_ED25519 = "CURVE_ED25519"
    }
    /// - Remark: Generated from `#/components/schemas/DeleteApiKeysIntent`.
    public struct DeleteApiKeysIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteApiKeysIntent/userId`.
      public var userId: Swift.String
      /// A list of API Key IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteApiKeysIntent/apiKeyIds`.
      public var apiKeyIds: [Swift.String]
      /// Creates a new `DeleteApiKeysIntent`.
      ///
      /// - Parameters:
      ///   - userId: Unique identifier for a given User.
      ///   - apiKeyIds: A list of API Key IDs.
      public init(
        userId: Swift.String,
        apiKeyIds: [Swift.String]
      ) {
        self.userId = userId
        self.apiKeyIds = apiKeyIds
      }
      public enum CodingKeys: String, CodingKey {
        case userId
        case apiKeyIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteApiKeysRequest`.
    public struct DeleteApiKeysRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/DeleteApiKeysRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_DELETE_API_KEYS = "ACTIVITY_TYPE_DELETE_API_KEYS"
      }
      /// - Remark: Generated from `#/components/schemas/DeleteApiKeysRequest/type`.
      public var _type: Components.Schemas.DeleteApiKeysRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteApiKeysRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteApiKeysRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/DeleteApiKeysRequest/parameters`.
      public var parameters: Components.Schemas.DeleteApiKeysIntent
      /// Creates a new `DeleteApiKeysRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.DeleteApiKeysRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.DeleteApiKeysIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteApiKeysResult`.
    public struct DeleteApiKeysResult: Codable, Hashable, Sendable {
      /// A list of API Key IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteApiKeysResult/apiKeyIds`.
      public var apiKeyIds: [Swift.String]
      /// Creates a new `DeleteApiKeysResult`.
      ///
      /// - Parameters:
      ///   - apiKeyIds: A list of API Key IDs.
      public init(apiKeyIds: [Swift.String]) {
        self.apiKeyIds = apiKeyIds
      }
      public enum CodingKeys: String, CodingKey {
        case apiKeyIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteAuthenticatorsIntent`.
    public struct DeleteAuthenticatorsIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteAuthenticatorsIntent/userId`.
      public var userId: Swift.String
      /// A list of Authenticator IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteAuthenticatorsIntent/authenticatorIds`.
      public var authenticatorIds: [Swift.String]
      /// Creates a new `DeleteAuthenticatorsIntent`.
      ///
      /// - Parameters:
      ///   - userId: Unique identifier for a given User.
      ///   - authenticatorIds: A list of Authenticator IDs.
      public init(
        userId: Swift.String,
        authenticatorIds: [Swift.String]
      ) {
        self.userId = userId
        self.authenticatorIds = authenticatorIds
      }
      public enum CodingKeys: String, CodingKey {
        case userId
        case authenticatorIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteAuthenticatorsRequest`.
    public struct DeleteAuthenticatorsRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/DeleteAuthenticatorsRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_DELETE_AUTHENTICATORS = "ACTIVITY_TYPE_DELETE_AUTHENTICATORS"
      }
      /// - Remark: Generated from `#/components/schemas/DeleteAuthenticatorsRequest/type`.
      public var _type: Components.Schemas.DeleteAuthenticatorsRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteAuthenticatorsRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteAuthenticatorsRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/DeleteAuthenticatorsRequest/parameters`.
      public var parameters: Components.Schemas.DeleteAuthenticatorsIntent
      /// Creates a new `DeleteAuthenticatorsRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.DeleteAuthenticatorsRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.DeleteAuthenticatorsIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteAuthenticatorsResult`.
    public struct DeleteAuthenticatorsResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Authenticator.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteAuthenticatorsResult/authenticatorIds`.
      public var authenticatorIds: [Swift.String]
      /// Creates a new `DeleteAuthenticatorsResult`.
      ///
      /// - Parameters:
      ///   - authenticatorIds: Unique identifier for a given Authenticator.
      public init(authenticatorIds: [Swift.String]) {
        self.authenticatorIds = authenticatorIds
      }
      public enum CodingKeys: String, CodingKey {
        case authenticatorIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteInvitationIntent`.
    public struct DeleteInvitationIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given Invitation object.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteInvitationIntent/invitationId`.
      public var invitationId: Swift.String
      /// Creates a new `DeleteInvitationIntent`.
      ///
      /// - Parameters:
      ///   - invitationId: Unique identifier for a given Invitation object.
      public init(invitationId: Swift.String) {
        self.invitationId = invitationId
      }
      public enum CodingKeys: String, CodingKey {
        case invitationId
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteInvitationRequest`.
    public struct DeleteInvitationRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/DeleteInvitationRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_DELETE_INVITATION = "ACTIVITY_TYPE_DELETE_INVITATION"
      }
      /// - Remark: Generated from `#/components/schemas/DeleteInvitationRequest/type`.
      public var _type: Components.Schemas.DeleteInvitationRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteInvitationRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteInvitationRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/DeleteInvitationRequest/parameters`.
      public var parameters: Components.Schemas.DeleteInvitationIntent
      /// Creates a new `DeleteInvitationRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.DeleteInvitationRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.DeleteInvitationIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteInvitationResult`.
    public struct DeleteInvitationResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Invitation.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteInvitationResult/invitationId`.
      public var invitationId: Swift.String
      /// Creates a new `DeleteInvitationResult`.
      ///
      /// - Parameters:
      ///   - invitationId: Unique identifier for a given Invitation.
      public init(invitationId: Swift.String) {
        self.invitationId = invitationId
      }
      public enum CodingKeys: String, CodingKey {
        case invitationId
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteOauthProvidersIntent`.
    public struct DeleteOauthProvidersIntent: Codable, Hashable, Sendable {
      /// The ID of the User to remove an Oauth provider from
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteOauthProvidersIntent/userId`.
      public var userId: Swift.String
      /// Unique identifier for a given Provider.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteOauthProvidersIntent/providerIds`.
      public var providerIds: [Swift.String]
      /// Creates a new `DeleteOauthProvidersIntent`.
      ///
      /// - Parameters:
      ///   - userId: The ID of the User to remove an Oauth provider from
      ///   - providerIds: Unique identifier for a given Provider.
      public init(
        userId: Swift.String,
        providerIds: [Swift.String]
      ) {
        self.userId = userId
        self.providerIds = providerIds
      }
      public enum CodingKeys: String, CodingKey {
        case userId
        case providerIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteOauthProvidersRequest`.
    public struct DeleteOauthProvidersRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/DeleteOauthProvidersRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS = "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS"
      }
      /// - Remark: Generated from `#/components/schemas/DeleteOauthProvidersRequest/type`.
      public var _type: Components.Schemas.DeleteOauthProvidersRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteOauthProvidersRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteOauthProvidersRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/DeleteOauthProvidersRequest/parameters`.
      public var parameters: Components.Schemas.DeleteOauthProvidersIntent
      /// Creates a new `DeleteOauthProvidersRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.DeleteOauthProvidersRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.DeleteOauthProvidersIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteOauthProvidersResult`.
    public struct DeleteOauthProvidersResult: Codable, Hashable, Sendable {
      /// A list of unique identifiers for Oauth Providers
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteOauthProvidersResult/providerIds`.
      public var providerIds: [Swift.String]
      /// Creates a new `DeleteOauthProvidersResult`.
      ///
      /// - Parameters:
      ///   - providerIds: A list of unique identifiers for Oauth Providers
      public init(providerIds: [Swift.String]) {
        self.providerIds = providerIds
      }
      public enum CodingKeys: String, CodingKey {
        case providerIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteOrganizationIntent`.
    public struct DeleteOrganizationIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteOrganizationIntent/organizationId`.
      public var organizationId: Swift.String
      /// Creates a new `DeleteOrganizationIntent`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      public init(organizationId: Swift.String) {
        self.organizationId = organizationId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteOrganizationResult`.
    public struct DeleteOrganizationResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteOrganizationResult/organizationId`.
      public var organizationId: Swift.String
      /// Creates a new `DeleteOrganizationResult`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      public init(organizationId: Swift.String) {
        self.organizationId = organizationId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeletePaymentMethodIntent`.
    public struct DeletePaymentMethodIntent: Codable, Hashable, Sendable {
      /// The payment method that the customer wants to remove.
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePaymentMethodIntent/paymentMethodId`.
      public var paymentMethodId: Swift.String?
      /// Creates a new `DeletePaymentMethodIntent`.
      ///
      /// - Parameters:
      ///   - paymentMethodId: The payment method that the customer wants to remove.
      public init(paymentMethodId: Swift.String? = nil) {
        self.paymentMethodId = paymentMethodId
      }
      public enum CodingKeys: String, CodingKey {
        case paymentMethodId
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeletePaymentMethodResult`.
    public struct DeletePaymentMethodResult: Codable, Hashable, Sendable {
      /// The payment method that was removed.
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePaymentMethodResult/paymentMethodId`.
      public var paymentMethodId: Swift.String
      /// Creates a new `DeletePaymentMethodResult`.
      ///
      /// - Parameters:
      ///   - paymentMethodId: The payment method that was removed.
      public init(paymentMethodId: Swift.String) {
        self.paymentMethodId = paymentMethodId
      }
      public enum CodingKeys: String, CodingKey {
        case paymentMethodId
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeletePolicyIntent`.
    public struct DeletePolicyIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePolicyIntent/policyId`.
      public var policyId: Swift.String
      /// Creates a new `DeletePolicyIntent`.
      ///
      /// - Parameters:
      ///   - policyId: Unique identifier for a given Policy.
      public init(policyId: Swift.String) {
        self.policyId = policyId
      }
      public enum CodingKeys: String, CodingKey {
        case policyId
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeletePolicyRequest`.
    public struct DeletePolicyRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/DeletePolicyRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_DELETE_POLICY = "ACTIVITY_TYPE_DELETE_POLICY"
      }
      /// - Remark: Generated from `#/components/schemas/DeletePolicyRequest/type`.
      public var _type: Components.Schemas.DeletePolicyRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePolicyRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePolicyRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/DeletePolicyRequest/parameters`.
      public var parameters: Components.Schemas.DeletePolicyIntent
      /// Creates a new `DeletePolicyRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.DeletePolicyRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.DeletePolicyIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeletePolicyResult`.
    public struct DeletePolicyResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePolicyResult/policyId`.
      public var policyId: Swift.String
      /// Creates a new `DeletePolicyResult`.
      ///
      /// - Parameters:
      ///   - policyId: Unique identifier for a given Policy.
      public init(policyId: Swift.String) {
        self.policyId = policyId
      }
      public enum CodingKeys: String, CodingKey {
        case policyId
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeletePrivateKeyTagsIntent`.
    public struct DeletePrivateKeyTagsIntent: Codable, Hashable, Sendable {
      /// A list of Private Key Tag IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeyTagsIntent/privateKeyTagIds`.
      public var privateKeyTagIds: [Swift.String]
      /// Creates a new `DeletePrivateKeyTagsIntent`.
      ///
      /// - Parameters:
      ///   - privateKeyTagIds: A list of Private Key Tag IDs.
      public init(privateKeyTagIds: [Swift.String]) {
        self.privateKeyTagIds = privateKeyTagIds
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyTagIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeletePrivateKeyTagsRequest`.
    public struct DeletePrivateKeyTagsRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeyTagsRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS = "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS"
      }
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeyTagsRequest/type`.
      public var _type: Components.Schemas.DeletePrivateKeyTagsRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeyTagsRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeyTagsRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeyTagsRequest/parameters`.
      public var parameters: Components.Schemas.DeletePrivateKeyTagsIntent
      /// Creates a new `DeletePrivateKeyTagsRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.DeletePrivateKeyTagsRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.DeletePrivateKeyTagsIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeletePrivateKeyTagsResult`.
    public struct DeletePrivateKeyTagsResult: Codable, Hashable, Sendable {
      /// A list of Private Key Tag IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeyTagsResult/privateKeyTagIds`.
      public var privateKeyTagIds: [Swift.String]
      /// A list of Private Key IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeyTagsResult/privateKeyIds`.
      public var privateKeyIds: [Swift.String]
      /// Creates a new `DeletePrivateKeyTagsResult`.
      ///
      /// - Parameters:
      ///   - privateKeyTagIds: A list of Private Key Tag IDs.
      ///   - privateKeyIds: A list of Private Key IDs.
      public init(
        privateKeyTagIds: [Swift.String],
        privateKeyIds: [Swift.String]
      ) {
        self.privateKeyTagIds = privateKeyTagIds
        self.privateKeyIds = privateKeyIds
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyTagIds
        case privateKeyIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeletePrivateKeysIntent`.
    public struct DeletePrivateKeysIntent: Codable, Hashable, Sendable {
      /// List of unique identifiers for private keys within an organization
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeysIntent/privateKeyIds`.
      public var privateKeyIds: [Swift.String]
      /// Optional parameter for deleting the private keys, even if any have not been previously exported. If they have been exported, this field is ignored.
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeysIntent/deleteWithoutExport`.
      public var deleteWithoutExport: Swift.Bool?
      /// Creates a new `DeletePrivateKeysIntent`.
      ///
      /// - Parameters:
      ///   - privateKeyIds: List of unique identifiers for private keys within an organization
      ///   - deleteWithoutExport: Optional parameter for deleting the private keys, even if any have not been previously exported. If they have been exported, this field is ignored.
      public init(
        privateKeyIds: [Swift.String],
        deleteWithoutExport: Swift.Bool? = nil
      ) {
        self.privateKeyIds = privateKeyIds
        self.deleteWithoutExport = deleteWithoutExport
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyIds
        case deleteWithoutExport
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeletePrivateKeysRequest`.
    public struct DeletePrivateKeysRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeysRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_DELETE_PRIVATE_KEYS = "ACTIVITY_TYPE_DELETE_PRIVATE_KEYS"
      }
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeysRequest/type`.
      public var _type: Components.Schemas.DeletePrivateKeysRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeysRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeysRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeysRequest/parameters`.
      public var parameters: Components.Schemas.DeletePrivateKeysIntent
      /// Creates a new `DeletePrivateKeysRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.DeletePrivateKeysRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.DeletePrivateKeysIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeletePrivateKeysResult`.
    public struct DeletePrivateKeysResult: Codable, Hashable, Sendable {
      /// A list of private key unique identifiers that were removed
      ///
      /// - Remark: Generated from `#/components/schemas/DeletePrivateKeysResult/privateKeyIds`.
      public var privateKeyIds: [Swift.String]
      /// Creates a new `DeletePrivateKeysResult`.
      ///
      /// - Parameters:
      ///   - privateKeyIds: A list of private key unique identifiers that were removed
      public init(privateKeyIds: [Swift.String]) {
        self.privateKeyIds = privateKeyIds
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteSubOrganizationIntent`.
    public struct DeleteSubOrganizationIntent: Codable, Hashable, Sendable {
      /// Sub-organization deletion, by default, requires associated wallets and private keys to be exported for security reasons. Set this boolean to true to force sub-organization deletion even if some wallets or private keys within it have not been exported yet. Default: false.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteSubOrganizationIntent/deleteWithoutExport`.
      public var deleteWithoutExport: Swift.Bool?
      /// Creates a new `DeleteSubOrganizationIntent`.
      ///
      /// - Parameters:
      ///   - deleteWithoutExport: Sub-organization deletion, by default, requires associated wallets and private keys to be exported for security reasons. Set this boolean to true to force sub-organization deletion even if some wallets or private keys within it have not been exported yet. Default: false.
      public init(deleteWithoutExport: Swift.Bool? = nil) {
        self.deleteWithoutExport = deleteWithoutExport
      }
      public enum CodingKeys: String, CodingKey {
        case deleteWithoutExport
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteSubOrganizationRequest`.
    public struct DeleteSubOrganizationRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/DeleteSubOrganizationRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION = "ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION"
      }
      /// - Remark: Generated from `#/components/schemas/DeleteSubOrganizationRequest/type`.
      public var _type: Components.Schemas.DeleteSubOrganizationRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteSubOrganizationRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteSubOrganizationRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/DeleteSubOrganizationRequest/parameters`.
      public var parameters: Components.Schemas.DeleteSubOrganizationIntent
      /// Creates a new `DeleteSubOrganizationRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.DeleteSubOrganizationRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.DeleteSubOrganizationIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteSubOrganizationResult`.
    public struct DeleteSubOrganizationResult: Codable, Hashable, Sendable {
      /// Unique identifier of the sub organization that was removed
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteSubOrganizationResult/subOrganizationUuid`.
      public var subOrganizationUuid: Swift.String
      /// Creates a new `DeleteSubOrganizationResult`.
      ///
      /// - Parameters:
      ///   - subOrganizationUuid: Unique identifier of the sub organization that was removed
      public init(subOrganizationUuid: Swift.String) {
        self.subOrganizationUuid = subOrganizationUuid
      }
      public enum CodingKeys: String, CodingKey {
        case subOrganizationUuid
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteUserTagsIntent`.
    public struct DeleteUserTagsIntent: Codable, Hashable, Sendable {
      /// A list of User Tag IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteUserTagsIntent/userTagIds`.
      public var userTagIds: [Swift.String]
      /// Creates a new `DeleteUserTagsIntent`.
      ///
      /// - Parameters:
      ///   - userTagIds: A list of User Tag IDs.
      public init(userTagIds: [Swift.String]) {
        self.userTagIds = userTagIds
      }
      public enum CodingKeys: String, CodingKey {
        case userTagIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteUserTagsRequest`.
    public struct DeleteUserTagsRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/DeleteUserTagsRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_DELETE_USER_TAGS = "ACTIVITY_TYPE_DELETE_USER_TAGS"
      }
      /// - Remark: Generated from `#/components/schemas/DeleteUserTagsRequest/type`.
      public var _type: Components.Schemas.DeleteUserTagsRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteUserTagsRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteUserTagsRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/DeleteUserTagsRequest/parameters`.
      public var parameters: Components.Schemas.DeleteUserTagsIntent
      /// Creates a new `DeleteUserTagsRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.DeleteUserTagsRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.DeleteUserTagsIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteUserTagsResult`.
    public struct DeleteUserTagsResult: Codable, Hashable, Sendable {
      /// A list of User Tag IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteUserTagsResult/userTagIds`.
      public var userTagIds: [Swift.String]
      /// A list of User IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteUserTagsResult/userIds`.
      public var userIds: [Swift.String]
      /// Creates a new `DeleteUserTagsResult`.
      ///
      /// - Parameters:
      ///   - userTagIds: A list of User Tag IDs.
      ///   - userIds: A list of User IDs.
      public init(
        userTagIds: [Swift.String],
        userIds: [Swift.String]
      ) {
        self.userTagIds = userTagIds
        self.userIds = userIds
      }
      public enum CodingKeys: String, CodingKey {
        case userTagIds
        case userIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteUsersIntent`.
    public struct DeleteUsersIntent: Codable, Hashable, Sendable {
      /// A list of User IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteUsersIntent/userIds`.
      public var userIds: [Swift.String]
      /// Creates a new `DeleteUsersIntent`.
      ///
      /// - Parameters:
      ///   - userIds: A list of User IDs.
      public init(userIds: [Swift.String]) {
        self.userIds = userIds
      }
      public enum CodingKeys: String, CodingKey {
        case userIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteUsersRequest`.
    public struct DeleteUsersRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/DeleteUsersRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_DELETE_USERS = "ACTIVITY_TYPE_DELETE_USERS"
      }
      /// - Remark: Generated from `#/components/schemas/DeleteUsersRequest/type`.
      public var _type: Components.Schemas.DeleteUsersRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteUsersRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteUsersRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/DeleteUsersRequest/parameters`.
      public var parameters: Components.Schemas.DeleteUsersIntent
      /// Creates a new `DeleteUsersRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.DeleteUsersRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.DeleteUsersIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteUsersResult`.
    public struct DeleteUsersResult: Codable, Hashable, Sendable {
      /// A list of User IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteUsersResult/userIds`.
      public var userIds: [Swift.String]
      /// Creates a new `DeleteUsersResult`.
      ///
      /// - Parameters:
      ///   - userIds: A list of User IDs.
      public init(userIds: [Swift.String]) {
        self.userIds = userIds
      }
      public enum CodingKeys: String, CodingKey {
        case userIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteWalletsIntent`.
    public struct DeleteWalletsIntent: Codable, Hashable, Sendable {
      /// List of unique identifiers for wallets within an organization
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteWalletsIntent/walletIds`.
      public var walletIds: [Swift.String]
      /// Optional parameter for deleting the wallets, even if any have not been previously exported. If they have been exported, this field is ignored.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteWalletsIntent/deleteWithoutExport`.
      public var deleteWithoutExport: Swift.Bool?
      /// Creates a new `DeleteWalletsIntent`.
      ///
      /// - Parameters:
      ///   - walletIds: List of unique identifiers for wallets within an organization
      ///   - deleteWithoutExport: Optional parameter for deleting the wallets, even if any have not been previously exported. If they have been exported, this field is ignored.
      public init(
        walletIds: [Swift.String],
        deleteWithoutExport: Swift.Bool? = nil
      ) {
        self.walletIds = walletIds
        self.deleteWithoutExport = deleteWithoutExport
      }
      public enum CodingKeys: String, CodingKey {
        case walletIds
        case deleteWithoutExport
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteWalletsRequest`.
    public struct DeleteWalletsRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/DeleteWalletsRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_DELETE_WALLETS = "ACTIVITY_TYPE_DELETE_WALLETS"
      }
      /// - Remark: Generated from `#/components/schemas/DeleteWalletsRequest/type`.
      public var _type: Components.Schemas.DeleteWalletsRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteWalletsRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteWalletsRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/DeleteWalletsRequest/parameters`.
      public var parameters: Components.Schemas.DeleteWalletsIntent
      /// Creates a new `DeleteWalletsRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.DeleteWalletsRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.DeleteWalletsIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/DeleteWalletsResult`.
    public struct DeleteWalletsResult: Codable, Hashable, Sendable {
      /// A list of wallet unique identifiers that were removed
      ///
      /// - Remark: Generated from `#/components/schemas/DeleteWalletsResult/walletIds`.
      public var walletIds: [Swift.String]
      /// Creates a new `DeleteWalletsResult`.
      ///
      /// - Parameters:
      ///   - walletIds: A list of wallet unique identifiers that were removed
      public init(walletIds: [Swift.String]) {
        self.walletIds = walletIds
      }
      public enum CodingKeys: String, CodingKey {
        case walletIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/DisablePrivateKeyIntent`.
    public struct DisablePrivateKeyIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/DisablePrivateKeyIntent/privateKeyId`.
      public var privateKeyId: Swift.String
      /// Creates a new `DisablePrivateKeyIntent`.
      ///
      /// - Parameters:
      ///   - privateKeyId: Unique identifier for a given Private Key.
      public init(privateKeyId: Swift.String) {
        self.privateKeyId = privateKeyId
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyId
      }
    }
    /// - Remark: Generated from `#/components/schemas/DisablePrivateKeyResult`.
    public struct DisablePrivateKeyResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/DisablePrivateKeyResult/privateKeyId`.
      public var privateKeyId: Swift.String
      /// Creates a new `DisablePrivateKeyResult`.
      ///
      /// - Parameters:
      ///   - privateKeyId: Unique identifier for a given Private Key.
      public init(privateKeyId: Swift.String) {
        self.privateKeyId = privateKeyId
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyId
      }
    }
    /// - Remark: Generated from `#/components/schemas/Effect`.
    @frozen public enum Effect: String, Codable, Hashable, Sendable, CaseIterable {
      case EFFECT_ALLOW = "EFFECT_ALLOW"
      case EFFECT_DENY = "EFFECT_DENY"
    }
    /// - Remark: Generated from `#/components/schemas/EmailAuthIntent`.
    public struct EmailAuthIntent: Codable, Hashable, Sendable {
      /// Email of the authenticating user.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntent/email`.
      public var email: Swift.String
      /// Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntent/targetPublicKey`.
      public var targetPublicKey: Swift.String
      /// Optional human-readable name for an API Key. If none provided, default to Email Auth - <Timestamp>
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntent/apiKeyName`.
      public var apiKeyName: Swift.String?
      /// Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntent/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntent/emailCustomization`.
      public var emailCustomization: Components.Schemas.EmailCustomizationParams?
      /// Invalidate all other previously generated Email Auth API keys
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntent/invalidateExisting`.
      public var invalidateExisting: Swift.Bool?
      /// Optional custom email address from which to send the email
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntent/sendFromEmailAddress`.
      public var sendFromEmailAddress: Swift.String?
      /// Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntent/sendFromEmailSenderName`.
      public var sendFromEmailSenderName: Swift.String?
      /// Optional custom email address to use as reply-to
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntent/replyToEmailAddress`.
      public var replyToEmailAddress: Swift.String?
      /// Creates a new `EmailAuthIntent`.
      ///
      /// - Parameters:
      ///   - email: Email of the authenticating user.
      ///   - targetPublicKey: Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted.
      ///   - apiKeyName: Optional human-readable name for an API Key. If none provided, default to Email Auth - <Timestamp>
      ///   - expirationSeconds: Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
      ///   - emailCustomization:
      ///   - invalidateExisting: Invalidate all other previously generated Email Auth API keys
      ///   - sendFromEmailAddress: Optional custom email address from which to send the email
      ///   - sendFromEmailSenderName: Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
      ///   - replyToEmailAddress: Optional custom email address to use as reply-to
      public init(
        email: Swift.String,
        targetPublicKey: Swift.String,
        apiKeyName: Swift.String? = nil,
        expirationSeconds: Swift.String? = nil,
        emailCustomization: Components.Schemas.EmailCustomizationParams? = nil,
        invalidateExisting: Swift.Bool? = nil,
        sendFromEmailAddress: Swift.String? = nil,
        sendFromEmailSenderName: Swift.String? = nil,
        replyToEmailAddress: Swift.String? = nil
      ) {
        self.email = email
        self.targetPublicKey = targetPublicKey
        self.apiKeyName = apiKeyName
        self.expirationSeconds = expirationSeconds
        self.emailCustomization = emailCustomization
        self.invalidateExisting = invalidateExisting
        self.sendFromEmailAddress = sendFromEmailAddress
        self.sendFromEmailSenderName = sendFromEmailSenderName
        self.replyToEmailAddress = replyToEmailAddress
      }
      public enum CodingKeys: String, CodingKey {
        case email
        case targetPublicKey
        case apiKeyName
        case expirationSeconds
        case emailCustomization
        case invalidateExisting
        case sendFromEmailAddress
        case sendFromEmailSenderName
        case replyToEmailAddress
      }
    }
    /// - Remark: Generated from `#/components/schemas/EmailAuthIntentV2`.
    public struct EmailAuthIntentV2: Codable, Hashable, Sendable {
      /// Email of the authenticating user.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntentV2/email`.
      public var email: Swift.String
      /// Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntentV2/targetPublicKey`.
      public var targetPublicKey: Swift.String
      /// Optional human-readable name for an API Key. If none provided, default to Email Auth - <Timestamp>
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntentV2/apiKeyName`.
      public var apiKeyName: Swift.String?
      /// Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntentV2/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntentV2/emailCustomization`.
      public var emailCustomization: Components.Schemas.EmailCustomizationParams?
      /// Invalidate all other previously generated Email Auth API keys
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntentV2/invalidateExisting`.
      public var invalidateExisting: Swift.Bool?
      /// Optional custom email address from which to send the email
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntentV2/sendFromEmailAddress`.
      public var sendFromEmailAddress: Swift.String?
      /// Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntentV2/sendFromEmailSenderName`.
      public var sendFromEmailSenderName: Swift.String?
      /// Optional custom email address to use as reply-to
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthIntentV2/replyToEmailAddress`.
      public var replyToEmailAddress: Swift.String?
      /// Creates a new `EmailAuthIntentV2`.
      ///
      /// - Parameters:
      ///   - email: Email of the authenticating user.
      ///   - targetPublicKey: Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted.
      ///   - apiKeyName: Optional human-readable name for an API Key. If none provided, default to Email Auth - <Timestamp>
      ///   - expirationSeconds: Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
      ///   - emailCustomization:
      ///   - invalidateExisting: Invalidate all other previously generated Email Auth API keys
      ///   - sendFromEmailAddress: Optional custom email address from which to send the email
      ///   - sendFromEmailSenderName: Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
      ///   - replyToEmailAddress: Optional custom email address to use as reply-to
      public init(
        email: Swift.String,
        targetPublicKey: Swift.String,
        apiKeyName: Swift.String? = nil,
        expirationSeconds: Swift.String? = nil,
        emailCustomization: Components.Schemas.EmailCustomizationParams? = nil,
        invalidateExisting: Swift.Bool? = nil,
        sendFromEmailAddress: Swift.String? = nil,
        sendFromEmailSenderName: Swift.String? = nil,
        replyToEmailAddress: Swift.String? = nil
      ) {
        self.email = email
        self.targetPublicKey = targetPublicKey
        self.apiKeyName = apiKeyName
        self.expirationSeconds = expirationSeconds
        self.emailCustomization = emailCustomization
        self.invalidateExisting = invalidateExisting
        self.sendFromEmailAddress = sendFromEmailAddress
        self.sendFromEmailSenderName = sendFromEmailSenderName
        self.replyToEmailAddress = replyToEmailAddress
      }
      public enum CodingKeys: String, CodingKey {
        case email
        case targetPublicKey
        case apiKeyName
        case expirationSeconds
        case emailCustomization
        case invalidateExisting
        case sendFromEmailAddress
        case sendFromEmailSenderName
        case replyToEmailAddress
      }
    }
    /// - Remark: Generated from `#/components/schemas/EmailAuthRequest`.
    public struct EmailAuthRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/EmailAuthRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_EMAIL_AUTH_V2 = "ACTIVITY_TYPE_EMAIL_AUTH_V2"
      }
      /// - Remark: Generated from `#/components/schemas/EmailAuthRequest/type`.
      public var _type: Components.Schemas.EmailAuthRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/EmailAuthRequest/parameters`.
      public var parameters: Components.Schemas.EmailAuthIntentV2
      /// Creates a new `EmailAuthRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.EmailAuthRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.EmailAuthIntentV2
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/EmailAuthResult`.
    public struct EmailAuthResult: Codable, Hashable, Sendable {
      /// Unique identifier for the authenticating User.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthResult/userId`.
      public var userId: Swift.String
      /// Unique identifier for the created API key.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailAuthResult/apiKeyId`.
      public var apiKeyId: Swift.String
      /// Creates a new `EmailAuthResult`.
      ///
      /// - Parameters:
      ///   - userId: Unique identifier for the authenticating User.
      ///   - apiKeyId: Unique identifier for the created API key.
      public init(
        userId: Swift.String,
        apiKeyId: Swift.String
      ) {
        self.userId = userId
        self.apiKeyId = apiKeyId
      }
      public enum CodingKeys: String, CodingKey {
        case userId
        case apiKeyId
      }
    }
    /// - Remark: Generated from `#/components/schemas/EmailCustomizationParams`.
    public struct EmailCustomizationParams: Codable, Hashable, Sendable {
      /// The name of the application.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailCustomizationParams/appName`.
      public var appName: Swift.String?
      /// A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailCustomizationParams/logoUrl`.
      public var logoUrl: Swift.String?
      /// A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailCustomizationParams/magicLinkTemplate`.
      public var magicLinkTemplate: Swift.String?
      /// JSON object containing key/value pairs to be used with custom templates.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailCustomizationParams/templateVariables`.
      public var templateVariables: Swift.String?
      /// Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
      ///
      /// - Remark: Generated from `#/components/schemas/EmailCustomizationParams/templateId`.
      public var templateId: Swift.String?
      /// Creates a new `EmailCustomizationParams`.
      ///
      /// - Parameters:
      ///   - appName: The name of the application.
      ///   - logoUrl: A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
      ///   - magicLinkTemplate: A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
      ///   - templateVariables: JSON object containing key/value pairs to be used with custom templates.
      ///   - templateId: Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
      public init(
        appName: Swift.String? = nil,
        logoUrl: Swift.String? = nil,
        magicLinkTemplate: Swift.String? = nil,
        templateVariables: Swift.String? = nil,
        templateId: Swift.String? = nil
      ) {
        self.appName = appName
        self.logoUrl = logoUrl
        self.magicLinkTemplate = magicLinkTemplate
        self.templateVariables = templateVariables
        self.templateId = templateId
      }
      public enum CodingKeys: String, CodingKey {
        case appName
        case logoUrl
        case magicLinkTemplate
        case templateVariables
        case templateId
      }
    }
    /// - Remark: Generated from `#/components/schemas/ExportPrivateKeyIntent`.
    public struct ExportPrivateKeyIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportPrivateKeyIntent/privateKeyId`.
      public var privateKeyId: Swift.String
      /// Client-side public key generated by the user, to which the export bundle will be encrypted.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportPrivateKeyIntent/targetPublicKey`.
      public var targetPublicKey: Swift.String
      /// Creates a new `ExportPrivateKeyIntent`.
      ///
      /// - Parameters:
      ///   - privateKeyId: Unique identifier for a given Private Key.
      ///   - targetPublicKey: Client-side public key generated by the user, to which the export bundle will be encrypted.
      public init(
        privateKeyId: Swift.String,
        targetPublicKey: Swift.String
      ) {
        self.privateKeyId = privateKeyId
        self.targetPublicKey = targetPublicKey
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyId
        case targetPublicKey
      }
    }
    /// - Remark: Generated from `#/components/schemas/ExportPrivateKeyRequest`.
    public struct ExportPrivateKeyRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/ExportPrivateKeyRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_EXPORT_PRIVATE_KEY = "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY"
      }
      /// - Remark: Generated from `#/components/schemas/ExportPrivateKeyRequest/type`.
      public var _type: Components.Schemas.ExportPrivateKeyRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportPrivateKeyRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportPrivateKeyRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/ExportPrivateKeyRequest/parameters`.
      public var parameters: Components.Schemas.ExportPrivateKeyIntent
      /// Creates a new `ExportPrivateKeyRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.ExportPrivateKeyRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.ExportPrivateKeyIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/ExportPrivateKeyResult`.
    public struct ExportPrivateKeyResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportPrivateKeyResult/privateKeyId`.
      public var privateKeyId: Swift.String
      /// Export bundle containing a private key encrypted to the client's target public key.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportPrivateKeyResult/exportBundle`.
      public var exportBundle: Swift.String
      /// Creates a new `ExportPrivateKeyResult`.
      ///
      /// - Parameters:
      ///   - privateKeyId: Unique identifier for a given Private Key.
      ///   - exportBundle: Export bundle containing a private key encrypted to the client's target public key.
      public init(
        privateKeyId: Swift.String,
        exportBundle: Swift.String
      ) {
        self.privateKeyId = privateKeyId
        self.exportBundle = exportBundle
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyId
        case exportBundle
      }
    }
    /// - Remark: Generated from `#/components/schemas/ExportWalletAccountIntent`.
    public struct ExportWalletAccountIntent: Codable, Hashable, Sendable {
      /// Address to identify Wallet Account.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportWalletAccountIntent/address`.
      public var address: Swift.String
      /// Client-side public key generated by the user, to which the export bundle will be encrypted.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportWalletAccountIntent/targetPublicKey`.
      public var targetPublicKey: Swift.String
      /// Creates a new `ExportWalletAccountIntent`.
      ///
      /// - Parameters:
      ///   - address: Address to identify Wallet Account.
      ///   - targetPublicKey: Client-side public key generated by the user, to which the export bundle will be encrypted.
      public init(
        address: Swift.String,
        targetPublicKey: Swift.String
      ) {
        self.address = address
        self.targetPublicKey = targetPublicKey
      }
      public enum CodingKeys: String, CodingKey {
        case address
        case targetPublicKey
      }
    }
    /// - Remark: Generated from `#/components/schemas/ExportWalletAccountRequest`.
    public struct ExportWalletAccountRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/ExportWalletAccountRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT = "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT"
      }
      /// - Remark: Generated from `#/components/schemas/ExportWalletAccountRequest/type`.
      public var _type: Components.Schemas.ExportWalletAccountRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportWalletAccountRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportWalletAccountRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/ExportWalletAccountRequest/parameters`.
      public var parameters: Components.Schemas.ExportWalletAccountIntent
      /// Creates a new `ExportWalletAccountRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.ExportWalletAccountRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.ExportWalletAccountIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/ExportWalletAccountResult`.
    public struct ExportWalletAccountResult: Codable, Hashable, Sendable {
      /// Address to identify Wallet Account.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportWalletAccountResult/address`.
      public var address: Swift.String
      /// Export bundle containing a private key encrypted by the client's target public key.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportWalletAccountResult/exportBundle`.
      public var exportBundle: Swift.String
      /// Creates a new `ExportWalletAccountResult`.
      ///
      /// - Parameters:
      ///   - address: Address to identify Wallet Account.
      ///   - exportBundle: Export bundle containing a private key encrypted by the client's target public key.
      public init(
        address: Swift.String,
        exportBundle: Swift.String
      ) {
        self.address = address
        self.exportBundle = exportBundle
      }
      public enum CodingKeys: String, CodingKey {
        case address
        case exportBundle
      }
    }
    /// - Remark: Generated from `#/components/schemas/ExportWalletIntent`.
    public struct ExportWalletIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportWalletIntent/walletId`.
      public var walletId: Swift.String
      /// Client-side public key generated by the user, to which the export bundle will be encrypted.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportWalletIntent/targetPublicKey`.
      public var targetPublicKey: Swift.String
      /// - Remark: Generated from `#/components/schemas/ExportWalletIntent/language`.
      public var language: Components.Schemas.MnemonicLanguage?
      /// Creates a new `ExportWalletIntent`.
      ///
      /// - Parameters:
      ///   - walletId: Unique identifier for a given Wallet.
      ///   - targetPublicKey: Client-side public key generated by the user, to which the export bundle will be encrypted.
      ///   - language:
      public init(
        walletId: Swift.String,
        targetPublicKey: Swift.String,
        language: Components.Schemas.MnemonicLanguage? = nil
      ) {
        self.walletId = walletId
        self.targetPublicKey = targetPublicKey
        self.language = language
      }
      public enum CodingKeys: String, CodingKey {
        case walletId
        case targetPublicKey
        case language
      }
    }
    /// - Remark: Generated from `#/components/schemas/ExportWalletRequest`.
    public struct ExportWalletRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/ExportWalletRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_EXPORT_WALLET = "ACTIVITY_TYPE_EXPORT_WALLET"
      }
      /// - Remark: Generated from `#/components/schemas/ExportWalletRequest/type`.
      public var _type: Components.Schemas.ExportWalletRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportWalletRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportWalletRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/ExportWalletRequest/parameters`.
      public var parameters: Components.Schemas.ExportWalletIntent
      /// Creates a new `ExportWalletRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.ExportWalletRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.ExportWalletIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/ExportWalletResult`.
    public struct ExportWalletResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportWalletResult/walletId`.
      public var walletId: Swift.String
      /// Export bundle containing a wallet mnemonic + optional newline passphrase encrypted by the client's target public key.
      ///
      /// - Remark: Generated from `#/components/schemas/ExportWalletResult/exportBundle`.
      public var exportBundle: Swift.String
      /// Creates a new `ExportWalletResult`.
      ///
      /// - Parameters:
      ///   - walletId: Unique identifier for a given Wallet.
      ///   - exportBundle: Export bundle containing a wallet mnemonic + optional newline passphrase encrypted by the client's target public key.
      public init(
        walletId: Swift.String,
        exportBundle: Swift.String
      ) {
        self.walletId = walletId
        self.exportBundle = exportBundle
      }
      public enum CodingKeys: String, CodingKey {
        case walletId
        case exportBundle
      }
    }
    /// - Remark: Generated from `#/components/schemas/Feature`.
    public struct Feature: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/Feature/name`.
      public var name: Components.Schemas.FeatureName?
      /// - Remark: Generated from `#/components/schemas/Feature/value`.
      public var value: Swift.String?
      /// Creates a new `Feature`.
      ///
      /// - Parameters:
      ///   - name:
      ///   - value:
      public init(
        name: Components.Schemas.FeatureName? = nil,
        value: Swift.String? = nil
      ) {
        self.name = name
        self.value = value
      }
      public enum CodingKeys: String, CodingKey {
        case name
        case value
      }
    }
    /// - Remark: Generated from `#/components/schemas/FeatureName`.
    @frozen public enum FeatureName: String, Codable, Hashable, Sendable, CaseIterable {
      case FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY = "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY"
      case FEATURE_NAME_WEBAUTHN_ORIGINS = "FEATURE_NAME_WEBAUTHN_ORIGINS"
      case FEATURE_NAME_EMAIL_AUTH = "FEATURE_NAME_EMAIL_AUTH"
      case FEATURE_NAME_EMAIL_RECOVERY = "FEATURE_NAME_EMAIL_RECOVERY"
      case FEATURE_NAME_WEBHOOK = "FEATURE_NAME_WEBHOOK"
      case FEATURE_NAME_SMS_AUTH = "FEATURE_NAME_SMS_AUTH"
      case FEATURE_NAME_OTP_EMAIL_AUTH = "FEATURE_NAME_OTP_EMAIL_AUTH"
    }
    /// - Remark: Generated from `#/components/schemas/GetActivitiesRequest`.
    public struct GetActivitiesRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetActivitiesRequest/organizationId`.
      public var organizationId: Swift.String
      /// Array of Activity Statuses filtering which Activities will be listed in the response.
      ///
      /// - Remark: Generated from `#/components/schemas/GetActivitiesRequest/filterByStatus`.
      public var filterByStatus: [Components.Schemas.ActivityStatus]?
      /// - Remark: Generated from `#/components/schemas/GetActivitiesRequest/paginationOptions`.
      public var paginationOptions: Components.Schemas.Pagination?
      /// Array of Activity Types filtering which Activities will be listed in the response.
      ///
      /// - Remark: Generated from `#/components/schemas/GetActivitiesRequest/filterByType`.
      public var filterByType: [Components.Schemas.ActivityType]?
      /// Creates a new `GetActivitiesRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - filterByStatus: Array of Activity Statuses filtering which Activities will be listed in the response.
      ///   - paginationOptions:
      ///   - filterByType: Array of Activity Types filtering which Activities will be listed in the response.
      public init(
        organizationId: Swift.String,
        filterByStatus: [Components.Schemas.ActivityStatus]? = nil,
        paginationOptions: Components.Schemas.Pagination? = nil,
        filterByType: [Components.Schemas.ActivityType]? = nil
      ) {
        self.organizationId = organizationId
        self.filterByStatus = filterByStatus
        self.paginationOptions = paginationOptions
        self.filterByType = filterByType
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case filterByStatus
        case paginationOptions
        case filterByType
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetActivitiesResponse`.
    public struct GetActivitiesResponse: Codable, Hashable, Sendable {
      /// A list of Activities.
      ///
      /// - Remark: Generated from `#/components/schemas/GetActivitiesResponse/activities`.
      public var activities: [Components.Schemas.Activity]
      /// Creates a new `GetActivitiesResponse`.
      ///
      /// - Parameters:
      ///   - activities: A list of Activities.
      public init(activities: [Components.Schemas.Activity]) {
        self.activities = activities
      }
      public enum CodingKeys: String, CodingKey {
        case activities
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetActivityRequest`.
    public struct GetActivityRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetActivityRequest/organizationId`.
      public var organizationId: Swift.String
      /// Unique identifier for a given Activity object.
      ///
      /// - Remark: Generated from `#/components/schemas/GetActivityRequest/activityId`.
      public var activityId: Swift.String
      /// Creates a new `GetActivityRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - activityId: Unique identifier for a given Activity object.
      public init(
        organizationId: Swift.String,
        activityId: Swift.String
      ) {
        self.organizationId = organizationId
        self.activityId = activityId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case activityId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetApiKeyRequest`.
    public struct GetApiKeyRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetApiKeyRequest/organizationId`.
      public var organizationId: Swift.String
      /// Unique identifier for a given API key.
      ///
      /// - Remark: Generated from `#/components/schemas/GetApiKeyRequest/apiKeyId`.
      public var apiKeyId: Swift.String
      /// Creates a new `GetApiKeyRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - apiKeyId: Unique identifier for a given API key.
      public init(
        organizationId: Swift.String,
        apiKeyId: Swift.String
      ) {
        self.organizationId = organizationId
        self.apiKeyId = apiKeyId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case apiKeyId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetApiKeyResponse`.
    public struct GetApiKeyResponse: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/GetApiKeyResponse/apiKey`.
      public var apiKey: Components.Schemas.ApiKey
      /// Creates a new `GetApiKeyResponse`.
      ///
      /// - Parameters:
      ///   - apiKey:
      public init(apiKey: Components.Schemas.ApiKey) {
        self.apiKey = apiKey
      }
      public enum CodingKeys: String, CodingKey {
        case apiKey
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetApiKeysRequest`.
    public struct GetApiKeysRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetApiKeysRequest/organizationId`.
      public var organizationId: Swift.String
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/GetApiKeysRequest/userId`.
      public var userId: Swift.String?
      /// Creates a new `GetApiKeysRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - userId: Unique identifier for a given User.
      public init(
        organizationId: Swift.String,
        userId: Swift.String? = nil
      ) {
        self.organizationId = organizationId
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetApiKeysResponse`.
    public struct GetApiKeysResponse: Codable, Hashable, Sendable {
      /// A list of API keys.
      ///
      /// - Remark: Generated from `#/components/schemas/GetApiKeysResponse/apiKeys`.
      public var apiKeys: [Components.Schemas.ApiKey]
      /// Creates a new `GetApiKeysResponse`.
      ///
      /// - Parameters:
      ///   - apiKeys: A list of API keys.
      public init(apiKeys: [Components.Schemas.ApiKey]) {
        self.apiKeys = apiKeys
      }
      public enum CodingKeys: String, CodingKey {
        case apiKeys
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetAuthenticatorRequest`.
    public struct GetAuthenticatorRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetAuthenticatorRequest/organizationId`.
      public var organizationId: Swift.String
      /// Unique identifier for a given Authenticator.
      ///
      /// - Remark: Generated from `#/components/schemas/GetAuthenticatorRequest/authenticatorId`.
      public var authenticatorId: Swift.String
      /// Creates a new `GetAuthenticatorRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - authenticatorId: Unique identifier for a given Authenticator.
      public init(
        organizationId: Swift.String,
        authenticatorId: Swift.String
      ) {
        self.organizationId = organizationId
        self.authenticatorId = authenticatorId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case authenticatorId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetAuthenticatorResponse`.
    public struct GetAuthenticatorResponse: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/GetAuthenticatorResponse/authenticator`.
      public var authenticator: Components.Schemas.Authenticator
      /// Creates a new `GetAuthenticatorResponse`.
      ///
      /// - Parameters:
      ///   - authenticator:
      public init(authenticator: Components.Schemas.Authenticator) {
        self.authenticator = authenticator
      }
      public enum CodingKeys: String, CodingKey {
        case authenticator
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetAuthenticatorsRequest`.
    public struct GetAuthenticatorsRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetAuthenticatorsRequest/organizationId`.
      public var organizationId: Swift.String
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/GetAuthenticatorsRequest/userId`.
      public var userId: Swift.String
      /// Creates a new `GetAuthenticatorsRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - userId: Unique identifier for a given User.
      public init(
        organizationId: Swift.String,
        userId: Swift.String
      ) {
        self.organizationId = organizationId
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetAuthenticatorsResponse`.
    public struct GetAuthenticatorsResponse: Codable, Hashable, Sendable {
      /// A list of authenticators.
      ///
      /// - Remark: Generated from `#/components/schemas/GetAuthenticatorsResponse/authenticators`.
      public var authenticators: [Components.Schemas.Authenticator]
      /// Creates a new `GetAuthenticatorsResponse`.
      ///
      /// - Parameters:
      ///   - authenticators: A list of authenticators.
      public init(authenticators: [Components.Schemas.Authenticator]) {
        self.authenticators = authenticators
      }
      public enum CodingKeys: String, CodingKey {
        case authenticators
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetOauthProvidersRequest`.
    public struct GetOauthProvidersRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetOauthProvidersRequest/organizationId`.
      public var organizationId: Swift.String
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/GetOauthProvidersRequest/userId`.
      public var userId: Swift.String?
      /// Creates a new `GetOauthProvidersRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - userId: Unique identifier for a given User.
      public init(
        organizationId: Swift.String,
        userId: Swift.String? = nil
      ) {
        self.organizationId = organizationId
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetOauthProvidersResponse`.
    public struct GetOauthProvidersResponse: Codable, Hashable, Sendable {
      /// A list of Oauth Providers
      ///
      /// - Remark: Generated from `#/components/schemas/GetOauthProvidersResponse/oauthProviders`.
      public var oauthProviders: [Components.Schemas.OauthProvider]
      /// Creates a new `GetOauthProvidersResponse`.
      ///
      /// - Parameters:
      ///   - oauthProviders: A list of Oauth Providers
      public init(oauthProviders: [Components.Schemas.OauthProvider]) {
        self.oauthProviders = oauthProviders
      }
      public enum CodingKeys: String, CodingKey {
        case oauthProviders
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetOrganizationConfigsRequest`.
    public struct GetOrganizationConfigsRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetOrganizationConfigsRequest/organizationId`.
      public var organizationId: Swift.String
      /// Creates a new `GetOrganizationConfigsRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      public init(organizationId: Swift.String) {
        self.organizationId = organizationId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetOrganizationConfigsResponse`.
    public struct GetOrganizationConfigsResponse: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/GetOrganizationConfigsResponse/configs`.
      public var configs: Components.Schemas.Config
      /// Creates a new `GetOrganizationConfigsResponse`.
      ///
      /// - Parameters:
      ///   - configs:
      public init(configs: Components.Schemas.Config) {
        self.configs = configs
      }
      public enum CodingKeys: String, CodingKey {
        case configs
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetPoliciesRequest`.
    public struct GetPoliciesRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetPoliciesRequest/organizationId`.
      public var organizationId: Swift.String
      /// Creates a new `GetPoliciesRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      public init(organizationId: Swift.String) {
        self.organizationId = organizationId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetPoliciesResponse`.
    public struct GetPoliciesResponse: Codable, Hashable, Sendable {
      /// A list of Policies.
      ///
      /// - Remark: Generated from `#/components/schemas/GetPoliciesResponse/policies`.
      public var policies: [Components.Schemas.Policy]
      /// Creates a new `GetPoliciesResponse`.
      ///
      /// - Parameters:
      ///   - policies: A list of Policies.
      public init(policies: [Components.Schemas.Policy]) {
        self.policies = policies
      }
      public enum CodingKeys: String, CodingKey {
        case policies
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetPolicyRequest`.
    public struct GetPolicyRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetPolicyRequest/organizationId`.
      public var organizationId: Swift.String
      /// Unique identifier for a given Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/GetPolicyRequest/policyId`.
      public var policyId: Swift.String
      /// Creates a new `GetPolicyRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - policyId: Unique identifier for a given Policy.
      public init(
        organizationId: Swift.String,
        policyId: Swift.String
      ) {
        self.organizationId = organizationId
        self.policyId = policyId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case policyId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetPolicyResponse`.
    public struct GetPolicyResponse: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/GetPolicyResponse/policy`.
      public var policy: Components.Schemas.Policy
      /// Creates a new `GetPolicyResponse`.
      ///
      /// - Parameters:
      ///   - policy:
      public init(policy: Components.Schemas.Policy) {
        self.policy = policy
      }
      public enum CodingKeys: String, CodingKey {
        case policy
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetPrivateKeyRequest`.
    public struct GetPrivateKeyRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetPrivateKeyRequest/organizationId`.
      public var organizationId: Swift.String
      /// Unique identifier for a given Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/GetPrivateKeyRequest/privateKeyId`.
      public var privateKeyId: Swift.String
      /// Creates a new `GetPrivateKeyRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - privateKeyId: Unique identifier for a given Private Key.
      public init(
        organizationId: Swift.String,
        privateKeyId: Swift.String
      ) {
        self.organizationId = organizationId
        self.privateKeyId = privateKeyId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case privateKeyId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetPrivateKeyResponse`.
    public struct GetPrivateKeyResponse: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/GetPrivateKeyResponse/privateKey`.
      public var privateKey: Components.Schemas.PrivateKey
      /// Creates a new `GetPrivateKeyResponse`.
      ///
      /// - Parameters:
      ///   - privateKey:
      public init(privateKey: Components.Schemas.PrivateKey) {
        self.privateKey = privateKey
      }
      public enum CodingKeys: String, CodingKey {
        case privateKey
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetPrivateKeysRequest`.
    public struct GetPrivateKeysRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetPrivateKeysRequest/organizationId`.
      public var organizationId: Swift.String
      /// Creates a new `GetPrivateKeysRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      public init(organizationId: Swift.String) {
        self.organizationId = organizationId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetPrivateKeysResponse`.
    public struct GetPrivateKeysResponse: Codable, Hashable, Sendable {
      /// A list of Private Keys.
      ///
      /// - Remark: Generated from `#/components/schemas/GetPrivateKeysResponse/privateKeys`.
      public var privateKeys: [Components.Schemas.PrivateKey]
      /// Creates a new `GetPrivateKeysResponse`.
      ///
      /// - Parameters:
      ///   - privateKeys: A list of Private Keys.
      public init(privateKeys: [Components.Schemas.PrivateKey]) {
        self.privateKeys = privateKeys
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeys
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetSubOrgIdsRequest`.
    public struct GetSubOrgIdsRequest: Codable, Hashable, Sendable {
      /// Unique identifier for the parent Organization. This is used to find sub-organizations within it.
      ///
      /// - Remark: Generated from `#/components/schemas/GetSubOrgIdsRequest/organizationId`.
      public var organizationId: Swift.String
      /// Specifies the type of filter to apply, i.e 'CREDENTIAL_ID', 'NAME', 'USERNAME', 'EMAIL', 'PHONE_NUMBER', 'OIDC_TOKEN' or 'PUBLIC_KEY'
      ///
      /// - Remark: Generated from `#/components/schemas/GetSubOrgIdsRequest/filterType`.
      public var filterType: Swift.String?
      /// The value of the filter to apply for the specified type. For example, a specific email or name string.
      ///
      /// - Remark: Generated from `#/components/schemas/GetSubOrgIdsRequest/filterValue`.
      public var filterValue: Swift.String?
      /// - Remark: Generated from `#/components/schemas/GetSubOrgIdsRequest/paginationOptions`.
      public var paginationOptions: Components.Schemas.Pagination?
      /// Creates a new `GetSubOrgIdsRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for the parent Organization. This is used to find sub-organizations within it.
      ///   - filterType: Specifies the type of filter to apply, i.e 'CREDENTIAL_ID', 'NAME', 'USERNAME', 'EMAIL', 'PHONE_NUMBER', 'OIDC_TOKEN' or 'PUBLIC_KEY'
      ///   - filterValue: The value of the filter to apply for the specified type. For example, a specific email or name string.
      ///   - paginationOptions:
      public init(
        organizationId: Swift.String,
        filterType: Swift.String? = nil,
        filterValue: Swift.String? = nil,
        paginationOptions: Components.Schemas.Pagination? = nil
      ) {
        self.organizationId = organizationId
        self.filterType = filterType
        self.filterValue = filterValue
        self.paginationOptions = paginationOptions
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case filterType
        case filterValue
        case paginationOptions
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetSubOrgIdsResponse`.
    public struct GetSubOrgIdsResponse: Codable, Hashable, Sendable {
      /// List of unique identifiers for the matching sub-organizations.
      ///
      /// - Remark: Generated from `#/components/schemas/GetSubOrgIdsResponse/organizationIds`.
      public var organizationIds: [Swift.String]
      /// Creates a new `GetSubOrgIdsResponse`.
      ///
      /// - Parameters:
      ///   - organizationIds: List of unique identifiers for the matching sub-organizations.
      public init(organizationIds: [Swift.String]) {
        self.organizationIds = organizationIds
      }
      public enum CodingKeys: String, CodingKey {
        case organizationIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetUserRequest`.
    public struct GetUserRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetUserRequest/organizationId`.
      public var organizationId: Swift.String
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/GetUserRequest/userId`.
      public var userId: Swift.String
      /// Creates a new `GetUserRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - userId: Unique identifier for a given User.
      public init(
        organizationId: Swift.String,
        userId: Swift.String
      ) {
        self.organizationId = organizationId
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetUserResponse`.
    public struct GetUserResponse: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/GetUserResponse/user`.
      public var user: Components.Schemas.User
      /// Creates a new `GetUserResponse`.
      ///
      /// - Parameters:
      ///   - user:
      public init(user: Components.Schemas.User) {
        self.user = user
      }
      public enum CodingKeys: String, CodingKey {
        case user
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetUsersRequest`.
    public struct GetUsersRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetUsersRequest/organizationId`.
      public var organizationId: Swift.String
      /// Creates a new `GetUsersRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      public init(organizationId: Swift.String) {
        self.organizationId = organizationId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetUsersResponse`.
    public struct GetUsersResponse: Codable, Hashable, Sendable {
      /// A list of Users.
      ///
      /// - Remark: Generated from `#/components/schemas/GetUsersResponse/users`.
      public var users: [Components.Schemas.User]
      /// Creates a new `GetUsersResponse`.
      ///
      /// - Parameters:
      ///   - users: A list of Users.
      public init(users: [Components.Schemas.User]) {
        self.users = users
      }
      public enum CodingKeys: String, CodingKey {
        case users
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetVerifiedSubOrgIdsRequest`.
    public struct GetVerifiedSubOrgIdsRequest: Codable, Hashable, Sendable {
      /// Unique identifier for the parent Organization. This is used to find sub-organizations within it.
      ///
      /// - Remark: Generated from `#/components/schemas/GetVerifiedSubOrgIdsRequest/organizationId`.
      public var organizationId: Swift.String
      /// Specifies the type of filter to apply, i.e 'EMAIL', 'PHONE_NUMBER'
      ///
      /// - Remark: Generated from `#/components/schemas/GetVerifiedSubOrgIdsRequest/filterType`.
      public var filterType: Swift.String?
      /// The value of the filter to apply for the specified type. For example, a specific email or phone number string.
      ///
      /// - Remark: Generated from `#/components/schemas/GetVerifiedSubOrgIdsRequest/filterValue`.
      public var filterValue: Swift.String?
      /// - Remark: Generated from `#/components/schemas/GetVerifiedSubOrgIdsRequest/paginationOptions`.
      public var paginationOptions: Components.Schemas.Pagination?
      /// Creates a new `GetVerifiedSubOrgIdsRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for the parent Organization. This is used to find sub-organizations within it.
      ///   - filterType: Specifies the type of filter to apply, i.e 'EMAIL', 'PHONE_NUMBER'
      ///   - filterValue: The value of the filter to apply for the specified type. For example, a specific email or phone number string.
      ///   - paginationOptions:
      public init(
        organizationId: Swift.String,
        filterType: Swift.String? = nil,
        filterValue: Swift.String? = nil,
        paginationOptions: Components.Schemas.Pagination? = nil
      ) {
        self.organizationId = organizationId
        self.filterType = filterType
        self.filterValue = filterValue
        self.paginationOptions = paginationOptions
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case filterType
        case filterValue
        case paginationOptions
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetVerifiedSubOrgIdsResponse`.
    public struct GetVerifiedSubOrgIdsResponse: Codable, Hashable, Sendable {
      /// List of unique identifiers for the matching sub-organizations.
      ///
      /// - Remark: Generated from `#/components/schemas/GetVerifiedSubOrgIdsResponse/organizationIds`.
      public var organizationIds: [Swift.String]
      /// Creates a new `GetVerifiedSubOrgIdsResponse`.
      ///
      /// - Parameters:
      ///   - organizationIds: List of unique identifiers for the matching sub-organizations.
      public init(organizationIds: [Swift.String]) {
        self.organizationIds = organizationIds
      }
      public enum CodingKeys: String, CodingKey {
        case organizationIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetWalletAccountRequest`.
    public struct GetWalletAccountRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWalletAccountRequest/organizationId`.
      public var organizationId: Swift.String
      /// Unique identifier for a given Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWalletAccountRequest/walletId`.
      public var walletId: Swift.String
      /// Address corresponding to a Wallet Account.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWalletAccountRequest/address`.
      public var address: Swift.String?
      /// Path corresponding to a Wallet Account.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWalletAccountRequest/path`.
      public var path: Swift.String?
      /// Creates a new `GetWalletAccountRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - walletId: Unique identifier for a given Wallet.
      ///   - address: Address corresponding to a Wallet Account.
      ///   - path: Path corresponding to a Wallet Account.
      public init(
        organizationId: Swift.String,
        walletId: Swift.String,
        address: Swift.String? = nil,
        path: Swift.String? = nil
      ) {
        self.organizationId = organizationId
        self.walletId = walletId
        self.address = address
        self.path = path
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case walletId
        case address
        case path
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetWalletAccountResponse`.
    public struct GetWalletAccountResponse: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/GetWalletAccountResponse/account`.
      public var account: Components.Schemas.WalletAccount
      /// Creates a new `GetWalletAccountResponse`.
      ///
      /// - Parameters:
      ///   - account:
      public init(account: Components.Schemas.WalletAccount) {
        self.account = account
      }
      public enum CodingKeys: String, CodingKey {
        case account
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetWalletAccountsRequest`.
    public struct GetWalletAccountsRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWalletAccountsRequest/organizationId`.
      public var organizationId: Swift.String
      /// Unique identifier for a given Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWalletAccountsRequest/walletId`.
      public var walletId: Swift.String
      /// - Remark: Generated from `#/components/schemas/GetWalletAccountsRequest/paginationOptions`.
      public var paginationOptions: Components.Schemas.Pagination?
      /// Creates a new `GetWalletAccountsRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - walletId: Unique identifier for a given Wallet.
      ///   - paginationOptions:
      public init(
        organizationId: Swift.String,
        walletId: Swift.String,
        paginationOptions: Components.Schemas.Pagination? = nil
      ) {
        self.organizationId = organizationId
        self.walletId = walletId
        self.paginationOptions = paginationOptions
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case walletId
        case paginationOptions
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetWalletAccountsResponse`.
    public struct GetWalletAccountsResponse: Codable, Hashable, Sendable {
      /// A list of Accounts generated from a Wallet that share a common seed.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWalletAccountsResponse/accounts`.
      public var accounts: [Components.Schemas.WalletAccount]
      /// Creates a new `GetWalletAccountsResponse`.
      ///
      /// - Parameters:
      ///   - accounts: A list of Accounts generated from a Wallet that share a common seed.
      public init(accounts: [Components.Schemas.WalletAccount]) {
        self.accounts = accounts
      }
      public enum CodingKeys: String, CodingKey {
        case accounts
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetWalletRequest`.
    public struct GetWalletRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWalletRequest/organizationId`.
      public var organizationId: Swift.String
      /// Unique identifier for a given Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWalletRequest/walletId`.
      public var walletId: Swift.String
      /// Creates a new `GetWalletRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - walletId: Unique identifier for a given Wallet.
      public init(
        organizationId: Swift.String,
        walletId: Swift.String
      ) {
        self.organizationId = organizationId
        self.walletId = walletId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case walletId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetWalletResponse`.
    public struct GetWalletResponse: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/GetWalletResponse/wallet`.
      public var wallet: Components.Schemas.Wallet
      /// Creates a new `GetWalletResponse`.
      ///
      /// - Parameters:
      ///   - wallet:
      public init(wallet: Components.Schemas.Wallet) {
        self.wallet = wallet
      }
      public enum CodingKeys: String, CodingKey {
        case wallet
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetWalletsRequest`.
    public struct GetWalletsRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWalletsRequest/organizationId`.
      public var organizationId: Swift.String
      /// Creates a new `GetWalletsRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      public init(organizationId: Swift.String) {
        self.organizationId = organizationId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetWalletsResponse`.
    public struct GetWalletsResponse: Codable, Hashable, Sendable {
      /// A list of Wallets.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWalletsResponse/wallets`.
      public var wallets: [Components.Schemas.Wallet]
      /// Creates a new `GetWalletsResponse`.
      ///
      /// - Parameters:
      ///   - wallets: A list of Wallets.
      public init(wallets: [Components.Schemas.Wallet]) {
        self.wallets = wallets
      }
      public enum CodingKeys: String, CodingKey {
        case wallets
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetWhoamiRequest`.
    public struct GetWhoamiRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization. If the request is being made by a WebAuthN user and their Sub-Organization ID is unknown, this can be the Parent Organization ID; using the Sub-Organization ID when possible is preferred due to performance reasons.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWhoamiRequest/organizationId`.
      public var organizationId: Swift.String
      /// Creates a new `GetWhoamiRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization. If the request is being made by a WebAuthN user and their Sub-Organization ID is unknown, this can be the Parent Organization ID; using the Sub-Organization ID when possible is preferred due to performance reasons.
      public init(organizationId: Swift.String) {
        self.organizationId = organizationId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
      }
    }
    /// - Remark: Generated from `#/components/schemas/GetWhoamiResponse`.
    public struct GetWhoamiResponse: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWhoamiResponse/organizationId`.
      public var organizationId: Swift.String
      /// Human-readable name for an Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWhoamiResponse/organizationName`.
      public var organizationName: Swift.String
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWhoamiResponse/userId`.
      public var userId: Swift.String
      /// Human-readable name for a User.
      ///
      /// - Remark: Generated from `#/components/schemas/GetWhoamiResponse/username`.
      public var username: Swift.String
      /// Creates a new `GetWhoamiResponse`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - organizationName: Human-readable name for an Organization.
      ///   - userId: Unique identifier for a given User.
      ///   - username: Human-readable name for a User.
      public init(
        organizationId: Swift.String,
        organizationName: Swift.String,
        userId: Swift.String,
        username: Swift.String
      ) {
        self.organizationId = organizationId
        self.organizationName = organizationName
        self.userId = userId
        self.username = username
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
        case organizationName
        case userId
        case username
      }
    }
    /// - Remark: Generated from `#/components/schemas/HashFunction`.
    @frozen public enum HashFunction: String, Codable, Hashable, Sendable, CaseIterable {
      case HASH_FUNCTION_NO_OP = "HASH_FUNCTION_NO_OP"
      case HASH_FUNCTION_SHA256 = "HASH_FUNCTION_SHA256"
      case HASH_FUNCTION_KECCAK256 = "HASH_FUNCTION_KECCAK256"
      case HASH_FUNCTION_NOT_APPLICABLE = "HASH_FUNCTION_NOT_APPLICABLE"
    }
    /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyIntent`.
    public struct ImportPrivateKeyIntent: Codable, Hashable, Sendable {
      /// The ID of the User importing a Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyIntent/userId`.
      public var userId: Swift.String
      /// Human-readable name for a Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyIntent/privateKeyName`.
      public var privateKeyName: Swift.String
      /// Bundle containing a raw private key encrypted to the enclave's target public key.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyIntent/encryptedBundle`.
      public var encryptedBundle: Swift.String
      /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyIntent/curve`.
      public var curve: Components.Schemas.Curve
      /// Cryptocurrency-specific formats for a derived address (e.g., Ethereum).
      ///
      /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyIntent/addressFormats`.
      public var addressFormats: [Components.Schemas.AddressFormat]
      /// Creates a new `ImportPrivateKeyIntent`.
      ///
      /// - Parameters:
      ///   - userId: The ID of the User importing a Private Key.
      ///   - privateKeyName: Human-readable name for a Private Key.
      ///   - encryptedBundle: Bundle containing a raw private key encrypted to the enclave's target public key.
      ///   - curve:
      ///   - addressFormats: Cryptocurrency-specific formats for a derived address (e.g., Ethereum).
      public init(
        userId: Swift.String,
        privateKeyName: Swift.String,
        encryptedBundle: Swift.String,
        curve: Components.Schemas.Curve,
        addressFormats: [Components.Schemas.AddressFormat]
      ) {
        self.userId = userId
        self.privateKeyName = privateKeyName
        self.encryptedBundle = encryptedBundle
        self.curve = curve
        self.addressFormats = addressFormats
      }
      public enum CodingKeys: String, CodingKey {
        case userId
        case privateKeyName
        case encryptedBundle
        case curve
        case addressFormats
      }
    }
    /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyRequest`.
    public struct ImportPrivateKeyRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_IMPORT_PRIVATE_KEY = "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY"
      }
      /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyRequest/type`.
      public var _type: Components.Schemas.ImportPrivateKeyRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyRequest/parameters`.
      public var parameters: Components.Schemas.ImportPrivateKeyIntent
      /// Creates a new `ImportPrivateKeyRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.ImportPrivateKeyRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.ImportPrivateKeyIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyResult`.
    public struct ImportPrivateKeyResult: Codable, Hashable, Sendable {
      /// Unique identifier for a Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyResult/privateKeyId`.
      public var privateKeyId: Swift.String
      /// A list of addresses.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportPrivateKeyResult/addresses`.
      public var addresses: [Components.Schemas.activity_period_v1_period_Address]
      /// Creates a new `ImportPrivateKeyResult`.
      ///
      /// - Parameters:
      ///   - privateKeyId: Unique identifier for a Private Key.
      ///   - addresses: A list of addresses.
      public init(
        privateKeyId: Swift.String,
        addresses: [Components.Schemas.activity_period_v1_period_Address]
      ) {
        self.privateKeyId = privateKeyId
        self.addresses = addresses
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyId
        case addresses
      }
    }
    /// - Remark: Generated from `#/components/schemas/ImportWalletIntent`.
    public struct ImportWalletIntent: Codable, Hashable, Sendable {
      /// The ID of the User importing a Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportWalletIntent/userId`.
      public var userId: Swift.String
      /// Human-readable name for a Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportWalletIntent/walletName`.
      public var walletName: Swift.String
      /// Bundle containing a wallet mnemonic encrypted to the enclave's target public key.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportWalletIntent/encryptedBundle`.
      public var encryptedBundle: Swift.String
      /// A list of wallet Accounts.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportWalletIntent/accounts`.
      public var accounts: [Components.Schemas.WalletAccountParams]
      /// Creates a new `ImportWalletIntent`.
      ///
      /// - Parameters:
      ///   - userId: The ID of the User importing a Wallet.
      ///   - walletName: Human-readable name for a Wallet.
      ///   - encryptedBundle: Bundle containing a wallet mnemonic encrypted to the enclave's target public key.
      ///   - accounts: A list of wallet Accounts.
      public init(
        userId: Swift.String,
        walletName: Swift.String,
        encryptedBundle: Swift.String,
        accounts: [Components.Schemas.WalletAccountParams]
      ) {
        self.userId = userId
        self.walletName = walletName
        self.encryptedBundle = encryptedBundle
        self.accounts = accounts
      }
      public enum CodingKeys: String, CodingKey {
        case userId
        case walletName
        case encryptedBundle
        case accounts
      }
    }
    /// - Remark: Generated from `#/components/schemas/ImportWalletRequest`.
    public struct ImportWalletRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/ImportWalletRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_IMPORT_WALLET = "ACTIVITY_TYPE_IMPORT_WALLET"
      }
      /// - Remark: Generated from `#/components/schemas/ImportWalletRequest/type`.
      public var _type: Components.Schemas.ImportWalletRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportWalletRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportWalletRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/ImportWalletRequest/parameters`.
      public var parameters: Components.Schemas.ImportWalletIntent
      /// Creates a new `ImportWalletRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.ImportWalletRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.ImportWalletIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/ImportWalletResult`.
    public struct ImportWalletResult: Codable, Hashable, Sendable {
      /// Unique identifier for a Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportWalletResult/walletId`.
      public var walletId: Swift.String
      /// A list of account addresses.
      ///
      /// - Remark: Generated from `#/components/schemas/ImportWalletResult/addresses`.
      public var addresses: [Swift.String]
      /// Creates a new `ImportWalletResult`.
      ///
      /// - Parameters:
      ///   - walletId: Unique identifier for a Wallet.
      ///   - addresses: A list of account addresses.
      public init(
        walletId: Swift.String,
        addresses: [Swift.String]
      ) {
        self.walletId = walletId
        self.addresses = addresses
      }
      public enum CodingKeys: String, CodingKey {
        case walletId
        case addresses
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitImportPrivateKeyIntent`.
    public struct InitImportPrivateKeyIntent: Codable, Hashable, Sendable {
      /// The ID of the User importing a Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/InitImportPrivateKeyIntent/userId`.
      public var userId: Swift.String
      /// Creates a new `InitImportPrivateKeyIntent`.
      ///
      /// - Parameters:
      ///   - userId: The ID of the User importing a Private Key.
      public init(userId: Swift.String) {
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitImportPrivateKeyRequest`.
    public struct InitImportPrivateKeyRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/InitImportPrivateKeyRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY = "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY"
      }
      /// - Remark: Generated from `#/components/schemas/InitImportPrivateKeyRequest/type`.
      public var _type: Components.Schemas.InitImportPrivateKeyRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/InitImportPrivateKeyRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/InitImportPrivateKeyRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/InitImportPrivateKeyRequest/parameters`.
      public var parameters: Components.Schemas.InitImportPrivateKeyIntent
      /// Creates a new `InitImportPrivateKeyRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.InitImportPrivateKeyRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.InitImportPrivateKeyIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitImportPrivateKeyResult`.
    public struct InitImportPrivateKeyResult: Codable, Hashable, Sendable {
      /// Import bundle containing a public key and signature to use for importing client data.
      ///
      /// - Remark: Generated from `#/components/schemas/InitImportPrivateKeyResult/importBundle`.
      public var importBundle: Swift.String
      /// Creates a new `InitImportPrivateKeyResult`.
      ///
      /// - Parameters:
      ///   - importBundle: Import bundle containing a public key and signature to use for importing client data.
      public init(importBundle: Swift.String) {
        self.importBundle = importBundle
      }
      public enum CodingKeys: String, CodingKey {
        case importBundle
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitImportWalletIntent`.
    public struct InitImportWalletIntent: Codable, Hashable, Sendable {
      /// The ID of the User importing a Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/InitImportWalletIntent/userId`.
      public var userId: Swift.String
      /// Creates a new `InitImportWalletIntent`.
      ///
      /// - Parameters:
      ///   - userId: The ID of the User importing a Wallet.
      public init(userId: Swift.String) {
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitImportWalletRequest`.
    public struct InitImportWalletRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/InitImportWalletRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_INIT_IMPORT_WALLET = "ACTIVITY_TYPE_INIT_IMPORT_WALLET"
      }
      /// - Remark: Generated from `#/components/schemas/InitImportWalletRequest/type`.
      public var _type: Components.Schemas.InitImportWalletRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/InitImportWalletRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/InitImportWalletRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/InitImportWalletRequest/parameters`.
      public var parameters: Components.Schemas.InitImportWalletIntent
      /// Creates a new `InitImportWalletRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.InitImportWalletRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.InitImportWalletIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitImportWalletResult`.
    public struct InitImportWalletResult: Codable, Hashable, Sendable {
      /// Import bundle containing a public key and signature to use for importing client data.
      ///
      /// - Remark: Generated from `#/components/schemas/InitImportWalletResult/importBundle`.
      public var importBundle: Swift.String
      /// Creates a new `InitImportWalletResult`.
      ///
      /// - Parameters:
      ///   - importBundle: Import bundle containing a public key and signature to use for importing client data.
      public init(importBundle: Swift.String) {
        self.importBundle = importBundle
      }
      public enum CodingKeys: String, CodingKey {
        case importBundle
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntent`.
    public struct InitOtpAuthIntent: Codable, Hashable, Sendable {
      /// Enum to specifiy whether to send OTP via SMS or email
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntent/otpType`.
      public var otpType: Swift.String
      /// Email or phone number to send the OTP code to
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntent/contact`.
      public var contact: Swift.String
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntent/emailCustomization`.
      public var emailCustomization: Components.Schemas.EmailCustomizationParams?
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntent/smsCustomization`.
      public var smsCustomization: Components.Schemas.SmsCustomizationParams?
      /// Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntent/userIdentifier`.
      public var userIdentifier: Swift.String?
      /// Optional custom email address from which to send the OTP email
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntent/sendFromEmailAddress`.
      public var sendFromEmailAddress: Swift.String?
      /// Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntent/sendFromEmailSenderName`.
      public var sendFromEmailSenderName: Swift.String?
      /// Optional custom email address to use as reply-to
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntent/replyToEmailAddress`.
      public var replyToEmailAddress: Swift.String?
      /// Creates a new `InitOtpAuthIntent`.
      ///
      /// - Parameters:
      ///   - otpType: Enum to specifiy whether to send OTP via SMS or email
      ///   - contact: Email or phone number to send the OTP code to
      ///   - emailCustomization:
      ///   - smsCustomization:
      ///   - userIdentifier: Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
      ///   - sendFromEmailAddress: Optional custom email address from which to send the OTP email
      ///   - sendFromEmailSenderName: Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
      ///   - replyToEmailAddress: Optional custom email address to use as reply-to
      public init(
        otpType: Swift.String,
        contact: Swift.String,
        emailCustomization: Components.Schemas.EmailCustomizationParams? = nil,
        smsCustomization: Components.Schemas.SmsCustomizationParams? = nil,
        userIdentifier: Swift.String? = nil,
        sendFromEmailAddress: Swift.String? = nil,
        sendFromEmailSenderName: Swift.String? = nil,
        replyToEmailAddress: Swift.String? = nil
      ) {
        self.otpType = otpType
        self.contact = contact
        self.emailCustomization = emailCustomization
        self.smsCustomization = smsCustomization
        self.userIdentifier = userIdentifier
        self.sendFromEmailAddress = sendFromEmailAddress
        self.sendFromEmailSenderName = sendFromEmailSenderName
        self.replyToEmailAddress = replyToEmailAddress
      }
      public enum CodingKeys: String, CodingKey {
        case otpType
        case contact
        case emailCustomization
        case smsCustomization
        case userIdentifier
        case sendFromEmailAddress
        case sendFromEmailSenderName
        case replyToEmailAddress
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntentV2`.
    public struct InitOtpAuthIntentV2: Codable, Hashable, Sendable {
      /// Enum to specifiy whether to send OTP via SMS or email
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntentV2/otpType`.
      public var otpType: Swift.String
      /// Email or phone number to send the OTP code to
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntentV2/contact`.
      public var contact: Swift.String
      /// Optional length of the OTP code. Default = 9
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntentV2/otpLength`.
      public var otpLength: Swift.Int32?
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntentV2/emailCustomization`.
      public var emailCustomization: Components.Schemas.EmailCustomizationParams?
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntentV2/smsCustomization`.
      public var smsCustomization: Components.Schemas.SmsCustomizationParams?
      /// Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntentV2/userIdentifier`.
      public var userIdentifier: Swift.String?
      /// Optional custom email address from which to send the OTP email
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntentV2/sendFromEmailAddress`.
      public var sendFromEmailAddress: Swift.String?
      /// Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntentV2/alphanumeric`.
      public var alphanumeric: Swift.Bool?
      /// Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntentV2/sendFromEmailSenderName`.
      public var sendFromEmailSenderName: Swift.String?
      /// Optional custom email address to use as reply-to
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthIntentV2/replyToEmailAddress`.
      public var replyToEmailAddress: Swift.String?
      /// Creates a new `InitOtpAuthIntentV2`.
      ///
      /// - Parameters:
      ///   - otpType: Enum to specifiy whether to send OTP via SMS or email
      ///   - contact: Email or phone number to send the OTP code to
      ///   - otpLength: Optional length of the OTP code. Default = 9
      ///   - emailCustomization:
      ///   - smsCustomization:
      ///   - userIdentifier: Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
      ///   - sendFromEmailAddress: Optional custom email address from which to send the OTP email
      ///   - alphanumeric: Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true
      ///   - sendFromEmailSenderName: Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
      ///   - replyToEmailAddress: Optional custom email address to use as reply-to
      public init(
        otpType: Swift.String,
        contact: Swift.String,
        otpLength: Swift.Int32? = nil,
        emailCustomization: Components.Schemas.EmailCustomizationParams? = nil,
        smsCustomization: Components.Schemas.SmsCustomizationParams? = nil,
        userIdentifier: Swift.String? = nil,
        sendFromEmailAddress: Swift.String? = nil,
        alphanumeric: Swift.Bool? = nil,
        sendFromEmailSenderName: Swift.String? = nil,
        replyToEmailAddress: Swift.String? = nil
      ) {
        self.otpType = otpType
        self.contact = contact
        self.otpLength = otpLength
        self.emailCustomization = emailCustomization
        self.smsCustomization = smsCustomization
        self.userIdentifier = userIdentifier
        self.sendFromEmailAddress = sendFromEmailAddress
        self.alphanumeric = alphanumeric
        self.sendFromEmailSenderName = sendFromEmailSenderName
        self.replyToEmailAddress = replyToEmailAddress
      }
      public enum CodingKeys: String, CodingKey {
        case otpType
        case contact
        case otpLength
        case emailCustomization
        case smsCustomization
        case userIdentifier
        case sendFromEmailAddress
        case alphanumeric
        case sendFromEmailSenderName
        case replyToEmailAddress
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitOtpAuthRequest`.
    public struct InitOtpAuthRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_INIT_OTP_AUTH_V2 = "ACTIVITY_TYPE_INIT_OTP_AUTH_V2"
      }
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthRequest/type`.
      public var _type: Components.Schemas.InitOtpAuthRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthRequest/parameters`.
      public var parameters: Components.Schemas.InitOtpAuthIntentV2
      /// Creates a new `InitOtpAuthRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.InitOtpAuthRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.InitOtpAuthIntentV2
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitOtpAuthResult`.
    public struct InitOtpAuthResult: Codable, Hashable, Sendable {
      /// Unique identifier for an OTP authentication
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthResult/otpId`.
      public var otpId: Swift.String
      /// Creates a new `InitOtpAuthResult`.
      ///
      /// - Parameters:
      ///   - otpId: Unique identifier for an OTP authentication
      public init(otpId: Swift.String) {
        self.otpId = otpId
      }
      public enum CodingKeys: String, CodingKey {
        case otpId
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitOtpAuthResultV2`.
    public struct InitOtpAuthResultV2: Codable, Hashable, Sendable {
      /// Unique identifier for an OTP authentication
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpAuthResultV2/otpId`.
      public var otpId: Swift.String
      /// Creates a new `InitOtpAuthResultV2`.
      ///
      /// - Parameters:
      ///   - otpId: Unique identifier for an OTP authentication
      public init(otpId: Swift.String) {
        self.otpId = otpId
      }
      public enum CodingKeys: String, CodingKey {
        case otpId
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitOtpIntent`.
    public struct InitOtpIntent: Codable, Hashable, Sendable {
      /// Whether to send OTP via SMS or email. Possible values: OTP_TYPE_SMS, OTP_TYPE_EMAIL
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpIntent/otpType`.
      public var otpType: Swift.String
      /// Email or phone number to send the OTP code to
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpIntent/contact`.
      public var contact: Swift.String
      /// Optional length of the OTP code. Default = 9
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpIntent/otpLength`.
      public var otpLength: Swift.Int32?
      /// - Remark: Generated from `#/components/schemas/InitOtpIntent/emailCustomization`.
      public var emailCustomization: Components.Schemas.EmailCustomizationParams?
      /// - Remark: Generated from `#/components/schemas/InitOtpIntent/smsCustomization`.
      public var smsCustomization: Components.Schemas.SmsCustomizationParams?
      /// Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpIntent/userIdentifier`.
      public var userIdentifier: Swift.String?
      /// Optional custom email address from which to send the OTP email
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpIntent/sendFromEmailAddress`.
      public var sendFromEmailAddress: Swift.String?
      /// Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpIntent/alphanumeric`.
      public var alphanumeric: Swift.Bool?
      /// Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpIntent/sendFromEmailSenderName`.
      public var sendFromEmailSenderName: Swift.String?
      /// Expiration window (in seconds) indicating how long the OTP is valid for. If not provided, a default of 5 minutes will be used. Maximum value is 600 seconds (10 minutes)
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpIntent/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// Optional custom email address to use as reply-to
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpIntent/replyToEmailAddress`.
      public var replyToEmailAddress: Swift.String?
      /// Creates a new `InitOtpIntent`.
      ///
      /// - Parameters:
      ///   - otpType: Whether to send OTP via SMS or email. Possible values: OTP_TYPE_SMS, OTP_TYPE_EMAIL
      ///   - contact: Email or phone number to send the OTP code to
      ///   - otpLength: Optional length of the OTP code. Default = 9
      ///   - emailCustomization:
      ///   - smsCustomization:
      ///   - userIdentifier: Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
      ///   - sendFromEmailAddress: Optional custom email address from which to send the OTP email
      ///   - alphanumeric: Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true
      ///   - sendFromEmailSenderName: Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
      ///   - expirationSeconds: Expiration window (in seconds) indicating how long the OTP is valid for. If not provided, a default of 5 minutes will be used. Maximum value is 600 seconds (10 minutes)
      ///   - replyToEmailAddress: Optional custom email address to use as reply-to
      public init(
        otpType: Swift.String,
        contact: Swift.String,
        otpLength: Swift.Int32? = nil,
        emailCustomization: Components.Schemas.EmailCustomizationParams? = nil,
        smsCustomization: Components.Schemas.SmsCustomizationParams? = nil,
        userIdentifier: Swift.String? = nil,
        sendFromEmailAddress: Swift.String? = nil,
        alphanumeric: Swift.Bool? = nil,
        sendFromEmailSenderName: Swift.String? = nil,
        expirationSeconds: Swift.String? = nil,
        replyToEmailAddress: Swift.String? = nil
      ) {
        self.otpType = otpType
        self.contact = contact
        self.otpLength = otpLength
        self.emailCustomization = emailCustomization
        self.smsCustomization = smsCustomization
        self.userIdentifier = userIdentifier
        self.sendFromEmailAddress = sendFromEmailAddress
        self.alphanumeric = alphanumeric
        self.sendFromEmailSenderName = sendFromEmailSenderName
        self.expirationSeconds = expirationSeconds
        self.replyToEmailAddress = replyToEmailAddress
      }
      public enum CodingKeys: String, CodingKey {
        case otpType
        case contact
        case otpLength
        case emailCustomization
        case smsCustomization
        case userIdentifier
        case sendFromEmailAddress
        case alphanumeric
        case sendFromEmailSenderName
        case expirationSeconds
        case replyToEmailAddress
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitOtpRequest`.
    public struct InitOtpRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/InitOtpRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_INIT_OTP = "ACTIVITY_TYPE_INIT_OTP"
      }
      /// - Remark: Generated from `#/components/schemas/InitOtpRequest/type`.
      public var _type: Components.Schemas.InitOtpRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/InitOtpRequest/parameters`.
      public var parameters: Components.Schemas.InitOtpIntent
      /// Creates a new `InitOtpRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.InitOtpRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.InitOtpIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitOtpResult`.
    public struct InitOtpResult: Codable, Hashable, Sendable {
      /// Unique identifier for an OTP authentication
      ///
      /// - Remark: Generated from `#/components/schemas/InitOtpResult/otpId`.
      public var otpId: Swift.String
      /// Creates a new `InitOtpResult`.
      ///
      /// - Parameters:
      ///   - otpId: Unique identifier for an OTP authentication
      public init(otpId: Swift.String) {
        self.otpId = otpId
      }
      public enum CodingKeys: String, CodingKey {
        case otpId
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitUserEmailRecoveryIntent`.
    public struct InitUserEmailRecoveryIntent: Codable, Hashable, Sendable {
      /// Email of the user starting recovery
      ///
      /// - Remark: Generated from `#/components/schemas/InitUserEmailRecoveryIntent/email`.
      public var email: Swift.String
      /// Client-side public key generated by the user, to which the recovery bundle will be encrypted.
      ///
      /// - Remark: Generated from `#/components/schemas/InitUserEmailRecoveryIntent/targetPublicKey`.
      public var targetPublicKey: Swift.String
      /// Expiration window (in seconds) indicating how long the recovery credential is valid for. If not provided, a default of 15 minutes will be used.
      ///
      /// - Remark: Generated from `#/components/schemas/InitUserEmailRecoveryIntent/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// - Remark: Generated from `#/components/schemas/InitUserEmailRecoveryIntent/emailCustomization`.
      public var emailCustomization: Components.Schemas.EmailCustomizationParams?
      /// Creates a new `InitUserEmailRecoveryIntent`.
      ///
      /// - Parameters:
      ///   - email: Email of the user starting recovery
      ///   - targetPublicKey: Client-side public key generated by the user, to which the recovery bundle will be encrypted.
      ///   - expirationSeconds: Expiration window (in seconds) indicating how long the recovery credential is valid for. If not provided, a default of 15 minutes will be used.
      ///   - emailCustomization:
      public init(
        email: Swift.String,
        targetPublicKey: Swift.String,
        expirationSeconds: Swift.String? = nil,
        emailCustomization: Components.Schemas.EmailCustomizationParams? = nil
      ) {
        self.email = email
        self.targetPublicKey = targetPublicKey
        self.expirationSeconds = expirationSeconds
        self.emailCustomization = emailCustomization
      }
      public enum CodingKeys: String, CodingKey {
        case email
        case targetPublicKey
        case expirationSeconds
        case emailCustomization
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitUserEmailRecoveryRequest`.
    public struct InitUserEmailRecoveryRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/InitUserEmailRecoveryRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY = "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY"
      }
      /// - Remark: Generated from `#/components/schemas/InitUserEmailRecoveryRequest/type`.
      public var _type: Components.Schemas.InitUserEmailRecoveryRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/InitUserEmailRecoveryRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/InitUserEmailRecoveryRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/InitUserEmailRecoveryRequest/parameters`.
      public var parameters: Components.Schemas.InitUserEmailRecoveryIntent
      /// Creates a new `InitUserEmailRecoveryRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.InitUserEmailRecoveryRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.InitUserEmailRecoveryIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/InitUserEmailRecoveryResult`.
    public struct InitUserEmailRecoveryResult: Codable, Hashable, Sendable {
      /// Unique identifier for the user being recovered.
      ///
      /// - Remark: Generated from `#/components/schemas/InitUserEmailRecoveryResult/userId`.
      public var userId: Swift.String
      /// Creates a new `InitUserEmailRecoveryResult`.
      ///
      /// - Parameters:
      ///   - userId: Unique identifier for the user being recovered.
      public init(userId: Swift.String) {
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/Intent`.
    public struct Intent: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/Intent/createOrganizationIntent`.
      public var createOrganizationIntent: Components.Schemas.CreateOrganizationIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createAuthenticatorsIntent`.
      public var createAuthenticatorsIntent: Components.Schemas.CreateAuthenticatorsIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createUsersIntent`.
      public var createUsersIntent: Components.Schemas.CreateUsersIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createPrivateKeysIntent`.
      public var createPrivateKeysIntent: Components.Schemas.CreatePrivateKeysIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/signRawPayloadIntent`.
      public var signRawPayloadIntent: Components.Schemas.SignRawPayloadIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createInvitationsIntent`.
      public var createInvitationsIntent: Components.Schemas.CreateInvitationsIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/acceptInvitationIntent`.
      public var acceptInvitationIntent: Components.Schemas.AcceptInvitationIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createPolicyIntent`.
      public var createPolicyIntent: Components.Schemas.CreatePolicyIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/disablePrivateKeyIntent`.
      public var disablePrivateKeyIntent: Components.Schemas.DisablePrivateKeyIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/deleteUsersIntent`.
      public var deleteUsersIntent: Components.Schemas.DeleteUsersIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/deleteAuthenticatorsIntent`.
      public var deleteAuthenticatorsIntent: Components.Schemas.DeleteAuthenticatorsIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/deleteInvitationIntent`.
      public var deleteInvitationIntent: Components.Schemas.DeleteInvitationIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/deleteOrganizationIntent`.
      public var deleteOrganizationIntent: Components.Schemas.DeleteOrganizationIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/deletePolicyIntent`.
      public var deletePolicyIntent: Components.Schemas.DeletePolicyIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createUserTagIntent`.
      public var createUserTagIntent: Components.Schemas.CreateUserTagIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/deleteUserTagsIntent`.
      public var deleteUserTagsIntent: Components.Schemas.DeleteUserTagsIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/signTransactionIntent`.
      public var signTransactionIntent: Components.Schemas.SignTransactionIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createApiKeysIntent`.
      public var createApiKeysIntent: Components.Schemas.CreateApiKeysIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/deleteApiKeysIntent`.
      public var deleteApiKeysIntent: Components.Schemas.DeleteApiKeysIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/approveActivityIntent`.
      public var approveActivityIntent: Components.Schemas.ApproveActivityIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/rejectActivityIntent`.
      public var rejectActivityIntent: Components.Schemas.RejectActivityIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createPrivateKeyTagIntent`.
      public var createPrivateKeyTagIntent: Components.Schemas.CreatePrivateKeyTagIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/deletePrivateKeyTagsIntent`.
      public var deletePrivateKeyTagsIntent: Components.Schemas.DeletePrivateKeyTagsIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createPolicyIntentV2`.
      public var createPolicyIntentV2: Components.Schemas.CreatePolicyIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/setPaymentMethodIntent`.
      public var setPaymentMethodIntent: Components.Schemas.SetPaymentMethodIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/activateBillingTierIntent`.
      public var activateBillingTierIntent: Components.Schemas.ActivateBillingTierIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/deletePaymentMethodIntent`.
      public var deletePaymentMethodIntent: Components.Schemas.DeletePaymentMethodIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createPolicyIntentV3`.
      public var createPolicyIntentV3: Components.Schemas.CreatePolicyIntentV3?
      /// - Remark: Generated from `#/components/schemas/Intent/createApiOnlyUsersIntent`.
      public var createApiOnlyUsersIntent: Components.Schemas.CreateApiOnlyUsersIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/updateRootQuorumIntent`.
      public var updateRootQuorumIntent: Components.Schemas.UpdateRootQuorumIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/updateUserTagIntent`.
      public var updateUserTagIntent: Components.Schemas.UpdateUserTagIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/updatePrivateKeyTagIntent`.
      public var updatePrivateKeyTagIntent: Components.Schemas.UpdatePrivateKeyTagIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createAuthenticatorsIntentV2`.
      public var createAuthenticatorsIntentV2: Components.Schemas.CreateAuthenticatorsIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/acceptInvitationIntentV2`.
      public var acceptInvitationIntentV2: Components.Schemas.AcceptInvitationIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/createOrganizationIntentV2`.
      public var createOrganizationIntentV2: Components.Schemas.CreateOrganizationIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/createUsersIntentV2`.
      public var createUsersIntentV2: Components.Schemas.CreateUsersIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/createSubOrganizationIntent`.
      public var createSubOrganizationIntent: Components.Schemas.CreateSubOrganizationIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createSubOrganizationIntentV2`.
      public var createSubOrganizationIntentV2: Components.Schemas.CreateSubOrganizationIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/updateAllowedOriginsIntent`.
      public var updateAllowedOriginsIntent: Components.Schemas.UpdateAllowedOriginsIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createPrivateKeysIntentV2`.
      public var createPrivateKeysIntentV2: Components.Schemas.CreatePrivateKeysIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/updateUserIntent`.
      public var updateUserIntent: Components.Schemas.UpdateUserIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/updatePolicyIntent`.
      public var updatePolicyIntent: Components.Schemas.UpdatePolicyIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/setPaymentMethodIntentV2`.
      public var setPaymentMethodIntentV2: Components.Schemas.SetPaymentMethodIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/createSubOrganizationIntentV3`.
      public var createSubOrganizationIntentV3: Components.Schemas.CreateSubOrganizationIntentV3?
      /// - Remark: Generated from `#/components/schemas/Intent/createWalletIntent`.
      public var createWalletIntent: Components.Schemas.CreateWalletIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createWalletAccountsIntent`.
      public var createWalletAccountsIntent: Components.Schemas.CreateWalletAccountsIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/initUserEmailRecoveryIntent`.
      public var initUserEmailRecoveryIntent: Components.Schemas.InitUserEmailRecoveryIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/recoverUserIntent`.
      public var recoverUserIntent: Components.Schemas.RecoverUserIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/setOrganizationFeatureIntent`.
      public var setOrganizationFeatureIntent: Components.Schemas.SetOrganizationFeatureIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/removeOrganizationFeatureIntent`.
      public var removeOrganizationFeatureIntent:
        Components.Schemas.RemoveOrganizationFeatureIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/signRawPayloadIntentV2`.
      public var signRawPayloadIntentV2: Components.Schemas.SignRawPayloadIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/signTransactionIntentV2`.
      public var signTransactionIntentV2: Components.Schemas.SignTransactionIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/exportPrivateKeyIntent`.
      public var exportPrivateKeyIntent: Components.Schemas.ExportPrivateKeyIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/exportWalletIntent`.
      public var exportWalletIntent: Components.Schemas.ExportWalletIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createSubOrganizationIntentV4`.
      public var createSubOrganizationIntentV4: Components.Schemas.CreateSubOrganizationIntentV4?
      /// - Remark: Generated from `#/components/schemas/Intent/emailAuthIntent`.
      public var emailAuthIntent: Components.Schemas.EmailAuthIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/exportWalletAccountIntent`.
      public var exportWalletAccountIntent: Components.Schemas.ExportWalletAccountIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/initImportWalletIntent`.
      public var initImportWalletIntent: Components.Schemas.InitImportWalletIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/importWalletIntent`.
      public var importWalletIntent: Components.Schemas.ImportWalletIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/initImportPrivateKeyIntent`.
      public var initImportPrivateKeyIntent: Components.Schemas.InitImportPrivateKeyIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/importPrivateKeyIntent`.
      public var importPrivateKeyIntent: Components.Schemas.ImportPrivateKeyIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createPoliciesIntent`.
      public var createPoliciesIntent: Components.Schemas.CreatePoliciesIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/signRawPayloadsIntent`.
      public var signRawPayloadsIntent: Components.Schemas.SignRawPayloadsIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createReadOnlySessionIntent`.
      public var createReadOnlySessionIntent: Components.Schemas.CreateReadOnlySessionIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createOauthProvidersIntent`.
      public var createOauthProvidersIntent: Components.Schemas.CreateOauthProvidersIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/deleteOauthProvidersIntent`.
      public var deleteOauthProvidersIntent: Components.Schemas.DeleteOauthProvidersIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createSubOrganizationIntentV5`.
      public var createSubOrganizationIntentV5: Components.Schemas.CreateSubOrganizationIntentV5?
      /// - Remark: Generated from `#/components/schemas/Intent/oauthIntent`.
      public var oauthIntent: Components.Schemas.OauthIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createApiKeysIntentV2`.
      public var createApiKeysIntentV2: Components.Schemas.CreateApiKeysIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/createReadWriteSessionIntent`.
      public var createReadWriteSessionIntent: Components.Schemas.CreateReadWriteSessionIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/emailAuthIntentV2`.
      public var emailAuthIntentV2: Components.Schemas.EmailAuthIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/createSubOrganizationIntentV6`.
      public var createSubOrganizationIntentV6: Components.Schemas.CreateSubOrganizationIntentV6?
      /// - Remark: Generated from `#/components/schemas/Intent/deletePrivateKeysIntent`.
      public var deletePrivateKeysIntent: Components.Schemas.DeletePrivateKeysIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/deleteWalletsIntent`.
      public var deleteWalletsIntent: Components.Schemas.DeleteWalletsIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createReadWriteSessionIntentV2`.
      public var createReadWriteSessionIntentV2: Components.Schemas.CreateReadWriteSessionIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/deleteSubOrganizationIntent`.
      public var deleteSubOrganizationIntent: Components.Schemas.DeleteSubOrganizationIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/initOtpAuthIntent`.
      public var initOtpAuthIntent: Components.Schemas.InitOtpAuthIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/otpAuthIntent`.
      public var otpAuthIntent: Components.Schemas.OtpAuthIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/createSubOrganizationIntentV7`.
      public var createSubOrganizationIntentV7: Components.Schemas.CreateSubOrganizationIntentV7?
      /// - Remark: Generated from `#/components/schemas/Intent/updateWalletIntent`.
      public var updateWalletIntent: Components.Schemas.UpdateWalletIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/updatePolicyIntentV2`.
      public var updatePolicyIntentV2: Components.Schemas.UpdatePolicyIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/createUsersIntentV3`.
      public var createUsersIntentV3: Components.Schemas.CreateUsersIntentV3?
      /// - Remark: Generated from `#/components/schemas/Intent/initOtpAuthIntentV2`.
      public var initOtpAuthIntentV2: Components.Schemas.InitOtpAuthIntentV2?
      /// - Remark: Generated from `#/components/schemas/Intent/initOtpIntent`.
      public var initOtpIntent: Components.Schemas.InitOtpIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/verifyOtpIntent`.
      public var verifyOtpIntent: Components.Schemas.VerifyOtpIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/otpLoginIntent`.
      public var otpLoginIntent: Components.Schemas.OtpLoginIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/stampLoginIntent`.
      public var stampLoginIntent: Components.Schemas.StampLoginIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/oauthLoginIntent`.
      public var oauthLoginIntent: Components.Schemas.OauthLoginIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/updateUserNameIntent`.
      public var updateUserNameIntent: Components.Schemas.UpdateUserNameIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/updateUserEmailIntent`.
      public var updateUserEmailIntent: Components.Schemas.UpdateUserEmailIntent?
      /// - Remark: Generated from `#/components/schemas/Intent/updateUserPhoneNumberIntent`.
      public var updateUserPhoneNumberIntent: Components.Schemas.UpdateUserPhoneNumberIntent?
      /// Creates a new `Intent`.
      ///
      /// - Parameters:
      ///   - createOrganizationIntent:
      ///   - createAuthenticatorsIntent:
      ///   - createUsersIntent:
      ///   - createPrivateKeysIntent:
      ///   - signRawPayloadIntent:
      ///   - createInvitationsIntent:
      ///   - acceptInvitationIntent:
      ///   - createPolicyIntent:
      ///   - disablePrivateKeyIntent:
      ///   - deleteUsersIntent:
      ///   - deleteAuthenticatorsIntent:
      ///   - deleteInvitationIntent:
      ///   - deleteOrganizationIntent:
      ///   - deletePolicyIntent:
      ///   - createUserTagIntent:
      ///   - deleteUserTagsIntent:
      ///   - signTransactionIntent:
      ///   - createApiKeysIntent:
      ///   - deleteApiKeysIntent:
      ///   - approveActivityIntent:
      ///   - rejectActivityIntent:
      ///   - createPrivateKeyTagIntent:
      ///   - deletePrivateKeyTagsIntent:
      ///   - createPolicyIntentV2:
      ///   - setPaymentMethodIntent:
      ///   - activateBillingTierIntent:
      ///   - deletePaymentMethodIntent:
      ///   - createPolicyIntentV3:
      ///   - createApiOnlyUsersIntent:
      ///   - updateRootQuorumIntent:
      ///   - updateUserTagIntent:
      ///   - updatePrivateKeyTagIntent:
      ///   - createAuthenticatorsIntentV2:
      ///   - acceptInvitationIntentV2:
      ///   - createOrganizationIntentV2:
      ///   - createUsersIntentV2:
      ///   - createSubOrganizationIntent:
      ///   - createSubOrganizationIntentV2:
      ///   - updateAllowedOriginsIntent:
      ///   - createPrivateKeysIntentV2:
      ///   - updateUserIntent:
      ///   - updatePolicyIntent:
      ///   - setPaymentMethodIntentV2:
      ///   - createSubOrganizationIntentV3:
      ///   - createWalletIntent:
      ///   - createWalletAccountsIntent:
      ///   - initUserEmailRecoveryIntent:
      ///   - recoverUserIntent:
      ///   - setOrganizationFeatureIntent:
      ///   - removeOrganizationFeatureIntent:
      ///   - signRawPayloadIntentV2:
      ///   - signTransactionIntentV2:
      ///   - exportPrivateKeyIntent:
      ///   - exportWalletIntent:
      ///   - createSubOrganizationIntentV4:
      ///   - emailAuthIntent:
      ///   - exportWalletAccountIntent:
      ///   - initImportWalletIntent:
      ///   - importWalletIntent:
      ///   - initImportPrivateKeyIntent:
      ///   - importPrivateKeyIntent:
      ///   - createPoliciesIntent:
      ///   - signRawPayloadsIntent:
      ///   - createReadOnlySessionIntent:
      ///   - createOauthProvidersIntent:
      ///   - deleteOauthProvidersIntent:
      ///   - createSubOrganizationIntentV5:
      ///   - oauthIntent:
      ///   - createApiKeysIntentV2:
      ///   - createReadWriteSessionIntent:
      ///   - emailAuthIntentV2:
      ///   - createSubOrganizationIntentV6:
      ///   - deletePrivateKeysIntent:
      ///   - deleteWalletsIntent:
      ///   - createReadWriteSessionIntentV2:
      ///   - deleteSubOrganizationIntent:
      ///   - initOtpAuthIntent:
      ///   - otpAuthIntent:
      ///   - createSubOrganizationIntentV7:
      ///   - updateWalletIntent:
      ///   - updatePolicyIntentV2:
      ///   - createUsersIntentV3:
      ///   - initOtpAuthIntentV2:
      ///   - initOtpIntent:
      ///   - verifyOtpIntent:
      ///   - otpLoginIntent:
      ///   - stampLoginIntent:
      ///   - oauthLoginIntent:
      ///   - updateUserNameIntent:
      ///   - updateUserEmailIntent:
      ///   - updateUserPhoneNumberIntent:
      public init(
        createOrganizationIntent: Components.Schemas.CreateOrganizationIntent? = nil,
        createAuthenticatorsIntent: Components.Schemas.CreateAuthenticatorsIntent? = nil,
        createUsersIntent: Components.Schemas.CreateUsersIntent? = nil,
        createPrivateKeysIntent: Components.Schemas.CreatePrivateKeysIntent? = nil,
        signRawPayloadIntent: Components.Schemas.SignRawPayloadIntent? = nil,
        createInvitationsIntent: Components.Schemas.CreateInvitationsIntent? = nil,
        acceptInvitationIntent: Components.Schemas.AcceptInvitationIntent? = nil,
        createPolicyIntent: Components.Schemas.CreatePolicyIntent? = nil,
        disablePrivateKeyIntent: Components.Schemas.DisablePrivateKeyIntent? = nil,
        deleteUsersIntent: Components.Schemas.DeleteUsersIntent? = nil,
        deleteAuthenticatorsIntent: Components.Schemas.DeleteAuthenticatorsIntent? = nil,
        deleteInvitationIntent: Components.Schemas.DeleteInvitationIntent? = nil,
        deleteOrganizationIntent: Components.Schemas.DeleteOrganizationIntent? = nil,
        deletePolicyIntent: Components.Schemas.DeletePolicyIntent? = nil,
        createUserTagIntent: Components.Schemas.CreateUserTagIntent? = nil,
        deleteUserTagsIntent: Components.Schemas.DeleteUserTagsIntent? = nil,
        signTransactionIntent: Components.Schemas.SignTransactionIntent? = nil,
        createApiKeysIntent: Components.Schemas.CreateApiKeysIntent? = nil,
        deleteApiKeysIntent: Components.Schemas.DeleteApiKeysIntent? = nil,
        approveActivityIntent: Components.Schemas.ApproveActivityIntent? = nil,
        rejectActivityIntent: Components.Schemas.RejectActivityIntent? = nil,
        createPrivateKeyTagIntent: Components.Schemas.CreatePrivateKeyTagIntent? = nil,
        deletePrivateKeyTagsIntent: Components.Schemas.DeletePrivateKeyTagsIntent? = nil,
        createPolicyIntentV2: Components.Schemas.CreatePolicyIntentV2? = nil,
        setPaymentMethodIntent: Components.Schemas.SetPaymentMethodIntent? = nil,
        activateBillingTierIntent: Components.Schemas.ActivateBillingTierIntent? = nil,
        deletePaymentMethodIntent: Components.Schemas.DeletePaymentMethodIntent? = nil,
        createPolicyIntentV3: Components.Schemas.CreatePolicyIntentV3? = nil,
        createApiOnlyUsersIntent: Components.Schemas.CreateApiOnlyUsersIntent? = nil,
        updateRootQuorumIntent: Components.Schemas.UpdateRootQuorumIntent? = nil,
        updateUserTagIntent: Components.Schemas.UpdateUserTagIntent? = nil,
        updatePrivateKeyTagIntent: Components.Schemas.UpdatePrivateKeyTagIntent? = nil,
        createAuthenticatorsIntentV2: Components.Schemas.CreateAuthenticatorsIntentV2? = nil,
        acceptInvitationIntentV2: Components.Schemas.AcceptInvitationIntentV2? = nil,
        createOrganizationIntentV2: Components.Schemas.CreateOrganizationIntentV2? = nil,
        createUsersIntentV2: Components.Schemas.CreateUsersIntentV2? = nil,
        createSubOrganizationIntent: Components.Schemas.CreateSubOrganizationIntent? = nil,
        createSubOrganizationIntentV2: Components.Schemas.CreateSubOrganizationIntentV2? = nil,
        updateAllowedOriginsIntent: Components.Schemas.UpdateAllowedOriginsIntent? = nil,
        createPrivateKeysIntentV2: Components.Schemas.CreatePrivateKeysIntentV2? = nil,
        updateUserIntent: Components.Schemas.UpdateUserIntent? = nil,
        updatePolicyIntent: Components.Schemas.UpdatePolicyIntent? = nil,
        setPaymentMethodIntentV2: Components.Schemas.SetPaymentMethodIntentV2? = nil,
        createSubOrganizationIntentV3: Components.Schemas.CreateSubOrganizationIntentV3? = nil,
        createWalletIntent: Components.Schemas.CreateWalletIntent? = nil,
        createWalletAccountsIntent: Components.Schemas.CreateWalletAccountsIntent? = nil,
        initUserEmailRecoveryIntent: Components.Schemas.InitUserEmailRecoveryIntent? = nil,
        recoverUserIntent: Components.Schemas.RecoverUserIntent? = nil,
        setOrganizationFeatureIntent: Components.Schemas.SetOrganizationFeatureIntent? = nil,
        removeOrganizationFeatureIntent: Components.Schemas.RemoveOrganizationFeatureIntent? = nil,
        signRawPayloadIntentV2: Components.Schemas.SignRawPayloadIntentV2? = nil,
        signTransactionIntentV2: Components.Schemas.SignTransactionIntentV2? = nil,
        exportPrivateKeyIntent: Components.Schemas.ExportPrivateKeyIntent? = nil,
        exportWalletIntent: Components.Schemas.ExportWalletIntent? = nil,
        createSubOrganizationIntentV4: Components.Schemas.CreateSubOrganizationIntentV4? = nil,
        emailAuthIntent: Components.Schemas.EmailAuthIntent? = nil,
        exportWalletAccountIntent: Components.Schemas.ExportWalletAccountIntent? = nil,
        initImportWalletIntent: Components.Schemas.InitImportWalletIntent? = nil,
        importWalletIntent: Components.Schemas.ImportWalletIntent? = nil,
        initImportPrivateKeyIntent: Components.Schemas.InitImportPrivateKeyIntent? = nil,
        importPrivateKeyIntent: Components.Schemas.ImportPrivateKeyIntent? = nil,
        createPoliciesIntent: Components.Schemas.CreatePoliciesIntent? = nil,
        signRawPayloadsIntent: Components.Schemas.SignRawPayloadsIntent? = nil,
        createReadOnlySessionIntent: Components.Schemas.CreateReadOnlySessionIntent? = nil,
        createOauthProvidersIntent: Components.Schemas.CreateOauthProvidersIntent? = nil,
        deleteOauthProvidersIntent: Components.Schemas.DeleteOauthProvidersIntent? = nil,
        createSubOrganizationIntentV5: Components.Schemas.CreateSubOrganizationIntentV5? = nil,
        oauthIntent: Components.Schemas.OauthIntent? = nil,
        createApiKeysIntentV2: Components.Schemas.CreateApiKeysIntentV2? = nil,
        createReadWriteSessionIntent: Components.Schemas.CreateReadWriteSessionIntent? = nil,
        emailAuthIntentV2: Components.Schemas.EmailAuthIntentV2? = nil,
        createSubOrganizationIntentV6: Components.Schemas.CreateSubOrganizationIntentV6? = nil,
        deletePrivateKeysIntent: Components.Schemas.DeletePrivateKeysIntent? = nil,
        deleteWalletsIntent: Components.Schemas.DeleteWalletsIntent? = nil,
        createReadWriteSessionIntentV2: Components.Schemas.CreateReadWriteSessionIntentV2? = nil,
        deleteSubOrganizationIntent: Components.Schemas.DeleteSubOrganizationIntent? = nil,
        initOtpAuthIntent: Components.Schemas.InitOtpAuthIntent? = nil,
        otpAuthIntent: Components.Schemas.OtpAuthIntent? = nil,
        createSubOrganizationIntentV7: Components.Schemas.CreateSubOrganizationIntentV7? = nil,
        updateWalletIntent: Components.Schemas.UpdateWalletIntent? = nil,
        updatePolicyIntentV2: Components.Schemas.UpdatePolicyIntentV2? = nil,
        createUsersIntentV3: Components.Schemas.CreateUsersIntentV3? = nil,
        initOtpAuthIntentV2: Components.Schemas.InitOtpAuthIntentV2? = nil,
        initOtpIntent: Components.Schemas.InitOtpIntent? = nil,
        verifyOtpIntent: Components.Schemas.VerifyOtpIntent? = nil,
        otpLoginIntent: Components.Schemas.OtpLoginIntent? = nil,
        stampLoginIntent: Components.Schemas.StampLoginIntent? = nil,
        oauthLoginIntent: Components.Schemas.OauthLoginIntent? = nil,
        updateUserNameIntent: Components.Schemas.UpdateUserNameIntent? = nil,
        updateUserEmailIntent: Components.Schemas.UpdateUserEmailIntent? = nil,
        updateUserPhoneNumberIntent: Components.Schemas.UpdateUserPhoneNumberIntent? = nil
      ) {
        self.createOrganizationIntent = createOrganizationIntent
        self.createAuthenticatorsIntent = createAuthenticatorsIntent
        self.createUsersIntent = createUsersIntent
        self.createPrivateKeysIntent = createPrivateKeysIntent
        self.signRawPayloadIntent = signRawPayloadIntent
        self.createInvitationsIntent = createInvitationsIntent
        self.acceptInvitationIntent = acceptInvitationIntent
        self.createPolicyIntent = createPolicyIntent
        self.disablePrivateKeyIntent = disablePrivateKeyIntent
        self.deleteUsersIntent = deleteUsersIntent
        self.deleteAuthenticatorsIntent = deleteAuthenticatorsIntent
        self.deleteInvitationIntent = deleteInvitationIntent
        self.deleteOrganizationIntent = deleteOrganizationIntent
        self.deletePolicyIntent = deletePolicyIntent
        self.createUserTagIntent = createUserTagIntent
        self.deleteUserTagsIntent = deleteUserTagsIntent
        self.signTransactionIntent = signTransactionIntent
        self.createApiKeysIntent = createApiKeysIntent
        self.deleteApiKeysIntent = deleteApiKeysIntent
        self.approveActivityIntent = approveActivityIntent
        self.rejectActivityIntent = rejectActivityIntent
        self.createPrivateKeyTagIntent = createPrivateKeyTagIntent
        self.deletePrivateKeyTagsIntent = deletePrivateKeyTagsIntent
        self.createPolicyIntentV2 = createPolicyIntentV2
        self.setPaymentMethodIntent = setPaymentMethodIntent
        self.activateBillingTierIntent = activateBillingTierIntent
        self.deletePaymentMethodIntent = deletePaymentMethodIntent
        self.createPolicyIntentV3 = createPolicyIntentV3
        self.createApiOnlyUsersIntent = createApiOnlyUsersIntent
        self.updateRootQuorumIntent = updateRootQuorumIntent
        self.updateUserTagIntent = updateUserTagIntent
        self.updatePrivateKeyTagIntent = updatePrivateKeyTagIntent
        self.createAuthenticatorsIntentV2 = createAuthenticatorsIntentV2
        self.acceptInvitationIntentV2 = acceptInvitationIntentV2
        self.createOrganizationIntentV2 = createOrganizationIntentV2
        self.createUsersIntentV2 = createUsersIntentV2
        self.createSubOrganizationIntent = createSubOrganizationIntent
        self.createSubOrganizationIntentV2 = createSubOrganizationIntentV2
        self.updateAllowedOriginsIntent = updateAllowedOriginsIntent
        self.createPrivateKeysIntentV2 = createPrivateKeysIntentV2
        self.updateUserIntent = updateUserIntent
        self.updatePolicyIntent = updatePolicyIntent
        self.setPaymentMethodIntentV2 = setPaymentMethodIntentV2
        self.createSubOrganizationIntentV3 = createSubOrganizationIntentV3
        self.createWalletIntent = createWalletIntent
        self.createWalletAccountsIntent = createWalletAccountsIntent
        self.initUserEmailRecoveryIntent = initUserEmailRecoveryIntent
        self.recoverUserIntent = recoverUserIntent
        self.setOrganizationFeatureIntent = setOrganizationFeatureIntent
        self.removeOrganizationFeatureIntent = removeOrganizationFeatureIntent
        self.signRawPayloadIntentV2 = signRawPayloadIntentV2
        self.signTransactionIntentV2 = signTransactionIntentV2
        self.exportPrivateKeyIntent = exportPrivateKeyIntent
        self.exportWalletIntent = exportWalletIntent
        self.createSubOrganizationIntentV4 = createSubOrganizationIntentV4
        self.emailAuthIntent = emailAuthIntent
        self.exportWalletAccountIntent = exportWalletAccountIntent
        self.initImportWalletIntent = initImportWalletIntent
        self.importWalletIntent = importWalletIntent
        self.initImportPrivateKeyIntent = initImportPrivateKeyIntent
        self.importPrivateKeyIntent = importPrivateKeyIntent
        self.createPoliciesIntent = createPoliciesIntent
        self.signRawPayloadsIntent = signRawPayloadsIntent
        self.createReadOnlySessionIntent = createReadOnlySessionIntent
        self.createOauthProvidersIntent = createOauthProvidersIntent
        self.deleteOauthProvidersIntent = deleteOauthProvidersIntent
        self.createSubOrganizationIntentV5 = createSubOrganizationIntentV5
        self.oauthIntent = oauthIntent
        self.createApiKeysIntentV2 = createApiKeysIntentV2
        self.createReadWriteSessionIntent = createReadWriteSessionIntent
        self.emailAuthIntentV2 = emailAuthIntentV2
        self.createSubOrganizationIntentV6 = createSubOrganizationIntentV6
        self.deletePrivateKeysIntent = deletePrivateKeysIntent
        self.deleteWalletsIntent = deleteWalletsIntent
        self.createReadWriteSessionIntentV2 = createReadWriteSessionIntentV2
        self.deleteSubOrganizationIntent = deleteSubOrganizationIntent
        self.initOtpAuthIntent = initOtpAuthIntent
        self.otpAuthIntent = otpAuthIntent
        self.createSubOrganizationIntentV7 = createSubOrganizationIntentV7
        self.updateWalletIntent = updateWalletIntent
        self.updatePolicyIntentV2 = updatePolicyIntentV2
        self.createUsersIntentV3 = createUsersIntentV3
        self.initOtpAuthIntentV2 = initOtpAuthIntentV2
        self.initOtpIntent = initOtpIntent
        self.verifyOtpIntent = verifyOtpIntent
        self.otpLoginIntent = otpLoginIntent
        self.stampLoginIntent = stampLoginIntent
        self.oauthLoginIntent = oauthLoginIntent
        self.updateUserNameIntent = updateUserNameIntent
        self.updateUserEmailIntent = updateUserEmailIntent
        self.updateUserPhoneNumberIntent = updateUserPhoneNumberIntent
      }
      public enum CodingKeys: String, CodingKey {
        case createOrganizationIntent
        case createAuthenticatorsIntent
        case createUsersIntent
        case createPrivateKeysIntent
        case signRawPayloadIntent
        case createInvitationsIntent
        case acceptInvitationIntent
        case createPolicyIntent
        case disablePrivateKeyIntent
        case deleteUsersIntent
        case deleteAuthenticatorsIntent
        case deleteInvitationIntent
        case deleteOrganizationIntent
        case deletePolicyIntent
        case createUserTagIntent
        case deleteUserTagsIntent
        case signTransactionIntent
        case createApiKeysIntent
        case deleteApiKeysIntent
        case approveActivityIntent
        case rejectActivityIntent
        case createPrivateKeyTagIntent
        case deletePrivateKeyTagsIntent
        case createPolicyIntentV2
        case setPaymentMethodIntent
        case activateBillingTierIntent
        case deletePaymentMethodIntent
        case createPolicyIntentV3
        case createApiOnlyUsersIntent
        case updateRootQuorumIntent
        case updateUserTagIntent
        case updatePrivateKeyTagIntent
        case createAuthenticatorsIntentV2
        case acceptInvitationIntentV2
        case createOrganizationIntentV2
        case createUsersIntentV2
        case createSubOrganizationIntent
        case createSubOrganizationIntentV2
        case updateAllowedOriginsIntent
        case createPrivateKeysIntentV2
        case updateUserIntent
        case updatePolicyIntent
        case setPaymentMethodIntentV2
        case createSubOrganizationIntentV3
        case createWalletIntent
        case createWalletAccountsIntent
        case initUserEmailRecoveryIntent
        case recoverUserIntent
        case setOrganizationFeatureIntent
        case removeOrganizationFeatureIntent
        case signRawPayloadIntentV2
        case signTransactionIntentV2
        case exportPrivateKeyIntent
        case exportWalletIntent
        case createSubOrganizationIntentV4
        case emailAuthIntent
        case exportWalletAccountIntent
        case initImportWalletIntent
        case importWalletIntent
        case initImportPrivateKeyIntent
        case importPrivateKeyIntent
        case createPoliciesIntent
        case signRawPayloadsIntent
        case createReadOnlySessionIntent
        case createOauthProvidersIntent
        case deleteOauthProvidersIntent
        case createSubOrganizationIntentV5
        case oauthIntent
        case createApiKeysIntentV2
        case createReadWriteSessionIntent
        case emailAuthIntentV2
        case createSubOrganizationIntentV6
        case deletePrivateKeysIntent
        case deleteWalletsIntent
        case createReadWriteSessionIntentV2
        case deleteSubOrganizationIntent
        case initOtpAuthIntent
        case otpAuthIntent
        case createSubOrganizationIntentV7
        case updateWalletIntent
        case updatePolicyIntentV2
        case createUsersIntentV3
        case initOtpAuthIntentV2
        case initOtpIntent
        case verifyOtpIntent
        case otpLoginIntent
        case stampLoginIntent
        case oauthLoginIntent
        case updateUserNameIntent
        case updateUserEmailIntent
        case updateUserPhoneNumberIntent
      }
    }
    /// - Remark: Generated from `#/components/schemas/InvitationParams`.
    public struct InvitationParams: Codable, Hashable, Sendable {
      /// The name of the intended Invitation recipient.
      ///
      /// - Remark: Generated from `#/components/schemas/InvitationParams/receiverUserName`.
      public var receiverUserName: Swift.String
      /// The email address of the intended Invitation recipient.
      ///
      /// - Remark: Generated from `#/components/schemas/InvitationParams/receiverUserEmail`.
      public var receiverUserEmail: Swift.String
      /// A list of tags assigned to the Invitation recipient. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/InvitationParams/receiverUserTags`.
      public var receiverUserTags: [Swift.String]
      /// - Remark: Generated from `#/components/schemas/InvitationParams/accessType`.
      public var accessType: Components.Schemas.AccessType
      /// Unique identifier for the Sender of an Invitation.
      ///
      /// - Remark: Generated from `#/components/schemas/InvitationParams/senderUserId`.
      public var senderUserId: Swift.String
      /// Creates a new `InvitationParams`.
      ///
      /// - Parameters:
      ///   - receiverUserName: The name of the intended Invitation recipient.
      ///   - receiverUserEmail: The email address of the intended Invitation recipient.
      ///   - receiverUserTags: A list of tags assigned to the Invitation recipient. This field, if not needed, should be an empty array in your request body.
      ///   - accessType:
      ///   - senderUserId: Unique identifier for the Sender of an Invitation.
      public init(
        receiverUserName: Swift.String,
        receiverUserEmail: Swift.String,
        receiverUserTags: [Swift.String],
        accessType: Components.Schemas.AccessType,
        senderUserId: Swift.String
      ) {
        self.receiverUserName = receiverUserName
        self.receiverUserEmail = receiverUserEmail
        self.receiverUserTags = receiverUserTags
        self.accessType = accessType
        self.senderUserId = senderUserId
      }
      public enum CodingKeys: String, CodingKey {
        case receiverUserName
        case receiverUserEmail
        case receiverUserTags
        case accessType
        case senderUserId
      }
    }
    /// - Remark: Generated from `#/components/schemas/ListPrivateKeyTagsRequest`.
    public struct ListPrivateKeyTagsRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/ListPrivateKeyTagsRequest/organizationId`.
      public var organizationId: Swift.String
      /// Creates a new `ListPrivateKeyTagsRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      public init(organizationId: Swift.String) {
        self.organizationId = organizationId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
      }
    }
    /// - Remark: Generated from `#/components/schemas/ListPrivateKeyTagsResponse`.
    public struct ListPrivateKeyTagsResponse: Codable, Hashable, Sendable {
      /// A list of Private Key Tags
      ///
      /// - Remark: Generated from `#/components/schemas/ListPrivateKeyTagsResponse/privateKeyTags`.
      public var privateKeyTags: [Components.Schemas.v1_period_Tag]
      /// Creates a new `ListPrivateKeyTagsResponse`.
      ///
      /// - Parameters:
      ///   - privateKeyTags: A list of Private Key Tags
      public init(privateKeyTags: [Components.Schemas.v1_period_Tag]) {
        self.privateKeyTags = privateKeyTags
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyTags
      }
    }
    /// - Remark: Generated from `#/components/schemas/ListUserTagsRequest`.
    public struct ListUserTagsRequest: Codable, Hashable, Sendable {
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/ListUserTagsRequest/organizationId`.
      public var organizationId: Swift.String
      /// Creates a new `ListUserTagsRequest`.
      ///
      /// - Parameters:
      ///   - organizationId: Unique identifier for a given Organization.
      public init(organizationId: Swift.String) {
        self.organizationId = organizationId
      }
      public enum CodingKeys: String, CodingKey {
        case organizationId
      }
    }
    /// - Remark: Generated from `#/components/schemas/ListUserTagsResponse`.
    public struct ListUserTagsResponse: Codable, Hashable, Sendable {
      /// A list of User Tags
      ///
      /// - Remark: Generated from `#/components/schemas/ListUserTagsResponse/userTags`.
      public var userTags: [Components.Schemas.v1_period_Tag]
      /// Creates a new `ListUserTagsResponse`.
      ///
      /// - Parameters:
      ///   - userTags: A list of User Tags
      public init(userTags: [Components.Schemas.v1_period_Tag]) {
        self.userTags = userTags
      }
      public enum CodingKeys: String, CodingKey {
        case userTags
      }
    }
    /// - Remark: Generated from `#/components/schemas/MnemonicLanguage`.
    @frozen public enum MnemonicLanguage: String, Codable, Hashable, Sendable, CaseIterable {
      case MNEMONIC_LANGUAGE_ENGLISH = "MNEMONIC_LANGUAGE_ENGLISH"
      case MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE = "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE"
      case MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE = "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE"
      case MNEMONIC_LANGUAGE_CZECH = "MNEMONIC_LANGUAGE_CZECH"
      case MNEMONIC_LANGUAGE_FRENCH = "MNEMONIC_LANGUAGE_FRENCH"
      case MNEMONIC_LANGUAGE_ITALIAN = "MNEMONIC_LANGUAGE_ITALIAN"
      case MNEMONIC_LANGUAGE_JAPANESE = "MNEMONIC_LANGUAGE_JAPANESE"
      case MNEMONIC_LANGUAGE_KOREAN = "MNEMONIC_LANGUAGE_KOREAN"
      case MNEMONIC_LANGUAGE_SPANISH = "MNEMONIC_LANGUAGE_SPANISH"
    }
    /// - Remark: Generated from `#/components/schemas/OauthIntent`.
    public struct OauthIntent: Codable, Hashable, Sendable {
      /// Base64 encoded OIDC token
      ///
      /// - Remark: Generated from `#/components/schemas/OauthIntent/oidcToken`.
      public var oidcToken: Swift.String
      /// Client-side public key generated by the user, to which the oauth bundle (credentials) will be encrypted.
      ///
      /// - Remark: Generated from `#/components/schemas/OauthIntent/targetPublicKey`.
      public var targetPublicKey: Swift.String
      /// Optional human-readable name for an API Key. If none provided, default to Oauth - <Timestamp>
      ///
      /// - Remark: Generated from `#/components/schemas/OauthIntent/apiKeyName`.
      public var apiKeyName: Swift.String?
      /// Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
      ///
      /// - Remark: Generated from `#/components/schemas/OauthIntent/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// Invalidate all other previously generated Oauth API keys
      ///
      /// - Remark: Generated from `#/components/schemas/OauthIntent/invalidateExisting`.
      public var invalidateExisting: Swift.Bool?
      /// Creates a new `OauthIntent`.
      ///
      /// - Parameters:
      ///   - oidcToken: Base64 encoded OIDC token
      ///   - targetPublicKey: Client-side public key generated by the user, to which the oauth bundle (credentials) will be encrypted.
      ///   - apiKeyName: Optional human-readable name for an API Key. If none provided, default to Oauth - <Timestamp>
      ///   - expirationSeconds: Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
      ///   - invalidateExisting: Invalidate all other previously generated Oauth API keys
      public init(
        oidcToken: Swift.String,
        targetPublicKey: Swift.String,
        apiKeyName: Swift.String? = nil,
        expirationSeconds: Swift.String? = nil,
        invalidateExisting: Swift.Bool? = nil
      ) {
        self.oidcToken = oidcToken
        self.targetPublicKey = targetPublicKey
        self.apiKeyName = apiKeyName
        self.expirationSeconds = expirationSeconds
        self.invalidateExisting = invalidateExisting
      }
      public enum CodingKeys: String, CodingKey {
        case oidcToken
        case targetPublicKey
        case apiKeyName
        case expirationSeconds
        case invalidateExisting
      }
    }
    /// - Remark: Generated from `#/components/schemas/OauthLoginIntent`.
    public struct OauthLoginIntent: Codable, Hashable, Sendable {
      /// Base64 encoded OIDC token
      ///
      /// - Remark: Generated from `#/components/schemas/OauthLoginIntent/oidcToken`.
      public var oidcToken: Swift.String
      /// Client-side public key generated by the user, which will be conditionally added to org data based on the validity of the oidc token associated with this request
      ///
      /// - Remark: Generated from `#/components/schemas/OauthLoginIntent/publicKey`.
      public var publicKey: Swift.String
      /// Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
      ///
      /// - Remark: Generated from `#/components/schemas/OauthLoginIntent/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// Invalidate all other previously generated Login API keys
      ///
      /// - Remark: Generated from `#/components/schemas/OauthLoginIntent/invalidateExisting`.
      public var invalidateExisting: Swift.Bool?
      /// Creates a new `OauthLoginIntent`.
      ///
      /// - Parameters:
      ///   - oidcToken: Base64 encoded OIDC token
      ///   - publicKey: Client-side public key generated by the user, which will be conditionally added to org data based on the validity of the oidc token associated with this request
      ///   - expirationSeconds: Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
      ///   - invalidateExisting: Invalidate all other previously generated Login API keys
      public init(
        oidcToken: Swift.String,
        publicKey: Swift.String,
        expirationSeconds: Swift.String? = nil,
        invalidateExisting: Swift.Bool? = nil
      ) {
        self.oidcToken = oidcToken
        self.publicKey = publicKey
        self.expirationSeconds = expirationSeconds
        self.invalidateExisting = invalidateExisting
      }
      public enum CodingKeys: String, CodingKey {
        case oidcToken
        case publicKey
        case expirationSeconds
        case invalidateExisting
      }
    }
    /// - Remark: Generated from `#/components/schemas/OauthLoginRequest`.
    public struct OauthLoginRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/OauthLoginRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_OAUTH_LOGIN = "ACTIVITY_TYPE_OAUTH_LOGIN"
      }
      /// - Remark: Generated from `#/components/schemas/OauthLoginRequest/type`.
      public var _type: Components.Schemas.OauthLoginRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/OauthLoginRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/OauthLoginRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/OauthLoginRequest/parameters`.
      public var parameters: Components.Schemas.OauthLoginIntent
      /// Creates a new `OauthLoginRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.OauthLoginRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.OauthLoginIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/OauthLoginResult`.
    public struct OauthLoginResult: Codable, Hashable, Sendable {
      /// Signed JWT containing an expiry, public key, session type, user id, and organization id
      ///
      /// - Remark: Generated from `#/components/schemas/OauthLoginResult/session`.
      public var session: Swift.String
      /// Creates a new `OauthLoginResult`.
      ///
      /// - Parameters:
      ///   - session: Signed JWT containing an expiry, public key, session type, user id, and organization id
      public init(session: Swift.String) {
        self.session = session
      }
      public enum CodingKeys: String, CodingKey {
        case session
      }
    }
    /// - Remark: Generated from `#/components/schemas/OauthProvider`.
    public struct OauthProvider: Codable, Hashable, Sendable {
      /// Unique identifier for an OAuth Provider
      ///
      /// - Remark: Generated from `#/components/schemas/OauthProvider/providerId`.
      public var providerId: Swift.String
      /// Human-readable name to identify a Provider.
      ///
      /// - Remark: Generated from `#/components/schemas/OauthProvider/providerName`.
      public var providerName: Swift.String
      /// The issuer of the token, typically a URL indicating the authentication server, e.g https://accounts.google.com
      ///
      /// - Remark: Generated from `#/components/schemas/OauthProvider/issuer`.
      public var issuer: Swift.String
      /// Expected audience ('aud' attribute of the signed token) which represents the app ID
      ///
      /// - Remark: Generated from `#/components/schemas/OauthProvider/audience`.
      public var audience: Swift.String
      /// Expected subject ('sub' attribute of the signed token) which represents the user ID
      ///
      /// - Remark: Generated from `#/components/schemas/OauthProvider/subject`.
      public var subject: Swift.String
      /// - Remark: Generated from `#/components/schemas/OauthProvider/createdAt`.
      public var createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// - Remark: Generated from `#/components/schemas/OauthProvider/updatedAt`.
      public var updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// Creates a new `OauthProvider`.
      ///
      /// - Parameters:
      ///   - providerId: Unique identifier for an OAuth Provider
      ///   - providerName: Human-readable name to identify a Provider.
      ///   - issuer: The issuer of the token, typically a URL indicating the authentication server, e.g https://accounts.google.com
      ///   - audience: Expected audience ('aud' attribute of the signed token) which represents the app ID
      ///   - subject: Expected subject ('sub' attribute of the signed token) which represents the user ID
      ///   - createdAt:
      ///   - updatedAt:
      public init(
        providerId: Swift.String,
        providerName: Swift.String,
        issuer: Swift.String,
        audience: Swift.String,
        subject: Swift.String,
        createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      ) {
        self.providerId = providerId
        self.providerName = providerName
        self.issuer = issuer
        self.audience = audience
        self.subject = subject
        self.createdAt = createdAt
        self.updatedAt = updatedAt
      }
      public enum CodingKeys: String, CodingKey {
        case providerId
        case providerName
        case issuer
        case audience
        case subject
        case createdAt
        case updatedAt
      }
    }
    /// - Remark: Generated from `#/components/schemas/OauthProviderParams`.
    public struct OauthProviderParams: Codable, Hashable, Sendable {
      /// Human-readable name to identify a Provider.
      ///
      /// - Remark: Generated from `#/components/schemas/OauthProviderParams/providerName`.
      public var providerName: Swift.String
      /// Base64 encoded OIDC token
      ///
      /// - Remark: Generated from `#/components/schemas/OauthProviderParams/oidcToken`.
      public var oidcToken: Swift.String
      /// Creates a new `OauthProviderParams`.
      ///
      /// - Parameters:
      ///   - providerName: Human-readable name to identify a Provider.
      ///   - oidcToken: Base64 encoded OIDC token
      public init(
        providerName: Swift.String,
        oidcToken: Swift.String
      ) {
        self.providerName = providerName
        self.oidcToken = oidcToken
      }
      public enum CodingKeys: String, CodingKey {
        case providerName
        case oidcToken
      }
    }
    /// - Remark: Generated from `#/components/schemas/OauthRequest`.
    public struct OauthRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/OauthRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_OAUTH = "ACTIVITY_TYPE_OAUTH"
      }
      /// - Remark: Generated from `#/components/schemas/OauthRequest/type`.
      public var _type: Components.Schemas.OauthRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/OauthRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/OauthRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/OauthRequest/parameters`.
      public var parameters: Components.Schemas.OauthIntent
      /// Creates a new `OauthRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.OauthRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.OauthIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/OauthResult`.
    public struct OauthResult: Codable, Hashable, Sendable {
      /// Unique identifier for the authenticating User.
      ///
      /// - Remark: Generated from `#/components/schemas/OauthResult/userId`.
      public var userId: Swift.String
      /// Unique identifier for the created API key.
      ///
      /// - Remark: Generated from `#/components/schemas/OauthResult/apiKeyId`.
      public var apiKeyId: Swift.String
      /// HPKE encrypted credential bundle
      ///
      /// - Remark: Generated from `#/components/schemas/OauthResult/credentialBundle`.
      public var credentialBundle: Swift.String
      /// Creates a new `OauthResult`.
      ///
      /// - Parameters:
      ///   - userId: Unique identifier for the authenticating User.
      ///   - apiKeyId: Unique identifier for the created API key.
      ///   - credentialBundle: HPKE encrypted credential bundle
      public init(
        userId: Swift.String,
        apiKeyId: Swift.String,
        credentialBundle: Swift.String
      ) {
        self.userId = userId
        self.apiKeyId = apiKeyId
        self.credentialBundle = credentialBundle
      }
      public enum CodingKeys: String, CodingKey {
        case userId
        case apiKeyId
        case credentialBundle
      }
    }
    /// - Remark: Generated from `#/components/schemas/Operator`.
    @frozen public enum Operator: String, Codable, Hashable, Sendable, CaseIterable {
      case OPERATOR_EQUAL = "OPERATOR_EQUAL"
      case OPERATOR_MORE_THAN = "OPERATOR_MORE_THAN"
      case OPERATOR_MORE_THAN_OR_EQUAL = "OPERATOR_MORE_THAN_OR_EQUAL"
      case OPERATOR_LESS_THAN = "OPERATOR_LESS_THAN"
      case OPERATOR_LESS_THAN_OR_EQUAL = "OPERATOR_LESS_THAN_OR_EQUAL"
      case OPERATOR_CONTAINS = "OPERATOR_CONTAINS"
      case OPERATOR_NOT_EQUAL = "OPERATOR_NOT_EQUAL"
      case OPERATOR_IN = "OPERATOR_IN"
      case OPERATOR_NOT_IN = "OPERATOR_NOT_IN"
      case OPERATOR_CONTAINS_ONE = "OPERATOR_CONTAINS_ONE"
      case OPERATOR_CONTAINS_ALL = "OPERATOR_CONTAINS_ALL"
    }
    /// - Remark: Generated from `#/components/schemas/OtpAuthIntent`.
    public struct OtpAuthIntent: Codable, Hashable, Sendable {
      /// ID representing the result of an init OTP activity.
      ///
      /// - Remark: Generated from `#/components/schemas/OtpAuthIntent/otpId`.
      public var otpId: Swift.String
      /// OTP sent out to a user's contact (email or SMS)
      ///
      /// - Remark: Generated from `#/components/schemas/OtpAuthIntent/otpCode`.
      public var otpCode: Swift.String
      /// Client-side public key generated by the user, to which the OTP bundle (credentials) will be encrypted.
      ///
      /// - Remark: Generated from `#/components/schemas/OtpAuthIntent/targetPublicKey`.
      public var targetPublicKey: Swift.String
      /// Optional human-readable name for an API Key. If none provided, default to OTP Auth - <Timestamp>
      ///
      /// - Remark: Generated from `#/components/schemas/OtpAuthIntent/apiKeyName`.
      public var apiKeyName: Swift.String?
      /// Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
      ///
      /// - Remark: Generated from `#/components/schemas/OtpAuthIntent/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// Invalidate all other previously generated OTP Auth API keys
      ///
      /// - Remark: Generated from `#/components/schemas/OtpAuthIntent/invalidateExisting`.
      public var invalidateExisting: Swift.Bool?
      /// Creates a new `OtpAuthIntent`.
      ///
      /// - Parameters:
      ///   - otpId: ID representing the result of an init OTP activity.
      ///   - otpCode: OTP sent out to a user's contact (email or SMS)
      ///   - targetPublicKey: Client-side public key generated by the user, to which the OTP bundle (credentials) will be encrypted.
      ///   - apiKeyName: Optional human-readable name for an API Key. If none provided, default to OTP Auth - <Timestamp>
      ///   - expirationSeconds: Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
      ///   - invalidateExisting: Invalidate all other previously generated OTP Auth API keys
      public init(
        otpId: Swift.String,
        otpCode: Swift.String,
        targetPublicKey: Swift.String,
        apiKeyName: Swift.String? = nil,
        expirationSeconds: Swift.String? = nil,
        invalidateExisting: Swift.Bool? = nil
      ) {
        self.otpId = otpId
        self.otpCode = otpCode
        self.targetPublicKey = targetPublicKey
        self.apiKeyName = apiKeyName
        self.expirationSeconds = expirationSeconds
        self.invalidateExisting = invalidateExisting
      }
      public enum CodingKeys: String, CodingKey {
        case otpId
        case otpCode
        case targetPublicKey
        case apiKeyName
        case expirationSeconds
        case invalidateExisting
      }
    }
    /// - Remark: Generated from `#/components/schemas/OtpAuthRequest`.
    public struct OtpAuthRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/OtpAuthRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_OTP_AUTH = "ACTIVITY_TYPE_OTP_AUTH"
      }
      /// - Remark: Generated from `#/components/schemas/OtpAuthRequest/type`.
      public var _type: Components.Schemas.OtpAuthRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/OtpAuthRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/OtpAuthRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/OtpAuthRequest/parameters`.
      public var parameters: Components.Schemas.OtpAuthIntent
      /// Creates a new `OtpAuthRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.OtpAuthRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.OtpAuthIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/OtpAuthResult`.
    public struct OtpAuthResult: Codable, Hashable, Sendable {
      /// Unique identifier for the authenticating User.
      ///
      /// - Remark: Generated from `#/components/schemas/OtpAuthResult/userId`.
      public var userId: Swift.String
      /// Unique identifier for the created API key.
      ///
      /// - Remark: Generated from `#/components/schemas/OtpAuthResult/apiKeyId`.
      public var apiKeyId: Swift.String?
      /// HPKE encrypted credential bundle
      ///
      /// - Remark: Generated from `#/components/schemas/OtpAuthResult/credentialBundle`.
      public var credentialBundle: Swift.String?
      /// Creates a new `OtpAuthResult`.
      ///
      /// - Parameters:
      ///   - userId: Unique identifier for the authenticating User.
      ///   - apiKeyId: Unique identifier for the created API key.
      ///   - credentialBundle: HPKE encrypted credential bundle
      public init(
        userId: Swift.String,
        apiKeyId: Swift.String? = nil,
        credentialBundle: Swift.String? = nil
      ) {
        self.userId = userId
        self.apiKeyId = apiKeyId
        self.credentialBundle = credentialBundle
      }
      public enum CodingKeys: String, CodingKey {
        case userId
        case apiKeyId
        case credentialBundle
      }
    }
    /// - Remark: Generated from `#/components/schemas/OtpLoginIntent`.
    public struct OtpLoginIntent: Codable, Hashable, Sendable {
      /// Signed JWT containing a unique id, expiry, verification type, contact
      ///
      /// - Remark: Generated from `#/components/schemas/OtpLoginIntent/verificationToken`.
      public var verificationToken: Swift.String
      /// Client-side public key generated by the user, which will be conditionally added to org data based on the validity of the verification token
      ///
      /// - Remark: Generated from `#/components/schemas/OtpLoginIntent/publicKey`.
      public var publicKey: Swift.String
      /// Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
      ///
      /// - Remark: Generated from `#/components/schemas/OtpLoginIntent/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// Invalidate all other previously generated Login API keys
      ///
      /// - Remark: Generated from `#/components/schemas/OtpLoginIntent/invalidateExisting`.
      public var invalidateExisting: Swift.Bool?
      /// Creates a new `OtpLoginIntent`.
      ///
      /// - Parameters:
      ///   - verificationToken: Signed JWT containing a unique id, expiry, verification type, contact
      ///   - publicKey: Client-side public key generated by the user, which will be conditionally added to org data based on the validity of the verification token
      ///   - expirationSeconds: Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
      ///   - invalidateExisting: Invalidate all other previously generated Login API keys
      public init(
        verificationToken: Swift.String,
        publicKey: Swift.String,
        expirationSeconds: Swift.String? = nil,
        invalidateExisting: Swift.Bool? = nil
      ) {
        self.verificationToken = verificationToken
        self.publicKey = publicKey
        self.expirationSeconds = expirationSeconds
        self.invalidateExisting = invalidateExisting
      }
      public enum CodingKeys: String, CodingKey {
        case verificationToken
        case publicKey
        case expirationSeconds
        case invalidateExisting
      }
    }
    /// - Remark: Generated from `#/components/schemas/OtpLoginRequest`.
    public struct OtpLoginRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/OtpLoginRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_OTP_LOGIN = "ACTIVITY_TYPE_OTP_LOGIN"
      }
      /// - Remark: Generated from `#/components/schemas/OtpLoginRequest/type`.
      public var _type: Components.Schemas.OtpLoginRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/OtpLoginRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/OtpLoginRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/OtpLoginRequest/parameters`.
      public var parameters: Components.Schemas.OtpLoginIntent
      /// Creates a new `OtpLoginRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.OtpLoginRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.OtpLoginIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/OtpLoginResult`.
    public struct OtpLoginResult: Codable, Hashable, Sendable {
      /// Signed JWT containing an expiry, public key, session type, user id, and organization id
      ///
      /// - Remark: Generated from `#/components/schemas/OtpLoginResult/session`.
      public var session: Swift.String
      /// Creates a new `OtpLoginResult`.
      ///
      /// - Parameters:
      ///   - session: Signed JWT containing an expiry, public key, session type, user id, and organization id
      public init(session: Swift.String) {
        self.session = session
      }
      public enum CodingKeys: String, CodingKey {
        case session
      }
    }
    /// - Remark: Generated from `#/components/schemas/Pagination`.
    public struct Pagination: Codable, Hashable, Sendable {
      /// A limit of the number of object to be returned, between 1 and 100. Defaults to 10.
      ///
      /// - Remark: Generated from `#/components/schemas/Pagination/limit`.
      public var limit: Swift.String?
      /// A pagination cursor. This is an object ID that enables you to fetch all objects before this ID.
      ///
      /// - Remark: Generated from `#/components/schemas/Pagination/before`.
      public var before: Swift.String?
      /// A pagination cursor. This is an object ID that enables you to fetch all objects after this ID.
      ///
      /// - Remark: Generated from `#/components/schemas/Pagination/after`.
      public var after: Swift.String?
      /// Creates a new `Pagination`.
      ///
      /// - Parameters:
      ///   - limit: A limit of the number of object to be returned, between 1 and 100. Defaults to 10.
      ///   - before: A pagination cursor. This is an object ID that enables you to fetch all objects before this ID.
      ///   - after: A pagination cursor. This is an object ID that enables you to fetch all objects after this ID.
      public init(
        limit: Swift.String? = nil,
        before: Swift.String? = nil,
        after: Swift.String? = nil
      ) {
        self.limit = limit
        self.before = before
        self.after = after
      }
      public enum CodingKeys: String, CodingKey {
        case limit
        case before
        case after
      }
    }
    /// - Remark: Generated from `#/components/schemas/PathFormat`.
    @frozen public enum PathFormat: String, Codable, Hashable, Sendable, CaseIterable {
      case PATH_FORMAT_BIP32 = "PATH_FORMAT_BIP32"
    }
    /// - Remark: Generated from `#/components/schemas/PayloadEncoding`.
    @frozen public enum PayloadEncoding: String, Codable, Hashable, Sendable, CaseIterable {
      case PAYLOAD_ENCODING_HEXADECIMAL = "PAYLOAD_ENCODING_HEXADECIMAL"
      case PAYLOAD_ENCODING_TEXT_UTF8 = "PAYLOAD_ENCODING_TEXT_UTF8"
    }
    /// - Remark: Generated from `#/components/schemas/Policy`.
    public struct Policy: Codable, Hashable, Sendable {
      /// Unique identifier for a given Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/Policy/policyId`.
      public var policyId: Swift.String
      /// Human-readable name for a Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/Policy/policyName`.
      public var policyName: Swift.String
      /// - Remark: Generated from `#/components/schemas/Policy/effect`.
      public var effect: Components.Schemas.Effect
      /// - Remark: Generated from `#/components/schemas/Policy/createdAt`.
      public var createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// - Remark: Generated from `#/components/schemas/Policy/updatedAt`.
      public var updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// Human-readable notes added by a User to describe a particular policy.
      ///
      /// - Remark: Generated from `#/components/schemas/Policy/notes`.
      public var notes: Swift.String
      /// A consensus expression that evalutes to true or false.
      ///
      /// - Remark: Generated from `#/components/schemas/Policy/consensus`.
      public var consensus: Swift.String?
      /// A condition expression that evalutes to true or false.
      ///
      /// - Remark: Generated from `#/components/schemas/Policy/condition`.
      public var condition: Swift.String?
      /// Creates a new `Policy`.
      ///
      /// - Parameters:
      ///   - policyId: Unique identifier for a given Policy.
      ///   - policyName: Human-readable name for a Policy.
      ///   - effect:
      ///   - createdAt:
      ///   - updatedAt:
      ///   - notes: Human-readable notes added by a User to describe a particular policy.
      ///   - consensus: A consensus expression that evalutes to true or false.
      ///   - condition: A condition expression that evalutes to true or false.
      public init(
        policyId: Swift.String,
        policyName: Swift.String,
        effect: Components.Schemas.Effect,
        createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        notes: Swift.String,
        consensus: Swift.String? = nil,
        condition: Swift.String? = nil
      ) {
        self.policyId = policyId
        self.policyName = policyName
        self.effect = effect
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.notes = notes
        self.consensus = consensus
        self.condition = condition
      }
      public enum CodingKeys: String, CodingKey {
        case policyId
        case policyName
        case effect
        case createdAt
        case updatedAt
        case notes
        case consensus
        case condition
      }
    }
    /// - Remark: Generated from `#/components/schemas/PrivateKey`.
    public struct PrivateKey: Codable, Hashable, Sendable {
      /// Unique identifier for a given Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/PrivateKey/privateKeyId`.
      public var privateKeyId: Swift.String
      /// The public component of a cryptographic key pair used to sign messages and transactions.
      ///
      /// - Remark: Generated from `#/components/schemas/PrivateKey/publicKey`.
      public var publicKey: Swift.String
      /// Human-readable name for a Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/PrivateKey/privateKeyName`.
      public var privateKeyName: Swift.String
      /// - Remark: Generated from `#/components/schemas/PrivateKey/curve`.
      public var curve: Components.Schemas.Curve
      /// Derived cryptocurrency addresses for a given Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/PrivateKey/addresses`.
      public var addresses: [Components.Schemas.data_period_v1_period_Address]
      /// A list of Private Key Tag IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/PrivateKey/privateKeyTags`.
      public var privateKeyTags: [Swift.String]
      /// - Remark: Generated from `#/components/schemas/PrivateKey/createdAt`.
      public var createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// - Remark: Generated from `#/components/schemas/PrivateKey/updatedAt`.
      public var updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// True when a given Private Key is exported, false otherwise.
      ///
      /// - Remark: Generated from `#/components/schemas/PrivateKey/exported`.
      public var exported: Swift.Bool
      /// True when a given Private Key is imported, false otherwise.
      ///
      /// - Remark: Generated from `#/components/schemas/PrivateKey/imported`.
      public var imported: Swift.Bool
      /// Creates a new `PrivateKey`.
      ///
      /// - Parameters:
      ///   - privateKeyId: Unique identifier for a given Private Key.
      ///   - publicKey: The public component of a cryptographic key pair used to sign messages and transactions.
      ///   - privateKeyName: Human-readable name for a Private Key.
      ///   - curve:
      ///   - addresses: Derived cryptocurrency addresses for a given Private Key.
      ///   - privateKeyTags: A list of Private Key Tag IDs.
      ///   - createdAt:
      ///   - updatedAt:
      ///   - exported: True when a given Private Key is exported, false otherwise.
      ///   - imported: True when a given Private Key is imported, false otherwise.
      public init(
        privateKeyId: Swift.String,
        publicKey: Swift.String,
        privateKeyName: Swift.String,
        curve: Components.Schemas.Curve,
        addresses: [Components.Schemas.data_period_v1_period_Address],
        privateKeyTags: [Swift.String],
        createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        exported: Swift.Bool,
        imported: Swift.Bool
      ) {
        self.privateKeyId = privateKeyId
        self.publicKey = publicKey
        self.privateKeyName = privateKeyName
        self.curve = curve
        self.addresses = addresses
        self.privateKeyTags = privateKeyTags
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.exported = exported
        self.imported = imported
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyId
        case publicKey
        case privateKeyName
        case curve
        case addresses
        case privateKeyTags
        case createdAt
        case updatedAt
        case exported
        case imported
      }
    }
    /// - Remark: Generated from `#/components/schemas/PrivateKeyParams`.
    public struct PrivateKeyParams: Codable, Hashable, Sendable {
      /// Human-readable name for a Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/PrivateKeyParams/privateKeyName`.
      public var privateKeyName: Swift.String
      /// - Remark: Generated from `#/components/schemas/PrivateKeyParams/curve`.
      public var curve: Components.Schemas.Curve
      /// A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/PrivateKeyParams/privateKeyTags`.
      public var privateKeyTags: [Swift.String]
      /// Cryptocurrency-specific formats for a derived address (e.g., Ethereum).
      ///
      /// - Remark: Generated from `#/components/schemas/PrivateKeyParams/addressFormats`.
      public var addressFormats: [Components.Schemas.AddressFormat]
      /// Creates a new `PrivateKeyParams`.
      ///
      /// - Parameters:
      ///   - privateKeyName: Human-readable name for a Private Key.
      ///   - curve:
      ///   - privateKeyTags: A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.
      ///   - addressFormats: Cryptocurrency-specific formats for a derived address (e.g., Ethereum).
      public init(
        privateKeyName: Swift.String,
        curve: Components.Schemas.Curve,
        privateKeyTags: [Swift.String],
        addressFormats: [Components.Schemas.AddressFormat]
      ) {
        self.privateKeyName = privateKeyName
        self.curve = curve
        self.privateKeyTags = privateKeyTags
        self.addressFormats = addressFormats
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyName
        case curve
        case privateKeyTags
        case addressFormats
      }
    }
    /// - Remark: Generated from `#/components/schemas/PrivateKeyResult`.
    public struct PrivateKeyResult: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/PrivateKeyResult/privateKeyId`.
      public var privateKeyId: Swift.String?
      /// - Remark: Generated from `#/components/schemas/PrivateKeyResult/addresses`.
      public var addresses: [Components.Schemas.activity_period_v1_period_Address]?
      /// Creates a new `PrivateKeyResult`.
      ///
      /// - Parameters:
      ///   - privateKeyId:
      ///   - addresses:
      public init(
        privateKeyId: Swift.String? = nil,
        addresses: [Components.Schemas.activity_period_v1_period_Address]? = nil
      ) {
        self.privateKeyId = privateKeyId
        self.addresses = addresses
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyId
        case addresses
      }
    }
    /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialWithAttestation`.
    public struct PublicKeyCredentialWithAttestation: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialWithAttestation/id`.
      public var id: Swift.String
      /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialWithAttestation/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case public_hyphen_key = "public-key"
      }
      /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialWithAttestation/type`.
      public var _type: Components.Schemas.PublicKeyCredentialWithAttestation._typePayload
      /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialWithAttestation/rawId`.
      public var rawId: Swift.String
      /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialWithAttestation/authenticatorAttachment`.
      @frozen
      public enum authenticatorAttachmentPayload: String, Codable, Hashable, Sendable, CaseIterable
      {
        case cross_hyphen_platform = "cross-platform"
        case platform = "platform"
      }
      /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialWithAttestation/authenticatorAttachment`.
      public var authenticatorAttachment:
        Components.Schemas.PublicKeyCredentialWithAttestation.authenticatorAttachmentPayload?
      /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialWithAttestation/response`.
      public var response: Components.Schemas.AuthenticatorAttestationResponse
      /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialWithAttestation/clientExtensionResults`.
      public var clientExtensionResults: Components.Schemas.SimpleClientExtensionResults
      /// Creates a new `PublicKeyCredentialWithAttestation`.
      ///
      /// - Parameters:
      ///   - id:
      ///   - _type:
      ///   - rawId:
      ///   - authenticatorAttachment:
      ///   - response:
      ///   - clientExtensionResults:
      public init(
        id: Swift.String,
        _type: Components.Schemas.PublicKeyCredentialWithAttestation._typePayload,
        rawId: Swift.String,
        authenticatorAttachment: Components.Schemas.PublicKeyCredentialWithAttestation
          .authenticatorAttachmentPayload? = nil,
        response: Components.Schemas.AuthenticatorAttestationResponse,
        clientExtensionResults: Components.Schemas.SimpleClientExtensionResults
      ) {
        self.id = id
        self._type = _type
        self.rawId = rawId
        self.authenticatorAttachment = authenticatorAttachment
        self.response = response
        self.clientExtensionResults = clientExtensionResults
      }
      public enum CodingKeys: String, CodingKey {
        case id
        case _type = "type"
        case rawId
        case authenticatorAttachment
        case response
        case clientExtensionResults
      }
    }
    /// - Remark: Generated from `#/components/schemas/RecoverUserIntent`.
    public struct RecoverUserIntent: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/RecoverUserIntent/authenticator`.
      public var authenticator: Components.Schemas.AuthenticatorParamsV2
      /// Unique identifier for the user performing recovery.
      ///
      /// - Remark: Generated from `#/components/schemas/RecoverUserIntent/userId`.
      public var userId: Swift.String
      /// Creates a new `RecoverUserIntent`.
      ///
      /// - Parameters:
      ///   - authenticator:
      ///   - userId: Unique identifier for the user performing recovery.
      public init(
        authenticator: Components.Schemas.AuthenticatorParamsV2,
        userId: Swift.String
      ) {
        self.authenticator = authenticator
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case authenticator
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/RecoverUserRequest`.
    public struct RecoverUserRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/RecoverUserRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_RECOVER_USER = "ACTIVITY_TYPE_RECOVER_USER"
      }
      /// - Remark: Generated from `#/components/schemas/RecoverUserRequest/type`.
      public var _type: Components.Schemas.RecoverUserRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/RecoverUserRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/RecoverUserRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/RecoverUserRequest/parameters`.
      public var parameters: Components.Schemas.RecoverUserIntent
      /// Creates a new `RecoverUserRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.RecoverUserRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.RecoverUserIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/RecoverUserResult`.
    public struct RecoverUserResult: Codable, Hashable, Sendable {
      /// ID of the authenticator created.
      ///
      /// - Remark: Generated from `#/components/schemas/RecoverUserResult/authenticatorId`.
      public var authenticatorId: [Swift.String]
      /// Creates a new `RecoverUserResult`.
      ///
      /// - Parameters:
      ///   - authenticatorId: ID of the authenticator created.
      public init(authenticatorId: [Swift.String]) {
        self.authenticatorId = authenticatorId
      }
      public enum CodingKeys: String, CodingKey {
        case authenticatorId
      }
    }
    /// - Remark: Generated from `#/components/schemas/RejectActivityIntent`.
    public struct RejectActivityIntent: Codable, Hashable, Sendable {
      /// An artifact verifying a User's action.
      ///
      /// - Remark: Generated from `#/components/schemas/RejectActivityIntent/fingerprint`.
      public var fingerprint: Swift.String
      /// Creates a new `RejectActivityIntent`.
      ///
      /// - Parameters:
      ///   - fingerprint: An artifact verifying a User's action.
      public init(fingerprint: Swift.String) {
        self.fingerprint = fingerprint
      }
      public enum CodingKeys: String, CodingKey {
        case fingerprint
      }
    }
    /// - Remark: Generated from `#/components/schemas/RejectActivityRequest`.
    public struct RejectActivityRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/RejectActivityRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_REJECT_ACTIVITY = "ACTIVITY_TYPE_REJECT_ACTIVITY"
      }
      /// - Remark: Generated from `#/components/schemas/RejectActivityRequest/type`.
      public var _type: Components.Schemas.RejectActivityRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/RejectActivityRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/RejectActivityRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/RejectActivityRequest/parameters`.
      public var parameters: Components.Schemas.RejectActivityIntent
      /// Creates a new `RejectActivityRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.RejectActivityRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.RejectActivityIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/RemoveOrganizationFeatureIntent`.
    public struct RemoveOrganizationFeatureIntent: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/RemoveOrganizationFeatureIntent/name`.
      public var name: Components.Schemas.FeatureName
      /// Creates a new `RemoveOrganizationFeatureIntent`.
      ///
      /// - Parameters:
      ///   - name:
      public init(name: Components.Schemas.FeatureName) {
        self.name = name
      }
      public enum CodingKeys: String, CodingKey {
        case name
      }
    }
    /// - Remark: Generated from `#/components/schemas/RemoveOrganizationFeatureRequest`.
    public struct RemoveOrganizationFeatureRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/RemoveOrganizationFeatureRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE = "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE"
      }
      /// - Remark: Generated from `#/components/schemas/RemoveOrganizationFeatureRequest/type`.
      public var _type: Components.Schemas.RemoveOrganizationFeatureRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/RemoveOrganizationFeatureRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/RemoveOrganizationFeatureRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/RemoveOrganizationFeatureRequest/parameters`.
      public var parameters: Components.Schemas.RemoveOrganizationFeatureIntent
      /// Creates a new `RemoveOrganizationFeatureRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.RemoveOrganizationFeatureRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.RemoveOrganizationFeatureIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/RemoveOrganizationFeatureResult`.
    public struct RemoveOrganizationFeatureResult: Codable, Hashable, Sendable {
      /// Resulting list of organization features.
      ///
      /// - Remark: Generated from `#/components/schemas/RemoveOrganizationFeatureResult/features`.
      public var features: [Components.Schemas.Feature]
      /// Creates a new `RemoveOrganizationFeatureResult`.
      ///
      /// - Parameters:
      ///   - features: Resulting list of organization features.
      public init(features: [Components.Schemas.Feature]) {
        self.features = features
      }
      public enum CodingKeys: String, CodingKey {
        case features
      }
    }
    /// - Remark: Generated from `#/components/schemas/Result`.
    public struct Result: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/Result/createOrganizationResult`.
      public var createOrganizationResult: Components.Schemas.CreateOrganizationResult?
      /// - Remark: Generated from `#/components/schemas/Result/createAuthenticatorsResult`.
      public var createAuthenticatorsResult: Components.Schemas.CreateAuthenticatorsResult?
      /// - Remark: Generated from `#/components/schemas/Result/createUsersResult`.
      public var createUsersResult: Components.Schemas.CreateUsersResult?
      /// - Remark: Generated from `#/components/schemas/Result/createPrivateKeysResult`.
      public var createPrivateKeysResult: Components.Schemas.CreatePrivateKeysResult?
      /// - Remark: Generated from `#/components/schemas/Result/createInvitationsResult`.
      public var createInvitationsResult: Components.Schemas.CreateInvitationsResult?
      /// - Remark: Generated from `#/components/schemas/Result/acceptInvitationResult`.
      public var acceptInvitationResult: Components.Schemas.AcceptInvitationResult?
      /// - Remark: Generated from `#/components/schemas/Result/signRawPayloadResult`.
      public var signRawPayloadResult: Components.Schemas.SignRawPayloadResult?
      /// - Remark: Generated from `#/components/schemas/Result/createPolicyResult`.
      public var createPolicyResult: Components.Schemas.CreatePolicyResult?
      /// - Remark: Generated from `#/components/schemas/Result/disablePrivateKeyResult`.
      public var disablePrivateKeyResult: Components.Schemas.DisablePrivateKeyResult?
      /// - Remark: Generated from `#/components/schemas/Result/deleteUsersResult`.
      public var deleteUsersResult: Components.Schemas.DeleteUsersResult?
      /// - Remark: Generated from `#/components/schemas/Result/deleteAuthenticatorsResult`.
      public var deleteAuthenticatorsResult: Components.Schemas.DeleteAuthenticatorsResult?
      /// - Remark: Generated from `#/components/schemas/Result/deleteInvitationResult`.
      public var deleteInvitationResult: Components.Schemas.DeleteInvitationResult?
      /// - Remark: Generated from `#/components/schemas/Result/deleteOrganizationResult`.
      public var deleteOrganizationResult: Components.Schemas.DeleteOrganizationResult?
      /// - Remark: Generated from `#/components/schemas/Result/deletePolicyResult`.
      public var deletePolicyResult: Components.Schemas.DeletePolicyResult?
      /// - Remark: Generated from `#/components/schemas/Result/createUserTagResult`.
      public var createUserTagResult: Components.Schemas.CreateUserTagResult?
      /// - Remark: Generated from `#/components/schemas/Result/deleteUserTagsResult`.
      public var deleteUserTagsResult: Components.Schemas.DeleteUserTagsResult?
      /// - Remark: Generated from `#/components/schemas/Result/signTransactionResult`.
      public var signTransactionResult: Components.Schemas.SignTransactionResult?
      /// - Remark: Generated from `#/components/schemas/Result/deleteApiKeysResult`.
      public var deleteApiKeysResult: Components.Schemas.DeleteApiKeysResult?
      /// - Remark: Generated from `#/components/schemas/Result/createApiKeysResult`.
      public var createApiKeysResult: Components.Schemas.CreateApiKeysResult?
      /// - Remark: Generated from `#/components/schemas/Result/createPrivateKeyTagResult`.
      public var createPrivateKeyTagResult: Components.Schemas.CreatePrivateKeyTagResult?
      /// - Remark: Generated from `#/components/schemas/Result/deletePrivateKeyTagsResult`.
      public var deletePrivateKeyTagsResult: Components.Schemas.DeletePrivateKeyTagsResult?
      /// - Remark: Generated from `#/components/schemas/Result/setPaymentMethodResult`.
      public var setPaymentMethodResult: Components.Schemas.SetPaymentMethodResult?
      /// - Remark: Generated from `#/components/schemas/Result/activateBillingTierResult`.
      public var activateBillingTierResult: Components.Schemas.ActivateBillingTierResult?
      /// - Remark: Generated from `#/components/schemas/Result/deletePaymentMethodResult`.
      public var deletePaymentMethodResult: Components.Schemas.DeletePaymentMethodResult?
      /// - Remark: Generated from `#/components/schemas/Result/createApiOnlyUsersResult`.
      public var createApiOnlyUsersResult: Components.Schemas.CreateApiOnlyUsersResult?
      /// - Remark: Generated from `#/components/schemas/Result/updateRootQuorumResult`.
      public var updateRootQuorumResult: Components.Schemas.UpdateRootQuorumResult?
      /// - Remark: Generated from `#/components/schemas/Result/updateUserTagResult`.
      public var updateUserTagResult: Components.Schemas.UpdateUserTagResult?
      /// - Remark: Generated from `#/components/schemas/Result/updatePrivateKeyTagResult`.
      public var updatePrivateKeyTagResult: Components.Schemas.UpdatePrivateKeyTagResult?
      /// - Remark: Generated from `#/components/schemas/Result/createSubOrganizationResult`.
      public var createSubOrganizationResult: Components.Schemas.CreateSubOrganizationResult?
      /// - Remark: Generated from `#/components/schemas/Result/updateAllowedOriginsResult`.
      public var updateAllowedOriginsResult: Components.Schemas.UpdateAllowedOriginsResult?
      /// - Remark: Generated from `#/components/schemas/Result/createPrivateKeysResultV2`.
      public var createPrivateKeysResultV2: Components.Schemas.CreatePrivateKeysResultV2?
      /// - Remark: Generated from `#/components/schemas/Result/updateUserResult`.
      public var updateUserResult: Components.Schemas.UpdateUserResult?
      /// - Remark: Generated from `#/components/schemas/Result/updatePolicyResult`.
      public var updatePolicyResult: Components.Schemas.UpdatePolicyResult?
      /// - Remark: Generated from `#/components/schemas/Result/createSubOrganizationResultV3`.
      public var createSubOrganizationResultV3: Components.Schemas.CreateSubOrganizationResultV3?
      /// - Remark: Generated from `#/components/schemas/Result/createWalletResult`.
      public var createWalletResult: Components.Schemas.CreateWalletResult?
      /// - Remark: Generated from `#/components/schemas/Result/createWalletAccountsResult`.
      public var createWalletAccountsResult: Components.Schemas.CreateWalletAccountsResult?
      /// - Remark: Generated from `#/components/schemas/Result/initUserEmailRecoveryResult`.
      public var initUserEmailRecoveryResult: Components.Schemas.InitUserEmailRecoveryResult?
      /// - Remark: Generated from `#/components/schemas/Result/recoverUserResult`.
      public var recoverUserResult: Components.Schemas.RecoverUserResult?
      /// - Remark: Generated from `#/components/schemas/Result/setOrganizationFeatureResult`.
      public var setOrganizationFeatureResult: Components.Schemas.SetOrganizationFeatureResult?
      /// - Remark: Generated from `#/components/schemas/Result/removeOrganizationFeatureResult`.
      public var removeOrganizationFeatureResult:
        Components.Schemas.RemoveOrganizationFeatureResult?
      /// - Remark: Generated from `#/components/schemas/Result/exportPrivateKeyResult`.
      public var exportPrivateKeyResult: Components.Schemas.ExportPrivateKeyResult?
      /// - Remark: Generated from `#/components/schemas/Result/exportWalletResult`.
      public var exportWalletResult: Components.Schemas.ExportWalletResult?
      /// - Remark: Generated from `#/components/schemas/Result/createSubOrganizationResultV4`.
      public var createSubOrganizationResultV4: Components.Schemas.CreateSubOrganizationResultV4?
      /// - Remark: Generated from `#/components/schemas/Result/emailAuthResult`.
      public var emailAuthResult: Components.Schemas.EmailAuthResult?
      /// - Remark: Generated from `#/components/schemas/Result/exportWalletAccountResult`.
      public var exportWalletAccountResult: Components.Schemas.ExportWalletAccountResult?
      /// - Remark: Generated from `#/components/schemas/Result/initImportWalletResult`.
      public var initImportWalletResult: Components.Schemas.InitImportWalletResult?
      /// - Remark: Generated from `#/components/schemas/Result/importWalletResult`.
      public var importWalletResult: Components.Schemas.ImportWalletResult?
      /// - Remark: Generated from `#/components/schemas/Result/initImportPrivateKeyResult`.
      public var initImportPrivateKeyResult: Components.Schemas.InitImportPrivateKeyResult?
      /// - Remark: Generated from `#/components/schemas/Result/importPrivateKeyResult`.
      public var importPrivateKeyResult: Components.Schemas.ImportPrivateKeyResult?
      /// - Remark: Generated from `#/components/schemas/Result/createPoliciesResult`.
      public var createPoliciesResult: Components.Schemas.CreatePoliciesResult?
      /// - Remark: Generated from `#/components/schemas/Result/signRawPayloadsResult`.
      public var signRawPayloadsResult: Components.Schemas.SignRawPayloadsResult?
      /// - Remark: Generated from `#/components/schemas/Result/createReadOnlySessionResult`.
      public var createReadOnlySessionResult: Components.Schemas.CreateReadOnlySessionResult?
      /// - Remark: Generated from `#/components/schemas/Result/createOauthProvidersResult`.
      public var createOauthProvidersResult: Components.Schemas.CreateOauthProvidersResult?
      /// - Remark: Generated from `#/components/schemas/Result/deleteOauthProvidersResult`.
      public var deleteOauthProvidersResult: Components.Schemas.DeleteOauthProvidersResult?
      /// - Remark: Generated from `#/components/schemas/Result/createSubOrganizationResultV5`.
      public var createSubOrganizationResultV5: Components.Schemas.CreateSubOrganizationResultV5?
      /// - Remark: Generated from `#/components/schemas/Result/oauthResult`.
      public var oauthResult: Components.Schemas.OauthResult?
      /// - Remark: Generated from `#/components/schemas/Result/createReadWriteSessionResult`.
      public var createReadWriteSessionResult: Components.Schemas.CreateReadWriteSessionResult?
      /// - Remark: Generated from `#/components/schemas/Result/createSubOrganizationResultV6`.
      public var createSubOrganizationResultV6: Components.Schemas.CreateSubOrganizationResultV6?
      /// - Remark: Generated from `#/components/schemas/Result/deletePrivateKeysResult`.
      public var deletePrivateKeysResult: Components.Schemas.DeletePrivateKeysResult?
      /// - Remark: Generated from `#/components/schemas/Result/deleteWalletsResult`.
      public var deleteWalletsResult: Components.Schemas.DeleteWalletsResult?
      /// - Remark: Generated from `#/components/schemas/Result/createReadWriteSessionResultV2`.
      public var createReadWriteSessionResultV2: Components.Schemas.CreateReadWriteSessionResultV2?
      /// - Remark: Generated from `#/components/schemas/Result/deleteSubOrganizationResult`.
      public var deleteSubOrganizationResult: Components.Schemas.DeleteSubOrganizationResult?
      /// - Remark: Generated from `#/components/schemas/Result/initOtpAuthResult`.
      public var initOtpAuthResult: Components.Schemas.InitOtpAuthResult?
      /// - Remark: Generated from `#/components/schemas/Result/otpAuthResult`.
      public var otpAuthResult: Components.Schemas.OtpAuthResult?
      /// - Remark: Generated from `#/components/schemas/Result/createSubOrganizationResultV7`.
      public var createSubOrganizationResultV7: Components.Schemas.CreateSubOrganizationResultV7?
      /// - Remark: Generated from `#/components/schemas/Result/updateWalletResult`.
      public var updateWalletResult: Components.Schemas.UpdateWalletResult?
      /// - Remark: Generated from `#/components/schemas/Result/updatePolicyResultV2`.
      public var updatePolicyResultV2: Components.Schemas.UpdatePolicyResultV2?
      /// - Remark: Generated from `#/components/schemas/Result/initOtpAuthResultV2`.
      public var initOtpAuthResultV2: Components.Schemas.InitOtpAuthResultV2?
      /// - Remark: Generated from `#/components/schemas/Result/initOtpResult`.
      public var initOtpResult: Components.Schemas.InitOtpResult?
      /// - Remark: Generated from `#/components/schemas/Result/verifyOtpResult`.
      public var verifyOtpResult: Components.Schemas.VerifyOtpResult?
      /// - Remark: Generated from `#/components/schemas/Result/otpLoginResult`.
      public var otpLoginResult: Components.Schemas.OtpLoginResult?
      /// - Remark: Generated from `#/components/schemas/Result/stampLoginResult`.
      public var stampLoginResult: Components.Schemas.StampLoginResult?
      /// - Remark: Generated from `#/components/schemas/Result/oauthLoginResult`.
      public var oauthLoginResult: Components.Schemas.OauthLoginResult?
      /// - Remark: Generated from `#/components/schemas/Result/updateUserNameResult`.
      public var updateUserNameResult: Components.Schemas.UpdateUserNameResult?
      /// - Remark: Generated from `#/components/schemas/Result/updateUserEmailResult`.
      public var updateUserEmailResult: Components.Schemas.UpdateUserEmailResult?
      /// - Remark: Generated from `#/components/schemas/Result/updateUserPhoneNumberResult`.
      public var updateUserPhoneNumberResult: Components.Schemas.UpdateUserPhoneNumberResult?
      /// Creates a new `Result`.
      ///
      /// - Parameters:
      ///   - createOrganizationResult:
      ///   - createAuthenticatorsResult:
      ///   - createUsersResult:
      ///   - createPrivateKeysResult:
      ///   - createInvitationsResult:
      ///   - acceptInvitationResult:
      ///   - signRawPayloadResult:
      ///   - createPolicyResult:
      ///   - disablePrivateKeyResult:
      ///   - deleteUsersResult:
      ///   - deleteAuthenticatorsResult:
      ///   - deleteInvitationResult:
      ///   - deleteOrganizationResult:
      ///   - deletePolicyResult:
      ///   - createUserTagResult:
      ///   - deleteUserTagsResult:
      ///   - signTransactionResult:
      ///   - deleteApiKeysResult:
      ///   - createApiKeysResult:
      ///   - createPrivateKeyTagResult:
      ///   - deletePrivateKeyTagsResult:
      ///   - setPaymentMethodResult:
      ///   - activateBillingTierResult:
      ///   - deletePaymentMethodResult:
      ///   - createApiOnlyUsersResult:
      ///   - updateRootQuorumResult:
      ///   - updateUserTagResult:
      ///   - updatePrivateKeyTagResult:
      ///   - createSubOrganizationResult:
      ///   - updateAllowedOriginsResult:
      ///   - createPrivateKeysResultV2:
      ///   - updateUserResult:
      ///   - updatePolicyResult:
      ///   - createSubOrganizationResultV3:
      ///   - createWalletResult:
      ///   - createWalletAccountsResult:
      ///   - initUserEmailRecoveryResult:
      ///   - recoverUserResult:
      ///   - setOrganizationFeatureResult:
      ///   - removeOrganizationFeatureResult:
      ///   - exportPrivateKeyResult:
      ///   - exportWalletResult:
      ///   - createSubOrganizationResultV4:
      ///   - emailAuthResult:
      ///   - exportWalletAccountResult:
      ///   - initImportWalletResult:
      ///   - importWalletResult:
      ///   - initImportPrivateKeyResult:
      ///   - importPrivateKeyResult:
      ///   - createPoliciesResult:
      ///   - signRawPayloadsResult:
      ///   - createReadOnlySessionResult:
      ///   - createOauthProvidersResult:
      ///   - deleteOauthProvidersResult:
      ///   - createSubOrganizationResultV5:
      ///   - oauthResult:
      ///   - createReadWriteSessionResult:
      ///   - createSubOrganizationResultV6:
      ///   - deletePrivateKeysResult:
      ///   - deleteWalletsResult:
      ///   - createReadWriteSessionResultV2:
      ///   - deleteSubOrganizationResult:
      ///   - initOtpAuthResult:
      ///   - otpAuthResult:
      ///   - createSubOrganizationResultV7:
      ///   - updateWalletResult:
      ///   - updatePolicyResultV2:
      ///   - initOtpAuthResultV2:
      ///   - initOtpResult:
      ///   - verifyOtpResult:
      ///   - otpLoginResult:
      ///   - stampLoginResult:
      ///   - oauthLoginResult:
      ///   - updateUserNameResult:
      ///   - updateUserEmailResult:
      ///   - updateUserPhoneNumberResult:
      public init(
        createOrganizationResult: Components.Schemas.CreateOrganizationResult? = nil,
        createAuthenticatorsResult: Components.Schemas.CreateAuthenticatorsResult? = nil,
        createUsersResult: Components.Schemas.CreateUsersResult? = nil,
        createPrivateKeysResult: Components.Schemas.CreatePrivateKeysResult? = nil,
        createInvitationsResult: Components.Schemas.CreateInvitationsResult? = nil,
        acceptInvitationResult: Components.Schemas.AcceptInvitationResult? = nil,
        signRawPayloadResult: Components.Schemas.SignRawPayloadResult? = nil,
        createPolicyResult: Components.Schemas.CreatePolicyResult? = nil,
        disablePrivateKeyResult: Components.Schemas.DisablePrivateKeyResult? = nil,
        deleteUsersResult: Components.Schemas.DeleteUsersResult? = nil,
        deleteAuthenticatorsResult: Components.Schemas.DeleteAuthenticatorsResult? = nil,
        deleteInvitationResult: Components.Schemas.DeleteInvitationResult? = nil,
        deleteOrganizationResult: Components.Schemas.DeleteOrganizationResult? = nil,
        deletePolicyResult: Components.Schemas.DeletePolicyResult? = nil,
        createUserTagResult: Components.Schemas.CreateUserTagResult? = nil,
        deleteUserTagsResult: Components.Schemas.DeleteUserTagsResult? = nil,
        signTransactionResult: Components.Schemas.SignTransactionResult? = nil,
        deleteApiKeysResult: Components.Schemas.DeleteApiKeysResult? = nil,
        createApiKeysResult: Components.Schemas.CreateApiKeysResult? = nil,
        createPrivateKeyTagResult: Components.Schemas.CreatePrivateKeyTagResult? = nil,
        deletePrivateKeyTagsResult: Components.Schemas.DeletePrivateKeyTagsResult? = nil,
        setPaymentMethodResult: Components.Schemas.SetPaymentMethodResult? = nil,
        activateBillingTierResult: Components.Schemas.ActivateBillingTierResult? = nil,
        deletePaymentMethodResult: Components.Schemas.DeletePaymentMethodResult? = nil,
        createApiOnlyUsersResult: Components.Schemas.CreateApiOnlyUsersResult? = nil,
        updateRootQuorumResult: Components.Schemas.UpdateRootQuorumResult? = nil,
        updateUserTagResult: Components.Schemas.UpdateUserTagResult? = nil,
        updatePrivateKeyTagResult: Components.Schemas.UpdatePrivateKeyTagResult? = nil,
        createSubOrganizationResult: Components.Schemas.CreateSubOrganizationResult? = nil,
        updateAllowedOriginsResult: Components.Schemas.UpdateAllowedOriginsResult? = nil,
        createPrivateKeysResultV2: Components.Schemas.CreatePrivateKeysResultV2? = nil,
        updateUserResult: Components.Schemas.UpdateUserResult? = nil,
        updatePolicyResult: Components.Schemas.UpdatePolicyResult? = nil,
        createSubOrganizationResultV3: Components.Schemas.CreateSubOrganizationResultV3? = nil,
        createWalletResult: Components.Schemas.CreateWalletResult? = nil,
        createWalletAccountsResult: Components.Schemas.CreateWalletAccountsResult? = nil,
        initUserEmailRecoveryResult: Components.Schemas.InitUserEmailRecoveryResult? = nil,
        recoverUserResult: Components.Schemas.RecoverUserResult? = nil,
        setOrganizationFeatureResult: Components.Schemas.SetOrganizationFeatureResult? = nil,
        removeOrganizationFeatureResult: Components.Schemas.RemoveOrganizationFeatureResult? = nil,
        exportPrivateKeyResult: Components.Schemas.ExportPrivateKeyResult? = nil,
        exportWalletResult: Components.Schemas.ExportWalletResult? = nil,
        createSubOrganizationResultV4: Components.Schemas.CreateSubOrganizationResultV4? = nil,
        emailAuthResult: Components.Schemas.EmailAuthResult? = nil,
        exportWalletAccountResult: Components.Schemas.ExportWalletAccountResult? = nil,
        initImportWalletResult: Components.Schemas.InitImportWalletResult? = nil,
        importWalletResult: Components.Schemas.ImportWalletResult? = nil,
        initImportPrivateKeyResult: Components.Schemas.InitImportPrivateKeyResult? = nil,
        importPrivateKeyResult: Components.Schemas.ImportPrivateKeyResult? = nil,
        createPoliciesResult: Components.Schemas.CreatePoliciesResult? = nil,
        signRawPayloadsResult: Components.Schemas.SignRawPayloadsResult? = nil,
        createReadOnlySessionResult: Components.Schemas.CreateReadOnlySessionResult? = nil,
        createOauthProvidersResult: Components.Schemas.CreateOauthProvidersResult? = nil,
        deleteOauthProvidersResult: Components.Schemas.DeleteOauthProvidersResult? = nil,
        createSubOrganizationResultV5: Components.Schemas.CreateSubOrganizationResultV5? = nil,
        oauthResult: Components.Schemas.OauthResult? = nil,
        createReadWriteSessionResult: Components.Schemas.CreateReadWriteSessionResult? = nil,
        createSubOrganizationResultV6: Components.Schemas.CreateSubOrganizationResultV6? = nil,
        deletePrivateKeysResult: Components.Schemas.DeletePrivateKeysResult? = nil,
        deleteWalletsResult: Components.Schemas.DeleteWalletsResult? = nil,
        createReadWriteSessionResultV2: Components.Schemas.CreateReadWriteSessionResultV2? = nil,
        deleteSubOrganizationResult: Components.Schemas.DeleteSubOrganizationResult? = nil,
        initOtpAuthResult: Components.Schemas.InitOtpAuthResult? = nil,
        otpAuthResult: Components.Schemas.OtpAuthResult? = nil,
        createSubOrganizationResultV7: Components.Schemas.CreateSubOrganizationResultV7? = nil,
        updateWalletResult: Components.Schemas.UpdateWalletResult? = nil,
        updatePolicyResultV2: Components.Schemas.UpdatePolicyResultV2? = nil,
        initOtpAuthResultV2: Components.Schemas.InitOtpAuthResultV2? = nil,
        initOtpResult: Components.Schemas.InitOtpResult? = nil,
        verifyOtpResult: Components.Schemas.VerifyOtpResult? = nil,
        otpLoginResult: Components.Schemas.OtpLoginResult? = nil,
        stampLoginResult: Components.Schemas.StampLoginResult? = nil,
        oauthLoginResult: Components.Schemas.OauthLoginResult? = nil,
        updateUserNameResult: Components.Schemas.UpdateUserNameResult? = nil,
        updateUserEmailResult: Components.Schemas.UpdateUserEmailResult? = nil,
        updateUserPhoneNumberResult: Components.Schemas.UpdateUserPhoneNumberResult? = nil
      ) {
        self.createOrganizationResult = createOrganizationResult
        self.createAuthenticatorsResult = createAuthenticatorsResult
        self.createUsersResult = createUsersResult
        self.createPrivateKeysResult = createPrivateKeysResult
        self.createInvitationsResult = createInvitationsResult
        self.acceptInvitationResult = acceptInvitationResult
        self.signRawPayloadResult = signRawPayloadResult
        self.createPolicyResult = createPolicyResult
        self.disablePrivateKeyResult = disablePrivateKeyResult
        self.deleteUsersResult = deleteUsersResult
        self.deleteAuthenticatorsResult = deleteAuthenticatorsResult
        self.deleteInvitationResult = deleteInvitationResult
        self.deleteOrganizationResult = deleteOrganizationResult
        self.deletePolicyResult = deletePolicyResult
        self.createUserTagResult = createUserTagResult
        self.deleteUserTagsResult = deleteUserTagsResult
        self.signTransactionResult = signTransactionResult
        self.deleteApiKeysResult = deleteApiKeysResult
        self.createApiKeysResult = createApiKeysResult
        self.createPrivateKeyTagResult = createPrivateKeyTagResult
        self.deletePrivateKeyTagsResult = deletePrivateKeyTagsResult
        self.setPaymentMethodResult = setPaymentMethodResult
        self.activateBillingTierResult = activateBillingTierResult
        self.deletePaymentMethodResult = deletePaymentMethodResult
        self.createApiOnlyUsersResult = createApiOnlyUsersResult
        self.updateRootQuorumResult = updateRootQuorumResult
        self.updateUserTagResult = updateUserTagResult
        self.updatePrivateKeyTagResult = updatePrivateKeyTagResult
        self.createSubOrganizationResult = createSubOrganizationResult
        self.updateAllowedOriginsResult = updateAllowedOriginsResult
        self.createPrivateKeysResultV2 = createPrivateKeysResultV2
        self.updateUserResult = updateUserResult
        self.updatePolicyResult = updatePolicyResult
        self.createSubOrganizationResultV3 = createSubOrganizationResultV3
        self.createWalletResult = createWalletResult
        self.createWalletAccountsResult = createWalletAccountsResult
        self.initUserEmailRecoveryResult = initUserEmailRecoveryResult
        self.recoverUserResult = recoverUserResult
        self.setOrganizationFeatureResult = setOrganizationFeatureResult
        self.removeOrganizationFeatureResult = removeOrganizationFeatureResult
        self.exportPrivateKeyResult = exportPrivateKeyResult
        self.exportWalletResult = exportWalletResult
        self.createSubOrganizationResultV4 = createSubOrganizationResultV4
        self.emailAuthResult = emailAuthResult
        self.exportWalletAccountResult = exportWalletAccountResult
        self.initImportWalletResult = initImportWalletResult
        self.importWalletResult = importWalletResult
        self.initImportPrivateKeyResult = initImportPrivateKeyResult
        self.importPrivateKeyResult = importPrivateKeyResult
        self.createPoliciesResult = createPoliciesResult
        self.signRawPayloadsResult = signRawPayloadsResult
        self.createReadOnlySessionResult = createReadOnlySessionResult
        self.createOauthProvidersResult = createOauthProvidersResult
        self.deleteOauthProvidersResult = deleteOauthProvidersResult
        self.createSubOrganizationResultV5 = createSubOrganizationResultV5
        self.oauthResult = oauthResult
        self.createReadWriteSessionResult = createReadWriteSessionResult
        self.createSubOrganizationResultV6 = createSubOrganizationResultV6
        self.deletePrivateKeysResult = deletePrivateKeysResult
        self.deleteWalletsResult = deleteWalletsResult
        self.createReadWriteSessionResultV2 = createReadWriteSessionResultV2
        self.deleteSubOrganizationResult = deleteSubOrganizationResult
        self.initOtpAuthResult = initOtpAuthResult
        self.otpAuthResult = otpAuthResult
        self.createSubOrganizationResultV7 = createSubOrganizationResultV7
        self.updateWalletResult = updateWalletResult
        self.updatePolicyResultV2 = updatePolicyResultV2
        self.initOtpAuthResultV2 = initOtpAuthResultV2
        self.initOtpResult = initOtpResult
        self.verifyOtpResult = verifyOtpResult
        self.otpLoginResult = otpLoginResult
        self.stampLoginResult = stampLoginResult
        self.oauthLoginResult = oauthLoginResult
        self.updateUserNameResult = updateUserNameResult
        self.updateUserEmailResult = updateUserEmailResult
        self.updateUserPhoneNumberResult = updateUserPhoneNumberResult
      }
      public enum CodingKeys: String, CodingKey {
        case createOrganizationResult
        case createAuthenticatorsResult
        case createUsersResult
        case createPrivateKeysResult
        case createInvitationsResult
        case acceptInvitationResult
        case signRawPayloadResult
        case createPolicyResult
        case disablePrivateKeyResult
        case deleteUsersResult
        case deleteAuthenticatorsResult
        case deleteInvitationResult
        case deleteOrganizationResult
        case deletePolicyResult
        case createUserTagResult
        case deleteUserTagsResult
        case signTransactionResult
        case deleteApiKeysResult
        case createApiKeysResult
        case createPrivateKeyTagResult
        case deletePrivateKeyTagsResult
        case setPaymentMethodResult
        case activateBillingTierResult
        case deletePaymentMethodResult
        case createApiOnlyUsersResult
        case updateRootQuorumResult
        case updateUserTagResult
        case updatePrivateKeyTagResult
        case createSubOrganizationResult
        case updateAllowedOriginsResult
        case createPrivateKeysResultV2
        case updateUserResult
        case updatePolicyResult
        case createSubOrganizationResultV3
        case createWalletResult
        case createWalletAccountsResult
        case initUserEmailRecoveryResult
        case recoverUserResult
        case setOrganizationFeatureResult
        case removeOrganizationFeatureResult
        case exportPrivateKeyResult
        case exportWalletResult
        case createSubOrganizationResultV4
        case emailAuthResult
        case exportWalletAccountResult
        case initImportWalletResult
        case importWalletResult
        case initImportPrivateKeyResult
        case importPrivateKeyResult
        case createPoliciesResult
        case signRawPayloadsResult
        case createReadOnlySessionResult
        case createOauthProvidersResult
        case deleteOauthProvidersResult
        case createSubOrganizationResultV5
        case oauthResult
        case createReadWriteSessionResult
        case createSubOrganizationResultV6
        case deletePrivateKeysResult
        case deleteWalletsResult
        case createReadWriteSessionResultV2
        case deleteSubOrganizationResult
        case initOtpAuthResult
        case otpAuthResult
        case createSubOrganizationResultV7
        case updateWalletResult
        case updatePolicyResultV2
        case initOtpAuthResultV2
        case initOtpResult
        case verifyOtpResult
        case otpLoginResult
        case stampLoginResult
        case oauthLoginResult
        case updateUserNameResult
        case updateUserEmailResult
        case updateUserPhoneNumberResult
      }
    }
    /// - Remark: Generated from `#/components/schemas/RootUserParams`.
    public struct RootUserParams: Codable, Hashable, Sendable {
      /// Human-readable name for a User.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParams/userName`.
      public var userName: Swift.String
      /// The user's email address.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParams/userEmail`.
      public var userEmail: Swift.String?
      /// A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParams/apiKeys`.
      public var apiKeys: [Components.Schemas.ApiKeyParams]
      /// A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParams/authenticators`.
      public var authenticators: [Components.Schemas.AuthenticatorParamsV2]
      /// Creates a new `RootUserParams`.
      ///
      /// - Parameters:
      ///   - userName: Human-readable name for a User.
      ///   - userEmail: The user's email address.
      ///   - apiKeys: A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///   - authenticators: A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.
      public init(
        userName: Swift.String,
        userEmail: Swift.String? = nil,
        apiKeys: [Components.Schemas.ApiKeyParams],
        authenticators: [Components.Schemas.AuthenticatorParamsV2]
      ) {
        self.userName = userName
        self.userEmail = userEmail
        self.apiKeys = apiKeys
        self.authenticators = authenticators
      }
      public enum CodingKeys: String, CodingKey {
        case userName
        case userEmail
        case apiKeys
        case authenticators
      }
    }
    /// - Remark: Generated from `#/components/schemas/RootUserParamsV2`.
    public struct RootUserParamsV2: Codable, Hashable, Sendable {
      /// Human-readable name for a User.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV2/userName`.
      public var userName: Swift.String
      /// The user's email address.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV2/userEmail`.
      public var userEmail: Swift.String?
      /// A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV2/apiKeys`.
      public var apiKeys: [Components.Schemas.ApiKeyParams]
      /// A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV2/authenticators`.
      public var authenticators: [Components.Schemas.AuthenticatorParamsV2]
      /// A list of Oauth providers. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV2/oauthProviders`.
      public var oauthProviders: [Components.Schemas.OauthProviderParams]
      /// Creates a new `RootUserParamsV2`.
      ///
      /// - Parameters:
      ///   - userName: Human-readable name for a User.
      ///   - userEmail: The user's email address.
      ///   - apiKeys: A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///   - authenticators: A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.
      ///   - oauthProviders: A list of Oauth providers. This field, if not needed, should be an empty array in your request body.
      public init(
        userName: Swift.String,
        userEmail: Swift.String? = nil,
        apiKeys: [Components.Schemas.ApiKeyParams],
        authenticators: [Components.Schemas.AuthenticatorParamsV2],
        oauthProviders: [Components.Schemas.OauthProviderParams]
      ) {
        self.userName = userName
        self.userEmail = userEmail
        self.apiKeys = apiKeys
        self.authenticators = authenticators
        self.oauthProviders = oauthProviders
      }
      public enum CodingKeys: String, CodingKey {
        case userName
        case userEmail
        case apiKeys
        case authenticators
        case oauthProviders
      }
    }
    /// - Remark: Generated from `#/components/schemas/RootUserParamsV3`.
    public struct RootUserParamsV3: Codable, Hashable, Sendable {
      /// Human-readable name for a User.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV3/userName`.
      public var userName: Swift.String
      /// The user's email address.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV3/userEmail`.
      public var userEmail: Swift.String?
      /// A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV3/apiKeys`.
      public var apiKeys: [Components.Schemas.ApiKeyParamsV2]
      /// A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV3/authenticators`.
      public var authenticators: [Components.Schemas.AuthenticatorParamsV2]
      /// A list of Oauth providers. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV3/oauthProviders`.
      public var oauthProviders: [Components.Schemas.OauthProviderParams]
      /// Creates a new `RootUserParamsV3`.
      ///
      /// - Parameters:
      ///   - userName: Human-readable name for a User.
      ///   - userEmail: The user's email address.
      ///   - apiKeys: A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///   - authenticators: A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.
      ///   - oauthProviders: A list of Oauth providers. This field, if not needed, should be an empty array in your request body.
      public init(
        userName: Swift.String,
        userEmail: Swift.String? = nil,
        apiKeys: [Components.Schemas.ApiKeyParamsV2],
        authenticators: [Components.Schemas.AuthenticatorParamsV2],
        oauthProviders: [Components.Schemas.OauthProviderParams]
      ) {
        self.userName = userName
        self.userEmail = userEmail
        self.apiKeys = apiKeys
        self.authenticators = authenticators
        self.oauthProviders = oauthProviders
      }
      public enum CodingKeys: String, CodingKey {
        case userName
        case userEmail
        case apiKeys
        case authenticators
        case oauthProviders
      }
    }
    /// - Remark: Generated from `#/components/schemas/RootUserParamsV4`.
    public struct RootUserParamsV4: Codable, Hashable, Sendable {
      /// Human-readable name for a User.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV4/userName`.
      public var userName: Swift.String
      /// The user's email address.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV4/userEmail`.
      public var userEmail: Swift.String?
      /// The user's phone number in E.164 format e.g. +13214567890
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV4/userPhoneNumber`.
      public var userPhoneNumber: Swift.String?
      /// A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV4/apiKeys`.
      public var apiKeys: [Components.Schemas.ApiKeyParamsV2]
      /// A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV4/authenticators`.
      public var authenticators: [Components.Schemas.AuthenticatorParamsV2]
      /// A list of Oauth providers. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/RootUserParamsV4/oauthProviders`.
      public var oauthProviders: [Components.Schemas.OauthProviderParams]
      /// Creates a new `RootUserParamsV4`.
      ///
      /// - Parameters:
      ///   - userName: Human-readable name for a User.
      ///   - userEmail: The user's email address.
      ///   - userPhoneNumber: The user's phone number in E.164 format e.g. +13214567890
      ///   - apiKeys: A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///   - authenticators: A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.
      ///   - oauthProviders: A list of Oauth providers. This field, if not needed, should be an empty array in your request body.
      public init(
        userName: Swift.String,
        userEmail: Swift.String? = nil,
        userPhoneNumber: Swift.String? = nil,
        apiKeys: [Components.Schemas.ApiKeyParamsV2],
        authenticators: [Components.Schemas.AuthenticatorParamsV2],
        oauthProviders: [Components.Schemas.OauthProviderParams]
      ) {
        self.userName = userName
        self.userEmail = userEmail
        self.userPhoneNumber = userPhoneNumber
        self.apiKeys = apiKeys
        self.authenticators = authenticators
        self.oauthProviders = oauthProviders
      }
      public enum CodingKeys: String, CodingKey {
        case userName
        case userEmail
        case userPhoneNumber
        case apiKeys
        case authenticators
        case oauthProviders
      }
    }
    /// - Remark: Generated from `#/components/schemas/Selector`.
    public struct Selector: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/Selector/subject`.
      public var subject: Swift.String?
      /// - Remark: Generated from `#/components/schemas/Selector/operator`.
      public var _operator: Components.Schemas.Operator?
      /// - Remark: Generated from `#/components/schemas/Selector/target`.
      public var target: Swift.String?
      /// Creates a new `Selector`.
      ///
      /// - Parameters:
      ///   - subject:
      ///   - _operator:
      ///   - target:
      public init(
        subject: Swift.String? = nil,
        _operator: Components.Schemas.Operator? = nil,
        target: Swift.String? = nil
      ) {
        self.subject = subject
        self._operator = _operator
        self.target = target
      }
      public enum CodingKeys: String, CodingKey {
        case subject
        case _operator = "operator"
        case target
      }
    }
    /// - Remark: Generated from `#/components/schemas/SelectorV2`.
    public struct SelectorV2: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/SelectorV2/subject`.
      public var subject: Swift.String?
      /// - Remark: Generated from `#/components/schemas/SelectorV2/operator`.
      public var _operator: Components.Schemas.Operator?
      /// - Remark: Generated from `#/components/schemas/SelectorV2/targets`.
      public var targets: [Swift.String]?
      /// Creates a new `SelectorV2`.
      ///
      /// - Parameters:
      ///   - subject:
      ///   - _operator:
      ///   - targets:
      public init(
        subject: Swift.String? = nil,
        _operator: Components.Schemas.Operator? = nil,
        targets: [Swift.String]? = nil
      ) {
        self.subject = subject
        self._operator = _operator
        self.targets = targets
      }
      public enum CodingKeys: String, CodingKey {
        case subject
        case _operator = "operator"
        case targets
      }
    }
    /// - Remark: Generated from `#/components/schemas/SetOrganizationFeatureIntent`.
    public struct SetOrganizationFeatureIntent: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/SetOrganizationFeatureIntent/name`.
      public var name: Components.Schemas.FeatureName
      /// Optional value for the feature. Will override existing values if feature is already set.
      ///
      /// - Remark: Generated from `#/components/schemas/SetOrganizationFeatureIntent/value`.
      public var value: Swift.String?
      /// Creates a new `SetOrganizationFeatureIntent`.
      ///
      /// - Parameters:
      ///   - name:
      ///   - value: Optional value for the feature. Will override existing values if feature is already set.
      public init(
        name: Components.Schemas.FeatureName,
        value: Swift.String? = nil
      ) {
        self.name = name
        self.value = value
      }
      public enum CodingKeys: String, CodingKey {
        case name
        case value
      }
    }
    /// - Remark: Generated from `#/components/schemas/SetOrganizationFeatureRequest`.
    public struct SetOrganizationFeatureRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/SetOrganizationFeatureRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE = "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE"
      }
      /// - Remark: Generated from `#/components/schemas/SetOrganizationFeatureRequest/type`.
      public var _type: Components.Schemas.SetOrganizationFeatureRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/SetOrganizationFeatureRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/SetOrganizationFeatureRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/SetOrganizationFeatureRequest/parameters`.
      public var parameters: Components.Schemas.SetOrganizationFeatureIntent
      /// Creates a new `SetOrganizationFeatureRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.SetOrganizationFeatureRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.SetOrganizationFeatureIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/SetOrganizationFeatureResult`.
    public struct SetOrganizationFeatureResult: Codable, Hashable, Sendable {
      /// Resulting list of organization features.
      ///
      /// - Remark: Generated from `#/components/schemas/SetOrganizationFeatureResult/features`.
      public var features: [Components.Schemas.Feature]
      /// Creates a new `SetOrganizationFeatureResult`.
      ///
      /// - Parameters:
      ///   - features: Resulting list of organization features.
      public init(features: [Components.Schemas.Feature]) {
        self.features = features
      }
      public enum CodingKeys: String, CodingKey {
        case features
      }
    }
    /// - Remark: Generated from `#/components/schemas/SetPaymentMethodIntent`.
    public struct SetPaymentMethodIntent: Codable, Hashable, Sendable {
      /// The account number of the customer's credit card.
      ///
      /// - Remark: Generated from `#/components/schemas/SetPaymentMethodIntent/number`.
      public var number: Swift.String
      /// The verification digits of the customer's credit card.
      ///
      /// - Remark: Generated from `#/components/schemas/SetPaymentMethodIntent/cvv`.
      public var cvv: Swift.String
      /// The month that the credit card expires.
      ///
      /// - Remark: Generated from `#/components/schemas/SetPaymentMethodIntent/expiryMonth`.
      public var expiryMonth: Swift.String
      /// The year that the credit card expires.
      ///
      /// - Remark: Generated from `#/components/schemas/SetPaymentMethodIntent/expiryYear`.
      public var expiryYear: Swift.String
      /// The email that will receive invoices for the credit card.
      ///
      /// - Remark: Generated from `#/components/schemas/SetPaymentMethodIntent/cardHolderEmail`.
      public var cardHolderEmail: Swift.String
      /// The name associated with the credit card.
      ///
      /// - Remark: Generated from `#/components/schemas/SetPaymentMethodIntent/cardHolderName`.
      public var cardHolderName: Swift.String
      /// Creates a new `SetPaymentMethodIntent`.
      ///
      /// - Parameters:
      ///   - number: The account number of the customer's credit card.
      ///   - cvv: The verification digits of the customer's credit card.
      ///   - expiryMonth: The month that the credit card expires.
      ///   - expiryYear: The year that the credit card expires.
      ///   - cardHolderEmail: The email that will receive invoices for the credit card.
      ///   - cardHolderName: The name associated with the credit card.
      public init(
        number: Swift.String,
        cvv: Swift.String,
        expiryMonth: Swift.String,
        expiryYear: Swift.String,
        cardHolderEmail: Swift.String,
        cardHolderName: Swift.String
      ) {
        self.number = number
        self.cvv = cvv
        self.expiryMonth = expiryMonth
        self.expiryYear = expiryYear
        self.cardHolderEmail = cardHolderEmail
        self.cardHolderName = cardHolderName
      }
      public enum CodingKeys: String, CodingKey {
        case number
        case cvv
        case expiryMonth
        case expiryYear
        case cardHolderEmail
        case cardHolderName
      }
    }
    /// - Remark: Generated from `#/components/schemas/SetPaymentMethodIntentV2`.
    public struct SetPaymentMethodIntentV2: Codable, Hashable, Sendable {
      /// The id of the payment method that was created clientside.
      ///
      /// - Remark: Generated from `#/components/schemas/SetPaymentMethodIntentV2/paymentMethodId`.
      public var paymentMethodId: Swift.String
      /// The email that will receive invoices for the credit card.
      ///
      /// - Remark: Generated from `#/components/schemas/SetPaymentMethodIntentV2/cardHolderEmail`.
      public var cardHolderEmail: Swift.String
      /// The name associated with the credit card.
      ///
      /// - Remark: Generated from `#/components/schemas/SetPaymentMethodIntentV2/cardHolderName`.
      public var cardHolderName: Swift.String
      /// Creates a new `SetPaymentMethodIntentV2`.
      ///
      /// - Parameters:
      ///   - paymentMethodId: The id of the payment method that was created clientside.
      ///   - cardHolderEmail: The email that will receive invoices for the credit card.
      ///   - cardHolderName: The name associated with the credit card.
      public init(
        paymentMethodId: Swift.String,
        cardHolderEmail: Swift.String,
        cardHolderName: Swift.String
      ) {
        self.paymentMethodId = paymentMethodId
        self.cardHolderEmail = cardHolderEmail
        self.cardHolderName = cardHolderName
      }
      public enum CodingKeys: String, CodingKey {
        case paymentMethodId
        case cardHolderEmail
        case cardHolderName
      }
    }
    /// - Remark: Generated from `#/components/schemas/SetPaymentMethodResult`.
    public struct SetPaymentMethodResult: Codable, Hashable, Sendable {
      /// The last four digits of the credit card added.
      ///
      /// - Remark: Generated from `#/components/schemas/SetPaymentMethodResult/lastFour`.
      public var lastFour: Swift.String
      /// The name associated with the payment method.
      ///
      /// - Remark: Generated from `#/components/schemas/SetPaymentMethodResult/cardHolderName`.
      public var cardHolderName: Swift.String
      /// The email address associated with the payment method.
      ///
      /// - Remark: Generated from `#/components/schemas/SetPaymentMethodResult/cardHolderEmail`.
      public var cardHolderEmail: Swift.String
      /// Creates a new `SetPaymentMethodResult`.
      ///
      /// - Parameters:
      ///   - lastFour: The last four digits of the credit card added.
      ///   - cardHolderName: The name associated with the payment method.
      ///   - cardHolderEmail: The email address associated with the payment method.
      public init(
        lastFour: Swift.String,
        cardHolderName: Swift.String,
        cardHolderEmail: Swift.String
      ) {
        self.lastFour = lastFour
        self.cardHolderName = cardHolderName
        self.cardHolderEmail = cardHolderEmail
      }
      public enum CodingKeys: String, CodingKey {
        case lastFour
        case cardHolderName
        case cardHolderEmail
      }
    }
    /// - Remark: Generated from `#/components/schemas/SignRawPayloadIntent`.
    public struct SignRawPayloadIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadIntent/privateKeyId`.
      public var privateKeyId: Swift.String
      /// Raw unsigned payload to be signed.
      ///
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadIntent/payload`.
      public var payload: Swift.String
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadIntent/encoding`.
      public var encoding: Components.Schemas.PayloadEncoding
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadIntent/hashFunction`.
      public var hashFunction: Components.Schemas.HashFunction
      /// Creates a new `SignRawPayloadIntent`.
      ///
      /// - Parameters:
      ///   - privateKeyId: Unique identifier for a given Private Key.
      ///   - payload: Raw unsigned payload to be signed.
      ///   - encoding:
      ///   - hashFunction:
      public init(
        privateKeyId: Swift.String,
        payload: Swift.String,
        encoding: Components.Schemas.PayloadEncoding,
        hashFunction: Components.Schemas.HashFunction
      ) {
        self.privateKeyId = privateKeyId
        self.payload = payload
        self.encoding = encoding
        self.hashFunction = hashFunction
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyId
        case payload
        case encoding
        case hashFunction
      }
    }
    /// - Remark: Generated from `#/components/schemas/SignRawPayloadIntentV2`.
    public struct SignRawPayloadIntentV2: Codable, Hashable, Sendable {
      /// A Wallet account address, Private Key address, or Private Key identifier.
      ///
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadIntentV2/signWith`.
      public var signWith: Swift.String
      /// Raw unsigned payload to be signed.
      ///
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadIntentV2/payload`.
      public var payload: Swift.String
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadIntentV2/encoding`.
      public var encoding: Components.Schemas.PayloadEncoding
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadIntentV2/hashFunction`.
      public var hashFunction: Components.Schemas.HashFunction
      /// Creates a new `SignRawPayloadIntentV2`.
      ///
      /// - Parameters:
      ///   - signWith: A Wallet account address, Private Key address, or Private Key identifier.
      ///   - payload: Raw unsigned payload to be signed.
      ///   - encoding:
      ///   - hashFunction:
      public init(
        signWith: Swift.String,
        payload: Swift.String,
        encoding: Components.Schemas.PayloadEncoding,
        hashFunction: Components.Schemas.HashFunction
      ) {
        self.signWith = signWith
        self.payload = payload
        self.encoding = encoding
        self.hashFunction = hashFunction
      }
      public enum CodingKeys: String, CodingKey {
        case signWith
        case payload
        case encoding
        case hashFunction
      }
    }
    /// - Remark: Generated from `#/components/schemas/SignRawPayloadRequest`.
    public struct SignRawPayloadRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2 = "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2"
      }
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadRequest/type`.
      public var _type: Components.Schemas.SignRawPayloadRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadRequest/parameters`.
      public var parameters: Components.Schemas.SignRawPayloadIntentV2
      /// Creates a new `SignRawPayloadRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.SignRawPayloadRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.SignRawPayloadIntentV2
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/SignRawPayloadResult`.
    public struct SignRawPayloadResult: Codable, Hashable, Sendable {
      /// Component of an ECSDA signature.
      ///
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadResult/r`.
      public var r: Swift.String
      /// Component of an ECSDA signature.
      ///
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadResult/s`.
      public var s: Swift.String
      /// Component of an ECSDA signature.
      ///
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadResult/v`.
      public var v: Swift.String
      /// Creates a new `SignRawPayloadResult`.
      ///
      /// - Parameters:
      ///   - r: Component of an ECSDA signature.
      ///   - s: Component of an ECSDA signature.
      ///   - v: Component of an ECSDA signature.
      public init(
        r: Swift.String,
        s: Swift.String,
        v: Swift.String
      ) {
        self.r = r
        self.s = s
        self.v = v
      }
      public enum CodingKeys: String, CodingKey {
        case r
        case s
        case v
      }
    }
    /// - Remark: Generated from `#/components/schemas/SignRawPayloadsIntent`.
    public struct SignRawPayloadsIntent: Codable, Hashable, Sendable {
      /// A Wallet account address, Private Key address, or Private Key identifier.
      ///
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadsIntent/signWith`.
      public var signWith: Swift.String
      /// An array of raw unsigned payloads to be signed.
      ///
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadsIntent/payloads`.
      public var payloads: [Swift.String]
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadsIntent/encoding`.
      public var encoding: Components.Schemas.PayloadEncoding
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadsIntent/hashFunction`.
      public var hashFunction: Components.Schemas.HashFunction
      /// Creates a new `SignRawPayloadsIntent`.
      ///
      /// - Parameters:
      ///   - signWith: A Wallet account address, Private Key address, or Private Key identifier.
      ///   - payloads: An array of raw unsigned payloads to be signed.
      ///   - encoding:
      ///   - hashFunction:
      public init(
        signWith: Swift.String,
        payloads: [Swift.String],
        encoding: Components.Schemas.PayloadEncoding,
        hashFunction: Components.Schemas.HashFunction
      ) {
        self.signWith = signWith
        self.payloads = payloads
        self.encoding = encoding
        self.hashFunction = hashFunction
      }
      public enum CodingKeys: String, CodingKey {
        case signWith
        case payloads
        case encoding
        case hashFunction
      }
    }
    /// - Remark: Generated from `#/components/schemas/SignRawPayloadsRequest`.
    public struct SignRawPayloadsRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadsRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_SIGN_RAW_PAYLOADS = "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS"
      }
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadsRequest/type`.
      public var _type: Components.Schemas.SignRawPayloadsRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadsRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadsRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadsRequest/parameters`.
      public var parameters: Components.Schemas.SignRawPayloadsIntent
      /// Creates a new `SignRawPayloadsRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.SignRawPayloadsRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.SignRawPayloadsIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/SignRawPayloadsResult`.
    public struct SignRawPayloadsResult: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/SignRawPayloadsResult/signatures`.
      public var signatures: [Components.Schemas.SignRawPayloadResult]?
      /// Creates a new `SignRawPayloadsResult`.
      ///
      /// - Parameters:
      ///   - signatures:
      public init(signatures: [Components.Schemas.SignRawPayloadResult]? = nil) {
        self.signatures = signatures
      }
      public enum CodingKeys: String, CodingKey {
        case signatures
      }
    }
    /// - Remark: Generated from `#/components/schemas/SignTransactionIntent`.
    public struct SignTransactionIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/SignTransactionIntent/privateKeyId`.
      public var privateKeyId: Swift.String
      /// Raw unsigned transaction to be signed by a particular Private Key.
      ///
      /// - Remark: Generated from `#/components/schemas/SignTransactionIntent/unsignedTransaction`.
      public var unsignedTransaction: Swift.String
      /// - Remark: Generated from `#/components/schemas/SignTransactionIntent/type`.
      public var _type: Components.Schemas.TransactionType
      /// Creates a new `SignTransactionIntent`.
      ///
      /// - Parameters:
      ///   - privateKeyId: Unique identifier for a given Private Key.
      ///   - unsignedTransaction: Raw unsigned transaction to be signed by a particular Private Key.
      ///   - _type:
      public init(
        privateKeyId: Swift.String,
        unsignedTransaction: Swift.String,
        _type: Components.Schemas.TransactionType
      ) {
        self.privateKeyId = privateKeyId
        self.unsignedTransaction = unsignedTransaction
        self._type = _type
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyId
        case unsignedTransaction
        case _type = "type"
      }
    }
    /// - Remark: Generated from `#/components/schemas/SignTransactionIntentV2`.
    public struct SignTransactionIntentV2: Codable, Hashable, Sendable {
      /// A Wallet account address, Private Key address, or Private Key identifier.
      ///
      /// - Remark: Generated from `#/components/schemas/SignTransactionIntentV2/signWith`.
      public var signWith: Swift.String
      /// Raw unsigned transaction to be signed
      ///
      /// - Remark: Generated from `#/components/schemas/SignTransactionIntentV2/unsignedTransaction`.
      public var unsignedTransaction: Swift.String
      /// - Remark: Generated from `#/components/schemas/SignTransactionIntentV2/type`.
      public var _type: Components.Schemas.TransactionType
      /// Creates a new `SignTransactionIntentV2`.
      ///
      /// - Parameters:
      ///   - signWith: A Wallet account address, Private Key address, or Private Key identifier.
      ///   - unsignedTransaction: Raw unsigned transaction to be signed
      ///   - _type:
      public init(
        signWith: Swift.String,
        unsignedTransaction: Swift.String,
        _type: Components.Schemas.TransactionType
      ) {
        self.signWith = signWith
        self.unsignedTransaction = unsignedTransaction
        self._type = _type
      }
      public enum CodingKeys: String, CodingKey {
        case signWith
        case unsignedTransaction
        case _type = "type"
      }
    }
    /// - Remark: Generated from `#/components/schemas/SignTransactionRequest`.
    public struct SignTransactionRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/SignTransactionRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_SIGN_TRANSACTION_V2 = "ACTIVITY_TYPE_SIGN_TRANSACTION_V2"
      }
      /// - Remark: Generated from `#/components/schemas/SignTransactionRequest/type`.
      public var _type: Components.Schemas.SignTransactionRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/SignTransactionRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/SignTransactionRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/SignTransactionRequest/parameters`.
      public var parameters: Components.Schemas.SignTransactionIntentV2
      /// Creates a new `SignTransactionRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.SignTransactionRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.SignTransactionIntentV2
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/SignTransactionResult`.
    public struct SignTransactionResult: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/SignTransactionResult/signedTransaction`.
      public var signedTransaction: Swift.String
      /// Creates a new `SignTransactionResult`.
      ///
      /// - Parameters:
      ///   - signedTransaction:
      public init(signedTransaction: Swift.String) {
        self.signedTransaction = signedTransaction
      }
      public enum CodingKeys: String, CodingKey {
        case signedTransaction
      }
    }
    /// - Remark: Generated from `#/components/schemas/SimpleClientExtensionResults`.
    public struct SimpleClientExtensionResults: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/SimpleClientExtensionResults/appid`.
      public var appid: Swift.Bool?
      /// - Remark: Generated from `#/components/schemas/SimpleClientExtensionResults/appidExclude`.
      public var appidExclude: Swift.Bool?
      /// - Remark: Generated from `#/components/schemas/SimpleClientExtensionResults/credProps`.
      public var credProps: Components.Schemas.CredPropsAuthenticationExtensionsClientOutputs?
      /// Creates a new `SimpleClientExtensionResults`.
      ///
      /// - Parameters:
      ///   - appid:
      ///   - appidExclude:
      ///   - credProps:
      public init(
        appid: Swift.Bool? = nil,
        appidExclude: Swift.Bool? = nil,
        credProps: Components.Schemas.CredPropsAuthenticationExtensionsClientOutputs? = nil
      ) {
        self.appid = appid
        self.appidExclude = appidExclude
        self.credProps = credProps
      }
      public enum CodingKeys: String, CodingKey {
        case appid
        case appidExclude
        case credProps
      }
    }
    /// - Remark: Generated from `#/components/schemas/SmsCustomizationParams`.
    public struct SmsCustomizationParams: Codable, Hashable, Sendable {
      /// Template containing references to .OtpCode i.e Your OTP is {{.OtpCode}}
      ///
      /// - Remark: Generated from `#/components/schemas/SmsCustomizationParams/template`.
      public var template: Swift.String?
      /// Creates a new `SmsCustomizationParams`.
      ///
      /// - Parameters:
      ///   - template: Template containing references to .OtpCode i.e Your OTP is {{.OtpCode}}
      public init(template: Swift.String? = nil) {
        self.template = template
      }
      public enum CodingKeys: String, CodingKey {
        case template
      }
    }
    /// - Remark: Generated from `#/components/schemas/StampLoginIntent`.
    public struct StampLoginIntent: Codable, Hashable, Sendable {
      /// Client-side public key generated by the user, which will be conditionally added to org data based on the passkey stamp associated with this request
      ///
      /// - Remark: Generated from `#/components/schemas/StampLoginIntent/publicKey`.
      public var publicKey: Swift.String
      /// Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
      ///
      /// - Remark: Generated from `#/components/schemas/StampLoginIntent/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// Invalidate all other previously generated Login API keys
      ///
      /// - Remark: Generated from `#/components/schemas/StampLoginIntent/invalidateExisting`.
      public var invalidateExisting: Swift.Bool?
      /// Creates a new `StampLoginIntent`.
      ///
      /// - Parameters:
      ///   - publicKey: Client-side public key generated by the user, which will be conditionally added to org data based on the passkey stamp associated with this request
      ///   - expirationSeconds: Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
      ///   - invalidateExisting: Invalidate all other previously generated Login API keys
      public init(
        publicKey: Swift.String,
        expirationSeconds: Swift.String? = nil,
        invalidateExisting: Swift.Bool? = nil
      ) {
        self.publicKey = publicKey
        self.expirationSeconds = expirationSeconds
        self.invalidateExisting = invalidateExisting
      }
      public enum CodingKeys: String, CodingKey {
        case publicKey
        case expirationSeconds
        case invalidateExisting
      }
    }
    /// - Remark: Generated from `#/components/schemas/StampLoginRequest`.
    public struct StampLoginRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/StampLoginRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_STAMP_LOGIN = "ACTIVITY_TYPE_STAMP_LOGIN"
      }
      /// - Remark: Generated from `#/components/schemas/StampLoginRequest/type`.
      public var _type: Components.Schemas.StampLoginRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/StampLoginRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/StampLoginRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/StampLoginRequest/parameters`.
      public var parameters: Components.Schemas.StampLoginIntent
      /// Creates a new `StampLoginRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.StampLoginRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.StampLoginIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/StampLoginResult`.
    public struct StampLoginResult: Codable, Hashable, Sendable {
      /// Signed JWT containing an expiry, public key, session type, user id, and organization id
      ///
      /// - Remark: Generated from `#/components/schemas/StampLoginResult/session`.
      public var session: Swift.String
      /// Creates a new `StampLoginResult`.
      ///
      /// - Parameters:
      ///   - session: Signed JWT containing an expiry, public key, session type, user id, and organization id
      public init(session: Swift.String) {
        self.session = session
      }
      public enum CodingKeys: String, CodingKey {
        case session
      }
    }
    /// - Remark: Generated from `#/components/schemas/Status`.
    public struct Status: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/Status/code`.
      public var code: Swift.Int32?
      /// - Remark: Generated from `#/components/schemas/Status/message`.
      public var message: Swift.String?
      /// - Remark: Generated from `#/components/schemas/Status/details`.
      public var details: [Components.Schemas._Any]?
      /// Creates a new `Status`.
      ///
      /// - Parameters:
      ///   - code:
      ///   - message:
      ///   - details:
      public init(
        code: Swift.Int32? = nil,
        message: Swift.String? = nil,
        details: [Components.Schemas._Any]? = nil
      ) {
        self.code = code
        self.message = message
        self.details = details
      }
      public enum CodingKeys: String, CodingKey {
        case code
        case message
        case details
      }
    }
    /// - Remark: Generated from `#/components/schemas/TagType`.
    @frozen public enum TagType: String, Codable, Hashable, Sendable, CaseIterable {
      case TAG_TYPE_USER = "TAG_TYPE_USER"
      case TAG_TYPE_PRIVATE_KEY = "TAG_TYPE_PRIVATE_KEY"
    }
    /// - Remark: Generated from `#/components/schemas/TransactionType`.
    @frozen public enum TransactionType: String, Codable, Hashable, Sendable, CaseIterable {
      case TRANSACTION_TYPE_ETHEREUM = "TRANSACTION_TYPE_ETHEREUM"
      case TRANSACTION_TYPE_SOLANA = "TRANSACTION_TYPE_SOLANA"
      case TRANSACTION_TYPE_TRON = "TRANSACTION_TYPE_TRON"
    }
    /// - Remark: Generated from `#/components/schemas/UpdateAllowedOriginsIntent`.
    public struct UpdateAllowedOriginsIntent: Codable, Hashable, Sendable {
      /// Additional origins requests are allowed from besides Turnkey origins
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateAllowedOriginsIntent/allowedOrigins`.
      public var allowedOrigins: [Swift.String]
      /// Creates a new `UpdateAllowedOriginsIntent`.
      ///
      /// - Parameters:
      ///   - allowedOrigins: Additional origins requests are allowed from besides Turnkey origins
      public init(allowedOrigins: [Swift.String]) {
        self.allowedOrigins = allowedOrigins
      }
      public enum CodingKeys: String, CodingKey {
        case allowedOrigins
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateAllowedOriginsResult`.
    public typealias UpdateAllowedOriginsResult = OpenAPIRuntime.OpenAPIObjectContainer
    /// - Remark: Generated from `#/components/schemas/UpdatePolicyIntent`.
    public struct UpdatePolicyIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyIntent/policyId`.
      public var policyId: Swift.String
      /// Human-readable name for a Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyIntent/policyName`.
      public var policyName: Swift.String?
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyIntent/policyEffect`.
      public var policyEffect: Components.Schemas.Effect?
      /// The condition expression that triggers the Effect (optional).
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyIntent/policyCondition`.
      public var policyCondition: Swift.String?
      /// The consensus expression that triggers the Effect (optional).
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyIntent/policyConsensus`.
      public var policyConsensus: Swift.String?
      /// Accompanying notes for a Policy (optional).
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyIntent/policyNotes`.
      public var policyNotes: Swift.String?
      /// Creates a new `UpdatePolicyIntent`.
      ///
      /// - Parameters:
      ///   - policyId: Unique identifier for a given Policy.
      ///   - policyName: Human-readable name for a Policy.
      ///   - policyEffect:
      ///   - policyCondition: The condition expression that triggers the Effect (optional).
      ///   - policyConsensus: The consensus expression that triggers the Effect (optional).
      ///   - policyNotes: Accompanying notes for a Policy (optional).
      public init(
        policyId: Swift.String,
        policyName: Swift.String? = nil,
        policyEffect: Components.Schemas.Effect? = nil,
        policyCondition: Swift.String? = nil,
        policyConsensus: Swift.String? = nil,
        policyNotes: Swift.String? = nil
      ) {
        self.policyId = policyId
        self.policyName = policyName
        self.policyEffect = policyEffect
        self.policyCondition = policyCondition
        self.policyConsensus = policyConsensus
        self.policyNotes = policyNotes
      }
      public enum CodingKeys: String, CodingKey {
        case policyId
        case policyName
        case policyEffect
        case policyCondition
        case policyConsensus
        case policyNotes
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdatePolicyIntentV2`.
    public struct UpdatePolicyIntentV2: Codable, Hashable, Sendable {
      /// Unique identifier for a given Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyIntentV2/policyId`.
      public var policyId: Swift.String
      /// Human-readable name for a Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyIntentV2/policyName`.
      public var policyName: Swift.String?
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyIntentV2/policyEffect`.
      public var policyEffect: Components.Schemas.Effect?
      /// The condition expression that triggers the Effect (optional).
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyIntentV2/policyCondition`.
      public var policyCondition: Swift.String?
      /// The consensus expression that triggers the Effect (optional).
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyIntentV2/policyConsensus`.
      public var policyConsensus: Swift.String?
      /// Accompanying notes for a Policy (optional).
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyIntentV2/policyNotes`.
      public var policyNotes: Swift.String?
      /// Creates a new `UpdatePolicyIntentV2`.
      ///
      /// - Parameters:
      ///   - policyId: Unique identifier for a given Policy.
      ///   - policyName: Human-readable name for a Policy.
      ///   - policyEffect:
      ///   - policyCondition: The condition expression that triggers the Effect (optional).
      ///   - policyConsensus: The consensus expression that triggers the Effect (optional).
      ///   - policyNotes: Accompanying notes for a Policy (optional).
      public init(
        policyId: Swift.String,
        policyName: Swift.String? = nil,
        policyEffect: Components.Schemas.Effect? = nil,
        policyCondition: Swift.String? = nil,
        policyConsensus: Swift.String? = nil,
        policyNotes: Swift.String? = nil
      ) {
        self.policyId = policyId
        self.policyName = policyName
        self.policyEffect = policyEffect
        self.policyCondition = policyCondition
        self.policyConsensus = policyConsensus
        self.policyNotes = policyNotes
      }
      public enum CodingKeys: String, CodingKey {
        case policyId
        case policyName
        case policyEffect
        case policyCondition
        case policyConsensus
        case policyNotes
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdatePolicyRequest`.
    public struct UpdatePolicyRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_UPDATE_POLICY_V2 = "ACTIVITY_TYPE_UPDATE_POLICY_V2"
      }
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyRequest/type`.
      public var _type: Components.Schemas.UpdatePolicyRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyRequest/parameters`.
      public var parameters: Components.Schemas.UpdatePolicyIntentV2
      /// Creates a new `UpdatePolicyRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.UpdatePolicyRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.UpdatePolicyIntentV2
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdatePolicyResult`.
    public struct UpdatePolicyResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyResult/policyId`.
      public var policyId: Swift.String
      /// Creates a new `UpdatePolicyResult`.
      ///
      /// - Parameters:
      ///   - policyId: Unique identifier for a given Policy.
      public init(policyId: Swift.String) {
        self.policyId = policyId
      }
      public enum CodingKeys: String, CodingKey {
        case policyId
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdatePolicyResultV2`.
    public struct UpdatePolicyResultV2: Codable, Hashable, Sendable {
      /// Unique identifier for a given Policy.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePolicyResultV2/policyId`.
      public var policyId: Swift.String
      /// Creates a new `UpdatePolicyResultV2`.
      ///
      /// - Parameters:
      ///   - policyId: Unique identifier for a given Policy.
      public init(policyId: Swift.String) {
        self.policyId = policyId
      }
      public enum CodingKeys: String, CodingKey {
        case policyId
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdatePrivateKeyTagIntent`.
    public struct UpdatePrivateKeyTagIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given Private Key Tag.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePrivateKeyTagIntent/privateKeyTagId`.
      public var privateKeyTagId: Swift.String
      /// The new, human-readable name for the tag with the given ID.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePrivateKeyTagIntent/newPrivateKeyTagName`.
      public var newPrivateKeyTagName: Swift.String?
      /// A list of Private Keys IDs to add this tag to.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePrivateKeyTagIntent/addPrivateKeyIds`.
      public var addPrivateKeyIds: [Swift.String]
      /// A list of Private Key IDs to remove this tag from.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePrivateKeyTagIntent/removePrivateKeyIds`.
      public var removePrivateKeyIds: [Swift.String]
      /// Creates a new `UpdatePrivateKeyTagIntent`.
      ///
      /// - Parameters:
      ///   - privateKeyTagId: Unique identifier for a given Private Key Tag.
      ///   - newPrivateKeyTagName: The new, human-readable name for the tag with the given ID.
      ///   - addPrivateKeyIds: A list of Private Keys IDs to add this tag to.
      ///   - removePrivateKeyIds: A list of Private Key IDs to remove this tag from.
      public init(
        privateKeyTagId: Swift.String,
        newPrivateKeyTagName: Swift.String? = nil,
        addPrivateKeyIds: [Swift.String],
        removePrivateKeyIds: [Swift.String]
      ) {
        self.privateKeyTagId = privateKeyTagId
        self.newPrivateKeyTagName = newPrivateKeyTagName
        self.addPrivateKeyIds = addPrivateKeyIds
        self.removePrivateKeyIds = removePrivateKeyIds
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyTagId
        case newPrivateKeyTagName
        case addPrivateKeyIds
        case removePrivateKeyIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdatePrivateKeyTagRequest`.
    public struct UpdatePrivateKeyTagRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/UpdatePrivateKeyTagRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG = "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG"
      }
      /// - Remark: Generated from `#/components/schemas/UpdatePrivateKeyTagRequest/type`.
      public var _type: Components.Schemas.UpdatePrivateKeyTagRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePrivateKeyTagRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePrivateKeyTagRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/UpdatePrivateKeyTagRequest/parameters`.
      public var parameters: Components.Schemas.UpdatePrivateKeyTagIntent
      /// Creates a new `UpdatePrivateKeyTagRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.UpdatePrivateKeyTagRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.UpdatePrivateKeyTagIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdatePrivateKeyTagResult`.
    public struct UpdatePrivateKeyTagResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given Private Key Tag.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdatePrivateKeyTagResult/privateKeyTagId`.
      public var privateKeyTagId: Swift.String
      /// Creates a new `UpdatePrivateKeyTagResult`.
      ///
      /// - Parameters:
      ///   - privateKeyTagId: Unique identifier for a given Private Key Tag.
      public init(privateKeyTagId: Swift.String) {
        self.privateKeyTagId = privateKeyTagId
      }
      public enum CodingKeys: String, CodingKey {
        case privateKeyTagId
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateRootQuorumIntent`.
    public struct UpdateRootQuorumIntent: Codable, Hashable, Sendable {
      /// The threshold of unique approvals to reach quorum.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateRootQuorumIntent/threshold`.
      public var threshold: Swift.Int32
      /// The unique identifiers of users who comprise the quorum set.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateRootQuorumIntent/userIds`.
      public var userIds: [Swift.String]
      /// Creates a new `UpdateRootQuorumIntent`.
      ///
      /// - Parameters:
      ///   - threshold: The threshold of unique approvals to reach quorum.
      ///   - userIds: The unique identifiers of users who comprise the quorum set.
      public init(
        threshold: Swift.Int32,
        userIds: [Swift.String]
      ) {
        self.threshold = threshold
        self.userIds = userIds
      }
      public enum CodingKeys: String, CodingKey {
        case threshold
        case userIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateRootQuorumRequest`.
    public struct UpdateRootQuorumRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/UpdateRootQuorumRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_UPDATE_ROOT_QUORUM = "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM"
      }
      /// - Remark: Generated from `#/components/schemas/UpdateRootQuorumRequest/type`.
      public var _type: Components.Schemas.UpdateRootQuorumRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateRootQuorumRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateRootQuorumRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/UpdateRootQuorumRequest/parameters`.
      public var parameters: Components.Schemas.UpdateRootQuorumIntent
      /// Creates a new `UpdateRootQuorumRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.UpdateRootQuorumRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.UpdateRootQuorumIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateRootQuorumResult`.
    public typealias UpdateRootQuorumResult = OpenAPIRuntime.OpenAPIObjectContainer
    /// - Remark: Generated from `#/components/schemas/UpdateUserEmailIntent`.
    public struct UpdateUserEmailIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserEmailIntent/userId`.
      public var userId: Swift.String
      /// The user's email address. Setting this to an empty string will remove the user's email.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserEmailIntent/userEmail`.
      public var userEmail: Swift.String
      /// Signed JWT containing a unique id, expiry, verification type, contact
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserEmailIntent/verificationToken`.
      public var verificationToken: Swift.String?
      /// Creates a new `UpdateUserEmailIntent`.
      ///
      /// - Parameters:
      ///   - userId: Unique identifier for a given User.
      ///   - userEmail: The user's email address. Setting this to an empty string will remove the user's email.
      ///   - verificationToken: Signed JWT containing a unique id, expiry, verification type, contact
      public init(
        userId: Swift.String,
        userEmail: Swift.String,
        verificationToken: Swift.String? = nil
      ) {
        self.userId = userId
        self.userEmail = userEmail
        self.verificationToken = verificationToken
      }
      public enum CodingKeys: String, CodingKey {
        case userId
        case userEmail
        case verificationToken
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateUserEmailRequest`.
    public struct UpdateUserEmailRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/UpdateUserEmailRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_UPDATE_USER_EMAIL = "ACTIVITY_TYPE_UPDATE_USER_EMAIL"
      }
      /// - Remark: Generated from `#/components/schemas/UpdateUserEmailRequest/type`.
      public var _type: Components.Schemas.UpdateUserEmailRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserEmailRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserEmailRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/UpdateUserEmailRequest/parameters`.
      public var parameters: Components.Schemas.UpdateUserEmailIntent
      /// Creates a new `UpdateUserEmailRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.UpdateUserEmailRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.UpdateUserEmailIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateUserEmailResult`.
    public struct UpdateUserEmailResult: Codable, Hashable, Sendable {
      /// Unique identifier of the User whose email was updated.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserEmailResult/userId`.
      public var userId: Swift.String
      /// Creates a new `UpdateUserEmailResult`.
      ///
      /// - Parameters:
      ///   - userId: Unique identifier of the User whose email was updated.
      public init(userId: Swift.String) {
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateUserIntent`.
    public struct UpdateUserIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserIntent/userId`.
      public var userId: Swift.String
      /// Human-readable name for a User.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserIntent/userName`.
      public var userName: Swift.String?
      /// The user's email address.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserIntent/userEmail`.
      public var userEmail: Swift.String?
      /// An updated list of User Tags to apply to this User. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserIntent/userTagIds`.
      public var userTagIds: [Swift.String]?
      /// The user's phone number in E.164 format e.g. +13214567890
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserIntent/userPhoneNumber`.
      public var userPhoneNumber: Swift.String?
      /// Creates a new `UpdateUserIntent`.
      ///
      /// - Parameters:
      ///   - userId: Unique identifier for a given User.
      ///   - userName: Human-readable name for a User.
      ///   - userEmail: The user's email address.
      ///   - userTagIds: An updated list of User Tags to apply to this User. This field, if not needed, should be an empty array in your request body.
      ///   - userPhoneNumber: The user's phone number in E.164 format e.g. +13214567890
      public init(
        userId: Swift.String,
        userName: Swift.String? = nil,
        userEmail: Swift.String? = nil,
        userTagIds: [Swift.String]? = nil,
        userPhoneNumber: Swift.String? = nil
      ) {
        self.userId = userId
        self.userName = userName
        self.userEmail = userEmail
        self.userTagIds = userTagIds
        self.userPhoneNumber = userPhoneNumber
      }
      public enum CodingKeys: String, CodingKey {
        case userId
        case userName
        case userEmail
        case userTagIds
        case userPhoneNumber
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateUserNameIntent`.
    public struct UpdateUserNameIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserNameIntent/userId`.
      public var userId: Swift.String
      /// Human-readable name for a User.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserNameIntent/userName`.
      public var userName: Swift.String
      /// Creates a new `UpdateUserNameIntent`.
      ///
      /// - Parameters:
      ///   - userId: Unique identifier for a given User.
      ///   - userName: Human-readable name for a User.
      public init(
        userId: Swift.String,
        userName: Swift.String
      ) {
        self.userId = userId
        self.userName = userName
      }
      public enum CodingKeys: String, CodingKey {
        case userId
        case userName
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateUserNameRequest`.
    public struct UpdateUserNameRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/UpdateUserNameRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_UPDATE_USER_NAME = "ACTIVITY_TYPE_UPDATE_USER_NAME"
      }
      /// - Remark: Generated from `#/components/schemas/UpdateUserNameRequest/type`.
      public var _type: Components.Schemas.UpdateUserNameRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserNameRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserNameRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/UpdateUserNameRequest/parameters`.
      public var parameters: Components.Schemas.UpdateUserNameIntent
      /// Creates a new `UpdateUserNameRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.UpdateUserNameRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.UpdateUserNameIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateUserNameResult`.
    public struct UpdateUserNameResult: Codable, Hashable, Sendable {
      /// Unique identifier of the User whose name was updated.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserNameResult/userId`.
      public var userId: Swift.String
      /// Creates a new `UpdateUserNameResult`.
      ///
      /// - Parameters:
      ///   - userId: Unique identifier of the User whose name was updated.
      public init(userId: Swift.String) {
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateUserPhoneNumberIntent`.
    public struct UpdateUserPhoneNumberIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserPhoneNumberIntent/userId`.
      public var userId: Swift.String
      /// The user's phone number in E.164 format e.g. +13214567890. Setting this to an empty string will remove the user's phone number.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserPhoneNumberIntent/userPhoneNumber`.
      public var userPhoneNumber: Swift.String
      /// Signed JWT containing a unique id, expiry, verification type, contact
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserPhoneNumberIntent/verificationToken`.
      public var verificationToken: Swift.String?
      /// Creates a new `UpdateUserPhoneNumberIntent`.
      ///
      /// - Parameters:
      ///   - userId: Unique identifier for a given User.
      ///   - userPhoneNumber: The user's phone number in E.164 format e.g. +13214567890. Setting this to an empty string will remove the user's phone number.
      ///   - verificationToken: Signed JWT containing a unique id, expiry, verification type, contact
      public init(
        userId: Swift.String,
        userPhoneNumber: Swift.String,
        verificationToken: Swift.String? = nil
      ) {
        self.userId = userId
        self.userPhoneNumber = userPhoneNumber
        self.verificationToken = verificationToken
      }
      public enum CodingKeys: String, CodingKey {
        case userId
        case userPhoneNumber
        case verificationToken
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateUserPhoneNumberRequest`.
    public struct UpdateUserPhoneNumberRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/UpdateUserPhoneNumberRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_UPDATE_USER_PHONE_NUMBER = "ACTIVITY_TYPE_UPDATE_USER_PHONE_NUMBER"
      }
      /// - Remark: Generated from `#/components/schemas/UpdateUserPhoneNumberRequest/type`.
      public var _type: Components.Schemas.UpdateUserPhoneNumberRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserPhoneNumberRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserPhoneNumberRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/UpdateUserPhoneNumberRequest/parameters`.
      public var parameters: Components.Schemas.UpdateUserPhoneNumberIntent
      /// Creates a new `UpdateUserPhoneNumberRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.UpdateUserPhoneNumberRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.UpdateUserPhoneNumberIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateUserPhoneNumberResult`.
    public struct UpdateUserPhoneNumberResult: Codable, Hashable, Sendable {
      /// Unique identifier of the User whose phone number was updated.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserPhoneNumberResult/userId`.
      public var userId: Swift.String
      /// Creates a new `UpdateUserPhoneNumberResult`.
      ///
      /// - Parameters:
      ///   - userId: Unique identifier of the User whose phone number was updated.
      public init(userId: Swift.String) {
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateUserRequest`.
    public struct UpdateUserRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/UpdateUserRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_UPDATE_USER = "ACTIVITY_TYPE_UPDATE_USER"
      }
      /// - Remark: Generated from `#/components/schemas/UpdateUserRequest/type`.
      public var _type: Components.Schemas.UpdateUserRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/UpdateUserRequest/parameters`.
      public var parameters: Components.Schemas.UpdateUserIntent
      /// Creates a new `UpdateUserRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.UpdateUserRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.UpdateUserIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateUserResult`.
    public struct UpdateUserResult: Codable, Hashable, Sendable {
      /// A User ID.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserResult/userId`.
      public var userId: Swift.String
      /// Creates a new `UpdateUserResult`.
      ///
      /// - Parameters:
      ///   - userId: A User ID.
      public init(userId: Swift.String) {
        self.userId = userId
      }
      public enum CodingKeys: String, CodingKey {
        case userId
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateUserTagIntent`.
    public struct UpdateUserTagIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given User Tag.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserTagIntent/userTagId`.
      public var userTagId: Swift.String
      /// The new, human-readable name for the tag with the given ID.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserTagIntent/newUserTagName`.
      public var newUserTagName: Swift.String?
      /// A list of User IDs to add this tag to.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserTagIntent/addUserIds`.
      public var addUserIds: [Swift.String]
      /// A list of User IDs to remove this tag from.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserTagIntent/removeUserIds`.
      public var removeUserIds: [Swift.String]
      /// Creates a new `UpdateUserTagIntent`.
      ///
      /// - Parameters:
      ///   - userTagId: Unique identifier for a given User Tag.
      ///   - newUserTagName: The new, human-readable name for the tag with the given ID.
      ///   - addUserIds: A list of User IDs to add this tag to.
      ///   - removeUserIds: A list of User IDs to remove this tag from.
      public init(
        userTagId: Swift.String,
        newUserTagName: Swift.String? = nil,
        addUserIds: [Swift.String],
        removeUserIds: [Swift.String]
      ) {
        self.userTagId = userTagId
        self.newUserTagName = newUserTagName
        self.addUserIds = addUserIds
        self.removeUserIds = removeUserIds
      }
      public enum CodingKeys: String, CodingKey {
        case userTagId
        case newUserTagName
        case addUserIds
        case removeUserIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateUserTagRequest`.
    public struct UpdateUserTagRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/UpdateUserTagRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_UPDATE_USER_TAG = "ACTIVITY_TYPE_UPDATE_USER_TAG"
      }
      /// - Remark: Generated from `#/components/schemas/UpdateUserTagRequest/type`.
      public var _type: Components.Schemas.UpdateUserTagRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserTagRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserTagRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/UpdateUserTagRequest/parameters`.
      public var parameters: Components.Schemas.UpdateUserTagIntent
      /// Creates a new `UpdateUserTagRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.UpdateUserTagRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.UpdateUserTagIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateUserTagResult`.
    public struct UpdateUserTagResult: Codable, Hashable, Sendable {
      /// Unique identifier for a given User Tag.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateUserTagResult/userTagId`.
      public var userTagId: Swift.String
      /// Creates a new `UpdateUserTagResult`.
      ///
      /// - Parameters:
      ///   - userTagId: Unique identifier for a given User Tag.
      public init(userTagId: Swift.String) {
        self.userTagId = userTagId
      }
      public enum CodingKeys: String, CodingKey {
        case userTagId
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateWalletIntent`.
    public struct UpdateWalletIntent: Codable, Hashable, Sendable {
      /// Unique identifier for a given Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateWalletIntent/walletId`.
      public var walletId: Swift.String
      /// Human-readable name for a Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateWalletIntent/walletName`.
      public var walletName: Swift.String?
      /// Creates a new `UpdateWalletIntent`.
      ///
      /// - Parameters:
      ///   - walletId: Unique identifier for a given Wallet.
      ///   - walletName: Human-readable name for a Wallet.
      public init(
        walletId: Swift.String,
        walletName: Swift.String? = nil
      ) {
        self.walletId = walletId
        self.walletName = walletName
      }
      public enum CodingKeys: String, CodingKey {
        case walletId
        case walletName
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateWalletRequest`.
    public struct UpdateWalletRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/UpdateWalletRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_UPDATE_WALLET = "ACTIVITY_TYPE_UPDATE_WALLET"
      }
      /// - Remark: Generated from `#/components/schemas/UpdateWalletRequest/type`.
      public var _type: Components.Schemas.UpdateWalletRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateWalletRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateWalletRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/UpdateWalletRequest/parameters`.
      public var parameters: Components.Schemas.UpdateWalletIntent
      /// Creates a new `UpdateWalletRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.UpdateWalletRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.UpdateWalletIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/UpdateWalletResult`.
    public struct UpdateWalletResult: Codable, Hashable, Sendable {
      /// A Wallet ID.
      ///
      /// - Remark: Generated from `#/components/schemas/UpdateWalletResult/walletId`.
      public var walletId: Swift.String
      /// Creates a new `UpdateWalletResult`.
      ///
      /// - Parameters:
      ///   - walletId: A Wallet ID.
      public init(walletId: Swift.String) {
        self.walletId = walletId
      }
      public enum CodingKeys: String, CodingKey {
        case walletId
      }
    }
    /// - Remark: Generated from `#/components/schemas/User`.
    public struct User: Codable, Hashable, Sendable {
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/User/userId`.
      public var userId: Swift.String
      /// Human-readable name for a User.
      ///
      /// - Remark: Generated from `#/components/schemas/User/userName`.
      public var userName: Swift.String
      /// The user's email address.
      ///
      /// - Remark: Generated from `#/components/schemas/User/userEmail`.
      public var userEmail: Swift.String?
      /// The user's phone number in E.164 format e.g. +13214567890
      ///
      /// - Remark: Generated from `#/components/schemas/User/userPhoneNumber`.
      public var userPhoneNumber: Swift.String?
      /// A list of Authenticator parameters.
      ///
      /// - Remark: Generated from `#/components/schemas/User/authenticators`.
      public var authenticators: [Components.Schemas.Authenticator]
      /// A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/User/apiKeys`.
      public var apiKeys: [Components.Schemas.ApiKey]
      /// A list of User Tag IDs.
      ///
      /// - Remark: Generated from `#/components/schemas/User/userTags`.
      public var userTags: [Swift.String]
      /// A list of Oauth Providers.
      ///
      /// - Remark: Generated from `#/components/schemas/User/oauthProviders`.
      public var oauthProviders: [Components.Schemas.OauthProvider]
      /// - Remark: Generated from `#/components/schemas/User/createdAt`.
      public var createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// - Remark: Generated from `#/components/schemas/User/updatedAt`.
      public var updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// Creates a new `User`.
      ///
      /// - Parameters:
      ///   - userId: Unique identifier for a given User.
      ///   - userName: Human-readable name for a User.
      ///   - userEmail: The user's email address.
      ///   - userPhoneNumber: The user's phone number in E.164 format e.g. +13214567890
      ///   - authenticators: A list of Authenticator parameters.
      ///   - apiKeys: A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///   - userTags: A list of User Tag IDs.
      ///   - oauthProviders: A list of Oauth Providers.
      ///   - createdAt:
      ///   - updatedAt:
      public init(
        userId: Swift.String,
        userName: Swift.String,
        userEmail: Swift.String? = nil,
        userPhoneNumber: Swift.String? = nil,
        authenticators: [Components.Schemas.Authenticator],
        apiKeys: [Components.Schemas.ApiKey],
        userTags: [Swift.String],
        oauthProviders: [Components.Schemas.OauthProvider],
        createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      ) {
        self.userId = userId
        self.userName = userName
        self.userEmail = userEmail
        self.userPhoneNumber = userPhoneNumber
        self.authenticators = authenticators
        self.apiKeys = apiKeys
        self.userTags = userTags
        self.oauthProviders = oauthProviders
        self.createdAt = createdAt
        self.updatedAt = updatedAt
      }
      public enum CodingKeys: String, CodingKey {
        case userId
        case userName
        case userEmail
        case userPhoneNumber
        case authenticators
        case apiKeys
        case userTags
        case oauthProviders
        case createdAt
        case updatedAt
      }
    }
    /// - Remark: Generated from `#/components/schemas/UserParams`.
    public struct UserParams: Codable, Hashable, Sendable {
      /// Human-readable name for a User.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParams/userName`.
      public var userName: Swift.String
      /// The user's email address.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParams/userEmail`.
      public var userEmail: Swift.String?
      /// - Remark: Generated from `#/components/schemas/UserParams/accessType`.
      public var accessType: Components.Schemas.AccessType
      /// A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParams/apiKeys`.
      public var apiKeys: [Components.Schemas.ApiKeyParams]
      /// A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParams/authenticators`.
      public var authenticators: [Components.Schemas.AuthenticatorParams]
      /// A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParams/userTags`.
      public var userTags: [Swift.String]
      /// Creates a new `UserParams`.
      ///
      /// - Parameters:
      ///   - userName: Human-readable name for a User.
      ///   - userEmail: The user's email address.
      ///   - accessType:
      ///   - apiKeys: A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///   - authenticators: A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.
      ///   - userTags: A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.
      public init(
        userName: Swift.String,
        userEmail: Swift.String? = nil,
        accessType: Components.Schemas.AccessType,
        apiKeys: [Components.Schemas.ApiKeyParams],
        authenticators: [Components.Schemas.AuthenticatorParams],
        userTags: [Swift.String]
      ) {
        self.userName = userName
        self.userEmail = userEmail
        self.accessType = accessType
        self.apiKeys = apiKeys
        self.authenticators = authenticators
        self.userTags = userTags
      }
      public enum CodingKeys: String, CodingKey {
        case userName
        case userEmail
        case accessType
        case apiKeys
        case authenticators
        case userTags
      }
    }
    /// - Remark: Generated from `#/components/schemas/UserParamsV2`.
    public struct UserParamsV2: Codable, Hashable, Sendable {
      /// Human-readable name for a User.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParamsV2/userName`.
      public var userName: Swift.String
      /// The user's email address.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParamsV2/userEmail`.
      public var userEmail: Swift.String?
      /// A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParamsV2/apiKeys`.
      public var apiKeys: [Components.Schemas.ApiKeyParams]
      /// A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParamsV2/authenticators`.
      public var authenticators: [Components.Schemas.AuthenticatorParamsV2]
      /// A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParamsV2/userTags`.
      public var userTags: [Swift.String]
      /// Creates a new `UserParamsV2`.
      ///
      /// - Parameters:
      ///   - userName: Human-readable name for a User.
      ///   - userEmail: The user's email address.
      ///   - apiKeys: A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///   - authenticators: A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.
      ///   - userTags: A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.
      public init(
        userName: Swift.String,
        userEmail: Swift.String? = nil,
        apiKeys: [Components.Schemas.ApiKeyParams],
        authenticators: [Components.Schemas.AuthenticatorParamsV2],
        userTags: [Swift.String]
      ) {
        self.userName = userName
        self.userEmail = userEmail
        self.apiKeys = apiKeys
        self.authenticators = authenticators
        self.userTags = userTags
      }
      public enum CodingKeys: String, CodingKey {
        case userName
        case userEmail
        case apiKeys
        case authenticators
        case userTags
      }
    }
    /// - Remark: Generated from `#/components/schemas/UserParamsV3`.
    public struct UserParamsV3: Codable, Hashable, Sendable {
      /// Human-readable name for a User.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParamsV3/userName`.
      public var userName: Swift.String
      /// The user's email address.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParamsV3/userEmail`.
      public var userEmail: Swift.String?
      /// The user's phone number in E.164 format e.g. +13214567890
      ///
      /// - Remark: Generated from `#/components/schemas/UserParamsV3/userPhoneNumber`.
      public var userPhoneNumber: Swift.String?
      /// A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParamsV3/apiKeys`.
      public var apiKeys: [Components.Schemas.ApiKeyParamsV2]
      /// A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParamsV3/authenticators`.
      public var authenticators: [Components.Schemas.AuthenticatorParamsV2]
      /// A list of Oauth providers. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParamsV3/oauthProviders`.
      public var oauthProviders: [Components.Schemas.OauthProviderParams]
      /// A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/UserParamsV3/userTags`.
      public var userTags: [Swift.String]
      /// Creates a new `UserParamsV3`.
      ///
      /// - Parameters:
      ///   - userName: Human-readable name for a User.
      ///   - userEmail: The user's email address.
      ///   - userPhoneNumber: The user's phone number in E.164 format e.g. +13214567890
      ///   - apiKeys: A list of API Key parameters. This field, if not needed, should be an empty array in your request body.
      ///   - authenticators: A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.
      ///   - oauthProviders: A list of Oauth providers. This field, if not needed, should be an empty array in your request body.
      ///   - userTags: A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.
      public init(
        userName: Swift.String,
        userEmail: Swift.String? = nil,
        userPhoneNumber: Swift.String? = nil,
        apiKeys: [Components.Schemas.ApiKeyParamsV2],
        authenticators: [Components.Schemas.AuthenticatorParamsV2],
        oauthProviders: [Components.Schemas.OauthProviderParams],
        userTags: [Swift.String]
      ) {
        self.userName = userName
        self.userEmail = userEmail
        self.userPhoneNumber = userPhoneNumber
        self.apiKeys = apiKeys
        self.authenticators = authenticators
        self.oauthProviders = oauthProviders
        self.userTags = userTags
      }
      public enum CodingKeys: String, CodingKey {
        case userName
        case userEmail
        case userPhoneNumber
        case apiKeys
        case authenticators
        case oauthProviders
        case userTags
      }
    }
    /// - Remark: Generated from `#/components/schemas/VerifyOtpIntent`.
    public struct VerifyOtpIntent: Codable, Hashable, Sendable {
      /// ID representing the result of an init OTP activity.
      ///
      /// - Remark: Generated from `#/components/schemas/VerifyOtpIntent/otpId`.
      public var otpId: Swift.String
      /// OTP sent out to a user's contact (email or SMS)
      ///
      /// - Remark: Generated from `#/components/schemas/VerifyOtpIntent/otpCode`.
      public var otpCode: Swift.String
      /// Expiration window (in seconds) indicating how long the verification token is valid for. If not provided, a default of 1 hour will be used. Maximum value is 86400 seconds (24 hours)
      ///
      /// - Remark: Generated from `#/components/schemas/VerifyOtpIntent/expirationSeconds`.
      public var expirationSeconds: Swift.String?
      /// Creates a new `VerifyOtpIntent`.
      ///
      /// - Parameters:
      ///   - otpId: ID representing the result of an init OTP activity.
      ///   - otpCode: OTP sent out to a user's contact (email or SMS)
      ///   - expirationSeconds: Expiration window (in seconds) indicating how long the verification token is valid for. If not provided, a default of 1 hour will be used. Maximum value is 86400 seconds (24 hours)
      public init(
        otpId: Swift.String,
        otpCode: Swift.String,
        expirationSeconds: Swift.String? = nil
      ) {
        self.otpId = otpId
        self.otpCode = otpCode
        self.expirationSeconds = expirationSeconds
      }
      public enum CodingKeys: String, CodingKey {
        case otpId
        case otpCode
        case expirationSeconds
      }
    }
    /// - Remark: Generated from `#/components/schemas/VerifyOtpRequest`.
    public struct VerifyOtpRequest: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/VerifyOtpRequest/type`.
      @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
        case ACTIVITY_TYPE_VERIFY_OTP = "ACTIVITY_TYPE_VERIFY_OTP"
      }
      /// - Remark: Generated from `#/components/schemas/VerifyOtpRequest/type`.
      public var _type: Components.Schemas.VerifyOtpRequest._typePayload
      /// Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///
      /// - Remark: Generated from `#/components/schemas/VerifyOtpRequest/timestampMs`.
      public var timestampMs: Swift.String
      /// Unique identifier for a given Organization.
      ///
      /// - Remark: Generated from `#/components/schemas/VerifyOtpRequest/organizationId`.
      public var organizationId: Swift.String
      /// - Remark: Generated from `#/components/schemas/VerifyOtpRequest/parameters`.
      public var parameters: Components.Schemas.VerifyOtpIntent
      /// Creates a new `VerifyOtpRequest`.
      ///
      /// - Parameters:
      ///   - _type:
      ///   - timestampMs: Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
      ///   - organizationId: Unique identifier for a given Organization.
      ///   - parameters:
      public init(
        _type: Components.Schemas.VerifyOtpRequest._typePayload,
        timestampMs: Swift.String,
        organizationId: Swift.String,
        parameters: Components.Schemas.VerifyOtpIntent
      ) {
        self._type = _type
        self.timestampMs = timestampMs
        self.organizationId = organizationId
        self.parameters = parameters
      }
      public enum CodingKeys: String, CodingKey {
        case _type = "type"
        case timestampMs
        case organizationId
        case parameters
      }
    }
    /// - Remark: Generated from `#/components/schemas/VerifyOtpResult`.
    public struct VerifyOtpResult: Codable, Hashable, Sendable {
      /// Signed JWT containing a unique id, expiry, verification type, contact. Verification status of a user is updated when the token is consumed (in OTP_LOGIN requests)
      ///
      /// - Remark: Generated from `#/components/schemas/VerifyOtpResult/verificationToken`.
      public var verificationToken: Swift.String
      /// Creates a new `VerifyOtpResult`.
      ///
      /// - Parameters:
      ///   - verificationToken: Signed JWT containing a unique id, expiry, verification type, contact. Verification status of a user is updated when the token is consumed (in OTP_LOGIN requests)
      public init(verificationToken: Swift.String) {
        self.verificationToken = verificationToken
      }
      public enum CodingKeys: String, CodingKey {
        case verificationToken
      }
    }
    /// - Remark: Generated from `#/components/schemas/Vote`.
    public struct Vote: Codable, Hashable, Sendable {
      /// Unique identifier for a given Vote object.
      ///
      /// - Remark: Generated from `#/components/schemas/Vote/id`.
      public var id: Swift.String
      /// Unique identifier for a given User.
      ///
      /// - Remark: Generated from `#/components/schemas/Vote/userId`.
      public var userId: Swift.String
      /// - Remark: Generated from `#/components/schemas/Vote/user`.
      public var user: Components.Schemas.User
      /// Unique identifier for a given Activity object.
      ///
      /// - Remark: Generated from `#/components/schemas/Vote/activityId`.
      public var activityId: Swift.String
      /// - Remark: Generated from `#/components/schemas/Vote/selection`.
      @frozen public enum selectionPayload: String, Codable, Hashable, Sendable, CaseIterable {
        case VOTE_SELECTION_APPROVED = "VOTE_SELECTION_APPROVED"
        case VOTE_SELECTION_REJECTED = "VOTE_SELECTION_REJECTED"
      }
      /// - Remark: Generated from `#/components/schemas/Vote/selection`.
      public var selection: Components.Schemas.Vote.selectionPayload
      /// The raw message being signed within a Vote.
      ///
      /// - Remark: Generated from `#/components/schemas/Vote/message`.
      public var message: Swift.String
      /// The public component of a cryptographic key pair used to sign messages and transactions.
      ///
      /// - Remark: Generated from `#/components/schemas/Vote/publicKey`.
      public var publicKey: Swift.String
      /// The signature applied to a particular vote.
      ///
      /// - Remark: Generated from `#/components/schemas/Vote/signature`.
      public var signature: Swift.String
      /// Method used to produce a signature.
      ///
      /// - Remark: Generated from `#/components/schemas/Vote/scheme`.
      public var scheme: Swift.String
      /// - Remark: Generated from `#/components/schemas/Vote/createdAt`.
      public var createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// Creates a new `Vote`.
      ///
      /// - Parameters:
      ///   - id: Unique identifier for a given Vote object.
      ///   - userId: Unique identifier for a given User.
      ///   - user:
      ///   - activityId: Unique identifier for a given Activity object.
      ///   - selection:
      ///   - message: The raw message being signed within a Vote.
      ///   - publicKey: The public component of a cryptographic key pair used to sign messages and transactions.
      ///   - signature: The signature applied to a particular vote.
      ///   - scheme: Method used to produce a signature.
      ///   - createdAt:
      public init(
        id: Swift.String,
        userId: Swift.String,
        user: Components.Schemas.User,
        activityId: Swift.String,
        selection: Components.Schemas.Vote.selectionPayload,
        message: Swift.String,
        publicKey: Swift.String,
        signature: Swift.String,
        scheme: Swift.String,
        createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      ) {
        self.id = id
        self.userId = userId
        self.user = user
        self.activityId = activityId
        self.selection = selection
        self.message = message
        self.publicKey = publicKey
        self.signature = signature
        self.scheme = scheme
        self.createdAt = createdAt
      }
      public enum CodingKeys: String, CodingKey {
        case id
        case userId
        case user
        case activityId
        case selection
        case message
        case publicKey
        case signature
        case scheme
        case createdAt
      }
    }
    /// - Remark: Generated from `#/components/schemas/Wallet`.
    public struct Wallet: Codable, Hashable, Sendable {
      /// Unique identifier for a given Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/Wallet/walletId`.
      public var walletId: Swift.String
      /// Human-readable name for a Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/Wallet/walletName`.
      public var walletName: Swift.String
      /// - Remark: Generated from `#/components/schemas/Wallet/createdAt`.
      public var createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// - Remark: Generated from `#/components/schemas/Wallet/updatedAt`.
      public var updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// True when a given Wallet is exported, false otherwise.
      ///
      /// - Remark: Generated from `#/components/schemas/Wallet/exported`.
      public var exported: Swift.Bool
      /// True when a given Wallet is imported, false otherwise.
      ///
      /// - Remark: Generated from `#/components/schemas/Wallet/imported`.
      public var imported: Swift.Bool
      /// Creates a new `Wallet`.
      ///
      /// - Parameters:
      ///   - walletId: Unique identifier for a given Wallet.
      ///   - walletName: Human-readable name for a Wallet.
      ///   - createdAt:
      ///   - updatedAt:
      ///   - exported: True when a given Wallet is exported, false otherwise.
      ///   - imported: True when a given Wallet is imported, false otherwise.
      public init(
        walletId: Swift.String,
        walletName: Swift.String,
        createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        exported: Swift.Bool,
        imported: Swift.Bool
      ) {
        self.walletId = walletId
        self.walletName = walletName
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.exported = exported
        self.imported = imported
      }
      public enum CodingKeys: String, CodingKey {
        case walletId
        case walletName
        case createdAt
        case updatedAt
        case exported
        case imported
      }
    }
    /// - Remark: Generated from `#/components/schemas/WalletAccount`.
    public struct WalletAccount: Codable, Hashable, Sendable {
      /// Unique identifier for a given Wallet Account.
      ///
      /// - Remark: Generated from `#/components/schemas/WalletAccount/walletAccountId`.
      public var walletAccountId: Swift.String
      /// The Organization the Account belongs to.
      ///
      /// - Remark: Generated from `#/components/schemas/WalletAccount/organizationId`.
      public var organizationId: Swift.String
      /// The Wallet the Account was derived from.
      ///
      /// - Remark: Generated from `#/components/schemas/WalletAccount/walletId`.
      public var walletId: Swift.String
      /// - Remark: Generated from `#/components/schemas/WalletAccount/curve`.
      public var curve: Components.Schemas.Curve
      /// - Remark: Generated from `#/components/schemas/WalletAccount/pathFormat`.
      public var pathFormat: Components.Schemas.PathFormat
      /// Path used to generate the Account.
      ///
      /// - Remark: Generated from `#/components/schemas/WalletAccount/path`.
      public var path: Swift.String
      /// - Remark: Generated from `#/components/schemas/WalletAccount/addressFormat`.
      public var addressFormat: Components.Schemas.AddressFormat
      /// Address generated using the Wallet seed and Account parameters.
      ///
      /// - Remark: Generated from `#/components/schemas/WalletAccount/address`.
      public var address: Swift.String
      /// - Remark: Generated from `#/components/schemas/WalletAccount/createdAt`.
      public var createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// - Remark: Generated from `#/components/schemas/WalletAccount/updatedAt`.
      public var updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// The public component of this wallet account's underlying cryptographic key pair.
      ///
      /// - Remark: Generated from `#/components/schemas/WalletAccount/publicKey`.
      public var publicKey: Swift.String?
      /// Creates a new `WalletAccount`.
      ///
      /// - Parameters:
      ///   - walletAccountId: Unique identifier for a given Wallet Account.
      ///   - organizationId: The Organization the Account belongs to.
      ///   - walletId: The Wallet the Account was derived from.
      ///   - curve:
      ///   - pathFormat:
      ///   - path: Path used to generate the Account.
      ///   - addressFormat:
      ///   - address: Address generated using the Wallet seed and Account parameters.
      ///   - createdAt:
      ///   - updatedAt:
      ///   - publicKey: The public component of this wallet account's underlying cryptographic key pair.
      public init(
        walletAccountId: Swift.String,
        organizationId: Swift.String,
        walletId: Swift.String,
        curve: Components.Schemas.Curve,
        pathFormat: Components.Schemas.PathFormat,
        path: Swift.String,
        addressFormat: Components.Schemas.AddressFormat,
        address: Swift.String,
        createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        publicKey: Swift.String? = nil
      ) {
        self.walletAccountId = walletAccountId
        self.organizationId = organizationId
        self.walletId = walletId
        self.curve = curve
        self.pathFormat = pathFormat
        self.path = path
        self.addressFormat = addressFormat
        self.address = address
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.publicKey = publicKey
      }
      public enum CodingKeys: String, CodingKey {
        case walletAccountId
        case organizationId
        case walletId
        case curve
        case pathFormat
        case path
        case addressFormat
        case address
        case createdAt
        case updatedAt
        case publicKey
      }
    }
    /// - Remark: Generated from `#/components/schemas/WalletAccountParams`.
    public struct WalletAccountParams: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/WalletAccountParams/curve`.
      public var curve: Components.Schemas.Curve
      /// - Remark: Generated from `#/components/schemas/WalletAccountParams/pathFormat`.
      public var pathFormat: Components.Schemas.PathFormat
      /// Path used to generate a wallet Account.
      ///
      /// - Remark: Generated from `#/components/schemas/WalletAccountParams/path`.
      public var path: Swift.String
      /// - Remark: Generated from `#/components/schemas/WalletAccountParams/addressFormat`.
      public var addressFormat: Components.Schemas.AddressFormat
      /// Creates a new `WalletAccountParams`.
      ///
      /// - Parameters:
      ///   - curve:
      ///   - pathFormat:
      ///   - path: Path used to generate a wallet Account.
      ///   - addressFormat:
      public init(
        curve: Components.Schemas.Curve,
        pathFormat: Components.Schemas.PathFormat,
        path: Swift.String,
        addressFormat: Components.Schemas.AddressFormat
      ) {
        self.curve = curve
        self.pathFormat = pathFormat
        self.path = path
        self.addressFormat = addressFormat
      }
      public enum CodingKeys: String, CodingKey {
        case curve
        case pathFormat
        case path
        case addressFormat
      }
    }
    /// - Remark: Generated from `#/components/schemas/WalletParams`.
    public struct WalletParams: Codable, Hashable, Sendable {
      /// Human-readable name for a Wallet.
      ///
      /// - Remark: Generated from `#/components/schemas/WalletParams/walletName`.
      public var walletName: Swift.String
      /// A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.
      ///
      /// - Remark: Generated from `#/components/schemas/WalletParams/accounts`.
      public var accounts: [Components.Schemas.WalletAccountParams]
      /// Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
      ///
      /// - Remark: Generated from `#/components/schemas/WalletParams/mnemonicLength`.
      public var mnemonicLength: Swift.Int32?
      /// Creates a new `WalletParams`.
      ///
      /// - Parameters:
      ///   - walletName: Human-readable name for a Wallet.
      ///   - accounts: A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.
      ///   - mnemonicLength: Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
      public init(
        walletName: Swift.String,
        accounts: [Components.Schemas.WalletAccountParams],
        mnemonicLength: Swift.Int32? = nil
      ) {
        self.walletName = walletName
        self.accounts = accounts
        self.mnemonicLength = mnemonicLength
      }
      public enum CodingKeys: String, CodingKey {
        case walletName
        case accounts
        case mnemonicLength
      }
    }
    /// - Remark: Generated from `#/components/schemas/WalletResult`.
    public struct WalletResult: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/WalletResult/walletId`.
      public var walletId: Swift.String
      /// A list of account addresses.
      ///
      /// - Remark: Generated from `#/components/schemas/WalletResult/addresses`.
      public var addresses: [Swift.String]
      /// Creates a new `WalletResult`.
      ///
      /// - Parameters:
      ///   - walletId:
      ///   - addresses: A list of account addresses.
      public init(
        walletId: Swift.String,
        addresses: [Swift.String]
      ) {
        self.walletId = walletId
        self.addresses = addresses
      }
      public enum CodingKeys: String, CodingKey {
        case walletId
        case addresses
      }
    }
    /// - Remark: Generated from `#/components/schemas/activity.v1.Address`.
    public struct activity_period_v1_period_Address: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/activity.v1.Address/format`.
      public var format: Components.Schemas.AddressFormat?
      /// - Remark: Generated from `#/components/schemas/activity.v1.Address/address`.
      public var address: Swift.String?
      /// Creates a new `activity_period_v1_period_Address`.
      ///
      /// - Parameters:
      ///   - format:
      ///   - address:
      public init(
        format: Components.Schemas.AddressFormat? = nil,
        address: Swift.String? = nil
      ) {
        self.format = format
        self.address = address
      }
      public enum CodingKeys: String, CodingKey {
        case format
        case address
      }
    }
    /// - Remark: Generated from `#/components/schemas/data.v1.Address`.
    public struct data_period_v1_period_Address: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/data.v1.Address/format`.
      public var format: Components.Schemas.AddressFormat?
      /// - Remark: Generated from `#/components/schemas/data.v1.Address/address`.
      public var address: Swift.String?
      /// Creates a new `data_period_v1_period_Address`.
      ///
      /// - Parameters:
      ///   - format:
      ///   - address:
      public init(
        format: Components.Schemas.AddressFormat? = nil,
        address: Swift.String? = nil
      ) {
        self.format = format
        self.address = address
      }
      public enum CodingKeys: String, CodingKey {
        case format
        case address
      }
    }
    /// - Remark: Generated from `#/components/schemas/external.data.v1.Credential`.
    public struct external_period_data_period_v1_period_Credential: Codable, Hashable, Sendable {
      /// The public component of a cryptographic key pair used to sign messages and transactions.
      ///
      /// - Remark: Generated from `#/components/schemas/external.data.v1.Credential/publicKey`.
      public var publicKey: Swift.String
      /// - Remark: Generated from `#/components/schemas/external.data.v1.Credential/type`.
      public var _type: Components.Schemas.CredentialType
      /// Creates a new `external_period_data_period_v1_period_Credential`.
      ///
      /// - Parameters:
      ///   - publicKey: The public component of a cryptographic key pair used to sign messages and transactions.
      ///   - _type:
      public init(
        publicKey: Swift.String,
        _type: Components.Schemas.CredentialType
      ) {
        self.publicKey = publicKey
        self._type = _type
      }
      public enum CodingKeys: String, CodingKey {
        case publicKey
        case _type = "type"
      }
    }
    /// - Remark: Generated from `#/components/schemas/external.data.v1.Quorum`.
    public struct external_period_data_period_v1_period_Quorum: Codable, Hashable, Sendable {
      /// Count of unique approvals required to meet quorum.
      ///
      /// - Remark: Generated from `#/components/schemas/external.data.v1.Quorum/threshold`.
      public var threshold: Swift.Int32
      /// Unique identifiers of quorum set members.
      ///
      /// - Remark: Generated from `#/components/schemas/external.data.v1.Quorum/userIds`.
      public var userIds: [Swift.String]
      /// Creates a new `external_period_data_period_v1_period_Quorum`.
      ///
      /// - Parameters:
      ///   - threshold: Count of unique approvals required to meet quorum.
      ///   - userIds: Unique identifiers of quorum set members.
      public init(
        threshold: Swift.Int32,
        userIds: [Swift.String]
      ) {
        self.threshold = threshold
        self.userIds = userIds
      }
      public enum CodingKeys: String, CodingKey {
        case threshold
        case userIds
      }
    }
    /// - Remark: Generated from `#/components/schemas/external.data.v1.Timestamp`.
    public struct external_period_data_period_v1_period_Timestamp: Codable, Hashable, Sendable {
      /// - Remark: Generated from `#/components/schemas/external.data.v1.Timestamp/seconds`.
      public var seconds: Swift.String
      /// - Remark: Generated from `#/components/schemas/external.data.v1.Timestamp/nanos`.
      public var nanos: Swift.String
      /// Creates a new `external_period_data_period_v1_period_Timestamp`.
      ///
      /// - Parameters:
      ///   - seconds:
      ///   - nanos:
      public init(
        seconds: Swift.String,
        nanos: Swift.String
      ) {
        self.seconds = seconds
        self.nanos = nanos
      }
      public enum CodingKeys: String, CodingKey {
        case seconds
        case nanos
      }
    }
    /// - Remark: Generated from `#/components/schemas/v1.Tag`.
    public struct v1_period_Tag: Codable, Hashable, Sendable {
      /// Unique identifier for a given Tag.
      ///
      /// - Remark: Generated from `#/components/schemas/v1.Tag/tagId`.
      public var tagId: Swift.String
      /// Human-readable name for a Tag.
      ///
      /// - Remark: Generated from `#/components/schemas/v1.Tag/tagName`.
      public var tagName: Swift.String
      /// - Remark: Generated from `#/components/schemas/v1.Tag/tagType`.
      public var tagType: Components.Schemas.TagType
      /// - Remark: Generated from `#/components/schemas/v1.Tag/createdAt`.
      public var createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// - Remark: Generated from `#/components/schemas/v1.Tag/updatedAt`.
      public var updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      /// Creates a new `v1_period_Tag`.
      ///
      /// - Parameters:
      ///   - tagId: Unique identifier for a given Tag.
      ///   - tagName: Human-readable name for a Tag.
      ///   - tagType:
      ///   - createdAt:
      ///   - updatedAt:
      public init(
        tagId: Swift.String,
        tagName: Swift.String,
        tagType: Components.Schemas.TagType,
        createdAt: Components.Schemas.external_period_data_period_v1_period_Timestamp,
        updatedAt: Components.Schemas.external_period_data_period_v1_period_Timestamp
      ) {
        self.tagId = tagId
        self.tagName = tagName
        self.tagType = tagType
        self.createdAt = createdAt
        self.updatedAt = updatedAt
      }
      public enum CodingKeys: String, CodingKey {
        case tagId
        case tagName
        case tagType
        case createdAt
        case updatedAt
      }
    }
  }
  /// Types generated from the `#/components/parameters` section of the OpenAPI document.
  public enum Parameters {}
  /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
  public enum RequestBodies {}
  /// Types generated from the `#/components/responses` section of the OpenAPI document.
  public enum Responses {}
  /// Types generated from the `#/components/headers` section of the OpenAPI document.
  public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
  /// Get Activity
  ///
  /// Get details about an Activity
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_activity`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_activity/post(GetActivity)`.
  public enum GetActivity {
    public static let id: Swift.String = "GetActivity"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/get_activity/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetActivity.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetActivity.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetActivity.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/get_activity/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_activity/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetActivityRequest)
      }
      public var body: Operations.GetActivity.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetActivity.Input.Headers = .init(),
        body: Operations.GetActivity.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_activity/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/get_activity/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetActivity.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetActivity.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/get_activity/post(GetActivity)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetActivity.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetActivity.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Get API key
  ///
  /// Get details about an API key
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_api_key`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_api_key/post(GetApiKey)`.
  public enum GetApiKey {
    public static let id: Swift.String = "GetApiKey"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/get_api_key/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetApiKey.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetApiKey.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetApiKey.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/get_api_key/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_api_key/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetApiKeyRequest)
      }
      public var body: Operations.GetApiKey.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetApiKey.Input.Headers = .init(),
        body: Operations.GetApiKey.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_api_key/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/get_api_key/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetApiKeyResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetApiKeyResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetApiKey.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetApiKey.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/get_api_key/post(GetApiKey)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetApiKey.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetApiKey.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Get API keys
  ///
  /// Get details about API keys for a user
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_api_keys`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_api_keys/post(GetApiKeys)`.
  public enum GetApiKeys {
    public static let id: Swift.String = "GetApiKeys"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/get_api_keys/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetApiKeys.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetApiKeys.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetApiKeys.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/get_api_keys/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_api_keys/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetApiKeysRequest)
      }
      public var body: Operations.GetApiKeys.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetApiKeys.Input.Headers = .init(),
        body: Operations.GetApiKeys.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_api_keys/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/get_api_keys/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetApiKeysResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetApiKeysResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetApiKeys.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetApiKeys.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/get_api_keys/post(GetApiKeys)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetApiKeys.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetApiKeys.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Get Authenticator
  ///
  /// Get details about an authenticator
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_authenticator`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_authenticator/post(GetAuthenticator)`.
  public enum GetAuthenticator {
    public static let id: Swift.String = "GetAuthenticator"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/get_authenticator/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetAuthenticator.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetAuthenticator.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetAuthenticator.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/get_authenticator/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_authenticator/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetAuthenticatorRequest)
      }
      public var body: Operations.GetAuthenticator.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetAuthenticator.Input.Headers = .init(),
        body: Operations.GetAuthenticator.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_authenticator/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/get_authenticator/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetAuthenticatorResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetAuthenticatorResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetAuthenticator.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetAuthenticator.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/get_authenticator/post(GetAuthenticator)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetAuthenticator.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetAuthenticator.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Get Authenticators
  ///
  /// Get details about authenticators for a user
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_authenticators`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_authenticators/post(GetAuthenticators)`.
  public enum GetAuthenticators {
    public static let id: Swift.String = "GetAuthenticators"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/get_authenticators/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetAuthenticators.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetAuthenticators.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetAuthenticators.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/get_authenticators/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_authenticators/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetAuthenticatorsRequest)
      }
      public var body: Operations.GetAuthenticators.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetAuthenticators.Input.Headers = .init(),
        body: Operations.GetAuthenticators.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_authenticators/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/get_authenticators/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetAuthenticatorsResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetAuthenticatorsResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetAuthenticators.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetAuthenticators.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/get_authenticators/post(GetAuthenticators)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetAuthenticators.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetAuthenticators.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Get Oauth providers
  ///
  /// Get details about Oauth providers for a user
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_oauth_providers`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_oauth_providers/post(GetOauthProviders)`.
  public enum GetOauthProviders {
    public static let id: Swift.String = "GetOauthProviders"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/get_oauth_providers/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetOauthProviders.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetOauthProviders.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetOauthProviders.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/get_oauth_providers/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_oauth_providers/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetOauthProvidersRequest)
      }
      public var body: Operations.GetOauthProviders.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetOauthProviders.Input.Headers = .init(),
        body: Operations.GetOauthProviders.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_oauth_providers/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/get_oauth_providers/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetOauthProvidersResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetOauthProvidersResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetOauthProviders.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetOauthProviders.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/get_oauth_providers/post(GetOauthProviders)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetOauthProviders.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetOauthProviders.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Get Configs
  ///
  /// Get quorum settings and features for an organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_organization_configs`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_organization_configs/post(GetOrganizationConfigs)`.
  public enum GetOrganizationConfigs {
    public static let id: Swift.String = "GetOrganizationConfigs"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/get_organization_configs/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetOrganizationConfigs.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetOrganizationConfigs.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetOrganizationConfigs.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/get_organization_configs/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_organization_configs/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetOrganizationConfigsRequest)
      }
      public var body: Operations.GetOrganizationConfigs.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetOrganizationConfigs.Input.Headers = .init(),
        body: Operations.GetOrganizationConfigs.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_organization_configs/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/get_organization_configs/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetOrganizationConfigsResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetOrganizationConfigsResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetOrganizationConfigs.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetOrganizationConfigs.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/get_organization_configs/post(GetOrganizationConfigs)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetOrganizationConfigs.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetOrganizationConfigs.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Get Policy
  ///
  /// Get details about a Policy
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_policy`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_policy/post(GetPolicy)`.
  public enum GetPolicy {
    public static let id: Swift.String = "GetPolicy"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/get_policy/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPolicy.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetPolicy.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetPolicy.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/get_policy/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_policy/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetPolicyRequest)
      }
      public var body: Operations.GetPolicy.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetPolicy.Input.Headers = .init(),
        body: Operations.GetPolicy.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_policy/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/get_policy/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetPolicyResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetPolicyResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetPolicy.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetPolicy.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/get_policy/post(GetPolicy)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetPolicy.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetPolicy.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Get Private Key
  ///
  /// Get details about a Private Key
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_private_key`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_private_key/post(GetPrivateKey)`.
  public enum GetPrivateKey {
    public static let id: Swift.String = "GetPrivateKey"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/get_private_key/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPrivateKey.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetPrivateKey.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetPrivateKey.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/get_private_key/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_private_key/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetPrivateKeyRequest)
      }
      public var body: Operations.GetPrivateKey.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetPrivateKey.Input.Headers = .init(),
        body: Operations.GetPrivateKey.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_private_key/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/get_private_key/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetPrivateKeyResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetPrivateKeyResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetPrivateKey.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetPrivateKey.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/get_private_key/post(GetPrivateKey)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetPrivateKey.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetPrivateKey.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Get User
  ///
  /// Get details about a User
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_user`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_user/post(GetUser)`.
  public enum GetUser {
    public static let id: Swift.String = "GetUser"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/get_user/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetUser.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetUser.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetUser.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/get_user/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_user/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetUserRequest)
      }
      public var body: Operations.GetUser.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetUser.Input.Headers = .init(),
        body: Operations.GetUser.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_user/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/get_user/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetUserResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetUserResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetUser.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetUser.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/get_user/post(GetUser)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetUser.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetUser.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Get Wallet
  ///
  /// Get details about a Wallet
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_wallet/post(GetWallet)`.
  public enum GetWallet {
    public static let id: Swift.String = "GetWallet"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/get_wallet/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetWallet.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetWallet.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetWallet.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/get_wallet/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_wallet/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetWalletRequest)
      }
      public var body: Operations.GetWallet.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetWallet.Input.Headers = .init(),
        body: Operations.GetWallet.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_wallet/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/get_wallet/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetWalletResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetWalletResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetWallet.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetWallet.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/get_wallet/post(GetWallet)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetWallet.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetWallet.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Get Wallet Account
  ///
  /// Get a single wallet account
  ///
  /// - Remark: HTTP `POST /public/v1/query/get_wallet_account`.
  /// - Remark: Generated from `#/paths//public/v1/query/get_wallet_account/post(GetWalletAccount)`.
  public enum GetWalletAccount {
    public static let id: Swift.String = "GetWalletAccount"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/get_wallet_account/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetWalletAccount.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetWalletAccount.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetWalletAccount.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/get_wallet_account/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_wallet_account/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetWalletAccountRequest)
      }
      public var body: Operations.GetWalletAccount.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetWalletAccount.Input.Headers = .init(),
        body: Operations.GetWalletAccount.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/get_wallet_account/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/get_wallet_account/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetWalletAccountResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetWalletAccountResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetWalletAccount.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetWalletAccount.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/get_wallet_account/post(GetWalletAccount)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetWalletAccount.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetWalletAccount.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// List Activities
  ///
  /// List all Activities within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_activities`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_activities/post(GetActivities)`.
  public enum GetActivities {
    public static let id: Swift.String = "GetActivities"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/list_activities/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetActivities.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetActivities.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetActivities.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/list_activities/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_activities/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetActivitiesRequest)
      }
      public var body: Operations.GetActivities.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetActivities.Input.Headers = .init(),
        body: Operations.GetActivities.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_activities/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/list_activities/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetActivitiesResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetActivitiesResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetActivities.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetActivities.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/list_activities/post(GetActivities)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetActivities.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetActivities.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// List Policies
  ///
  /// List all Policies within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_policies`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_policies/post(GetPolicies)`.
  public enum GetPolicies {
    public static let id: Swift.String = "GetPolicies"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/list_policies/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPolicies.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetPolicies.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetPolicies.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/list_policies/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_policies/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetPoliciesRequest)
      }
      public var body: Operations.GetPolicies.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetPolicies.Input.Headers = .init(),
        body: Operations.GetPolicies.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_policies/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/list_policies/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetPoliciesResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetPoliciesResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetPolicies.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetPolicies.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/list_policies/post(GetPolicies)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetPolicies.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetPolicies.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// List Private Key Tags
  ///
  /// List all Private Key Tags within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_private_key_tags`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_private_key_tags/post(ListPrivateKeyTags)`.
  public enum ListPrivateKeyTags {
    public static let id: Swift.String = "ListPrivateKeyTags"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/list_private_key_tags/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.ListPrivateKeyTags.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.ListPrivateKeyTags.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.ListPrivateKeyTags.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/list_private_key_tags/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_private_key_tags/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.ListPrivateKeyTagsRequest)
      }
      public var body: Operations.ListPrivateKeyTags.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.ListPrivateKeyTags.Input.Headers = .init(),
        body: Operations.ListPrivateKeyTags.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_private_key_tags/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/list_private_key_tags/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ListPrivateKeyTagsResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ListPrivateKeyTagsResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.ListPrivateKeyTags.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.ListPrivateKeyTags.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/list_private_key_tags/post(ListPrivateKeyTags)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.ListPrivateKeyTags.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.ListPrivateKeyTags.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// List Private Keys
  ///
  /// List all Private Keys within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_private_keys`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_private_keys/post(GetPrivateKeys)`.
  public enum GetPrivateKeys {
    public static let id: Swift.String = "GetPrivateKeys"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/list_private_keys/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetPrivateKeys.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetPrivateKeys.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetPrivateKeys.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/list_private_keys/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_private_keys/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetPrivateKeysRequest)
      }
      public var body: Operations.GetPrivateKeys.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetPrivateKeys.Input.Headers = .init(),
        body: Operations.GetPrivateKeys.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_private_keys/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/list_private_keys/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetPrivateKeysResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetPrivateKeysResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetPrivateKeys.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetPrivateKeys.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/list_private_keys/post(GetPrivateKeys)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetPrivateKeys.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetPrivateKeys.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Get Suborgs
  ///
  /// Get all suborg IDs associated given a parent org ID and an optional filter.
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_suborgs`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_suborgs/post(GetSubOrgIds)`.
  public enum GetSubOrgIds {
    public static let id: Swift.String = "GetSubOrgIds"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/list_suborgs/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetSubOrgIds.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetSubOrgIds.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetSubOrgIds.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/list_suborgs/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_suborgs/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetSubOrgIdsRequest)
      }
      public var body: Operations.GetSubOrgIds.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetSubOrgIds.Input.Headers = .init(),
        body: Operations.GetSubOrgIds.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_suborgs/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/list_suborgs/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetSubOrgIdsResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetSubOrgIdsResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetSubOrgIds.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetSubOrgIds.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/list_suborgs/post(GetSubOrgIds)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetSubOrgIds.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetSubOrgIds.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// List User Tags
  ///
  /// List all User Tags within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_user_tags`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_user_tags/post(ListUserTags)`.
  public enum ListUserTags {
    public static let id: Swift.String = "ListUserTags"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/list_user_tags/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListUserTags.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.ListUserTags.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.ListUserTags.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/list_user_tags/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_user_tags/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.ListUserTagsRequest)
      }
      public var body: Operations.ListUserTags.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.ListUserTags.Input.Headers = .init(),
        body: Operations.ListUserTags.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_user_tags/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/list_user_tags/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ListUserTagsResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ListUserTagsResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.ListUserTags.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.ListUserTags.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/list_user_tags/post(ListUserTags)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.ListUserTags.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.ListUserTags.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// List Users
  ///
  /// List all Users within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_users`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_users/post(GetUsers)`.
  public enum GetUsers {
    public static let id: Swift.String = "GetUsers"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/list_users/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetUsers.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetUsers.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetUsers.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/list_users/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_users/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetUsersRequest)
      }
      public var body: Operations.GetUsers.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetUsers.Input.Headers = .init(),
        body: Operations.GetUsers.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_users/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/list_users/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetUsersResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetUsersResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetUsers.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetUsers.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/list_users/post(GetUsers)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetUsers.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetUsers.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Get Verified Suborgs
  ///
  /// Get all email or phone verified suborg IDs associated given a parent org ID.
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_verified_suborgs`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_verified_suborgs/post(GetVerifiedSubOrgIds)`.
  public enum GetVerifiedSubOrgIds {
    public static let id: Swift.String = "GetVerifiedSubOrgIds"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/list_verified_suborgs/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetVerifiedSubOrgIds.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetVerifiedSubOrgIds.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetVerifiedSubOrgIds.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/list_verified_suborgs/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_verified_suborgs/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetVerifiedSubOrgIdsRequest)
      }
      public var body: Operations.GetVerifiedSubOrgIds.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetVerifiedSubOrgIds.Input.Headers = .init(),
        body: Operations.GetVerifiedSubOrgIds.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_verified_suborgs/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/list_verified_suborgs/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetVerifiedSubOrgIdsResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetVerifiedSubOrgIdsResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetVerifiedSubOrgIds.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetVerifiedSubOrgIds.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/list_verified_suborgs/post(GetVerifiedSubOrgIds)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetVerifiedSubOrgIds.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetVerifiedSubOrgIds.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// List Wallets Accounts
  ///
  /// List all Accounts within a Wallet
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_wallet_accounts`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_wallet_accounts/post(GetWalletAccounts)`.
  public enum GetWalletAccounts {
    public static let id: Swift.String = "GetWalletAccounts"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/list_wallet_accounts/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetWalletAccounts.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetWalletAccounts.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetWalletAccounts.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/list_wallet_accounts/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_wallet_accounts/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetWalletAccountsRequest)
      }
      public var body: Operations.GetWalletAccounts.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetWalletAccounts.Input.Headers = .init(),
        body: Operations.GetWalletAccounts.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_wallet_accounts/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/list_wallet_accounts/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetWalletAccountsResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetWalletAccountsResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetWalletAccounts.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetWalletAccounts.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/list_wallet_accounts/post(GetWalletAccounts)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetWalletAccounts.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetWalletAccounts.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// List Wallets
  ///
  /// List all Wallets within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/query/list_wallets`.
  /// - Remark: Generated from `#/paths//public/v1/query/list_wallets/post(GetWallets)`.
  public enum GetWallets {
    public static let id: Swift.String = "GetWallets"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/list_wallets/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetWallets.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetWallets.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetWallets.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/list_wallets/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_wallets/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetWalletsRequest)
      }
      public var body: Operations.GetWallets.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetWallets.Input.Headers = .init(),
        body: Operations.GetWallets.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/list_wallets/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/list_wallets/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetWalletsResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetWalletsResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetWallets.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetWallets.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/list_wallets/post(GetWallets)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetWallets.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetWallets.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Who am I?
  ///
  /// Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.
  ///
  /// - Remark: HTTP `POST /public/v1/query/whoami`.
  /// - Remark: Generated from `#/paths//public/v1/query/whoami/post(GetWhoami)`.
  public enum GetWhoami {
    public static let id: Swift.String = "GetWhoami"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/query/whoami/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetWhoami.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.GetWhoami.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.GetWhoami.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/query/whoami/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/whoami/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.GetWhoamiRequest)
      }
      public var body: Operations.GetWhoami.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.GetWhoami.Input.Headers = .init(),
        body: Operations.GetWhoami.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/query/whoami/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/query/whoami/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.GetWhoamiResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.GetWhoamiResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.GetWhoami.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.GetWhoami.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/query/whoami/post(GetWhoami)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.GetWhoami.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.GetWhoami.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Approve Activity
  ///
  /// Approve an Activity
  ///
  /// - Remark: HTTP `POST /public/v1/submit/approve_activity`.
  /// - Remark: Generated from `#/paths//public/v1/submit/approve_activity/post(ApproveActivity)`.
  public enum ApproveActivity {
    public static let id: Swift.String = "ApproveActivity"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/approve_activity/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.ApproveActivity.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.ApproveActivity.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.ApproveActivity.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/approve_activity/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/approve_activity/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.ApproveActivityRequest)
      }
      public var body: Operations.ApproveActivity.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.ApproveActivity.Input.Headers = .init(),
        body: Operations.ApproveActivity.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/approve_activity/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/approve_activity/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.ApproveActivity.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.ApproveActivity.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/approve_activity/post(ApproveActivity)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.ApproveActivity.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.ApproveActivity.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create API Keys
  ///
  /// Add api keys to an existing User
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_api_keys`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_api_keys/post(CreateApiKeys)`.
  public enum CreateApiKeys {
    public static let id: Swift.String = "CreateApiKeys"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_api_keys/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateApiKeys.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateApiKeys.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreateApiKeys.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_api_keys/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_api_keys/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreateApiKeysRequest)
      }
      public var body: Operations.CreateApiKeys.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreateApiKeys.Input.Headers = .init(),
        body: Operations.CreateApiKeys.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_api_keys/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_api_keys/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreateApiKeys.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreateApiKeys.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_api_keys/post(CreateApiKeys)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreateApiKeys.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreateApiKeys.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create Authenticators
  ///
  /// Create Authenticators to authenticate requests to Turnkey
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_authenticators`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_authenticators/post(CreateAuthenticators)`.
  public enum CreateAuthenticators {
    public static let id: Swift.String = "CreateAuthenticators"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_authenticators/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateAuthenticators.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateAuthenticators.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreateAuthenticators.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_authenticators/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_authenticators/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreateAuthenticatorsRequest)
      }
      public var body: Operations.CreateAuthenticators.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreateAuthenticators.Input.Headers = .init(),
        body: Operations.CreateAuthenticators.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_authenticators/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_authenticators/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreateAuthenticators.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreateAuthenticators.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_authenticators/post(CreateAuthenticators)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreateAuthenticators.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreateAuthenticators.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create Invitations
  ///
  /// Create Invitations to join an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_invitations`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_invitations/post(CreateInvitations)`.
  public enum CreateInvitations {
    public static let id: Swift.String = "CreateInvitations"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_invitations/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateInvitations.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateInvitations.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreateInvitations.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_invitations/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_invitations/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreateInvitationsRequest)
      }
      public var body: Operations.CreateInvitations.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreateInvitations.Input.Headers = .init(),
        body: Operations.CreateInvitations.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_invitations/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_invitations/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreateInvitations.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreateInvitations.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_invitations/post(CreateInvitations)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreateInvitations.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreateInvitations.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create Oauth Providers
  ///
  /// Creates Oauth providers for a specified user - BETA
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_oauth_providers`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_oauth_providers/post(CreateOauthProviders)`.
  public enum CreateOauthProviders {
    public static let id: Swift.String = "CreateOauthProviders"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_oauth_providers/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateOauthProviders.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateOauthProviders.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreateOauthProviders.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_oauth_providers/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_oauth_providers/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreateOauthProvidersRequest)
      }
      public var body: Operations.CreateOauthProviders.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreateOauthProviders.Input.Headers = .init(),
        body: Operations.CreateOauthProviders.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_oauth_providers/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_oauth_providers/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreateOauthProviders.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreateOauthProviders.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_oauth_providers/post(CreateOauthProviders)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreateOauthProviders.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreateOauthProviders.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create Policies
  ///
  /// Create new Policies
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_policies`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_policies/post(CreatePolicies)`.
  public enum CreatePolicies {
    public static let id: Swift.String = "CreatePolicies"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_policies/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreatePolicies.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreatePolicies.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreatePolicies.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_policies/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_policies/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreatePoliciesRequest)
      }
      public var body: Operations.CreatePolicies.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreatePolicies.Input.Headers = .init(),
        body: Operations.CreatePolicies.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_policies/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_policies/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreatePolicies.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreatePolicies.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_policies/post(CreatePolicies)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreatePolicies.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreatePolicies.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create Policy
  ///
  /// Create a new Policy
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_policy`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_policy/post(CreatePolicy)`.
  public enum CreatePolicy {
    public static let id: Swift.String = "CreatePolicy"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_policy/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreatePolicy.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreatePolicy.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreatePolicy.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_policy/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_policy/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreatePolicyRequest)
      }
      public var body: Operations.CreatePolicy.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreatePolicy.Input.Headers = .init(),
        body: Operations.CreatePolicy.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_policy/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_policy/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreatePolicy.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreatePolicy.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_policy/post(CreatePolicy)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreatePolicy.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreatePolicy.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create Private Key Tag
  ///
  /// Create a private key tag and add it to private keys.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_private_key_tag`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_private_key_tag/post(CreatePrivateKeyTag)`.
  public enum CreatePrivateKeyTag {
    public static let id: Swift.String = "CreatePrivateKeyTag"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_private_key_tag/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreatePrivateKeyTag.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreatePrivateKeyTag.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreatePrivateKeyTag.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_private_key_tag/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_private_key_tag/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreatePrivateKeyTagRequest)
      }
      public var body: Operations.CreatePrivateKeyTag.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreatePrivateKeyTag.Input.Headers = .init(),
        body: Operations.CreatePrivateKeyTag.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_private_key_tag/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_private_key_tag/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreatePrivateKeyTag.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreatePrivateKeyTag.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_private_key_tag/post(CreatePrivateKeyTag)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreatePrivateKeyTag.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreatePrivateKeyTag.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create Private Keys
  ///
  /// Create new Private Keys
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_private_keys`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_private_keys/post(CreatePrivateKeys)`.
  public enum CreatePrivateKeys {
    public static let id: Swift.String = "CreatePrivateKeys"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_private_keys/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreatePrivateKeys.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreatePrivateKeys.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreatePrivateKeys.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_private_keys/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_private_keys/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreatePrivateKeysRequest)
      }
      public var body: Operations.CreatePrivateKeys.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreatePrivateKeys.Input.Headers = .init(),
        body: Operations.CreatePrivateKeys.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_private_keys/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_private_keys/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreatePrivateKeys.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreatePrivateKeys.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_private_keys/post(CreatePrivateKeys)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreatePrivateKeys.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreatePrivateKeys.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create Read Only Session
  ///
  /// Create a read only session for a user (valid for 1 hour)
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_read_only_session`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_read_only_session/post(CreateReadOnlySession)`.
  public enum CreateReadOnlySession {
    public static let id: Swift.String = "CreateReadOnlySession"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_read_only_session/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateReadOnlySession.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateReadOnlySession.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreateReadOnlySession.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_read_only_session/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_read_only_session/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreateReadOnlySessionRequest)
      }
      public var body: Operations.CreateReadOnlySession.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreateReadOnlySession.Input.Headers = .init(),
        body: Operations.CreateReadOnlySession.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_read_only_session/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_read_only_session/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreateReadOnlySession.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreateReadOnlySession.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_read_only_session/post(CreateReadOnlySession)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreateReadOnlySession.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreateReadOnlySession.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create Read Write Session
  ///
  /// Create a read write session for a user
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_read_write_session`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_read_write_session/post(CreateReadWriteSession)`.
  public enum CreateReadWriteSession {
    public static let id: Swift.String = "CreateReadWriteSession"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_read_write_session/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateReadWriteSession.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateReadWriteSession.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreateReadWriteSession.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_read_write_session/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_read_write_session/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreateReadWriteSessionRequest)
      }
      public var body: Operations.CreateReadWriteSession.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreateReadWriteSession.Input.Headers = .init(),
        body: Operations.CreateReadWriteSession.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_read_write_session/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_read_write_session/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreateReadWriteSession.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreateReadWriteSession.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_read_write_session/post(CreateReadWriteSession)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreateReadWriteSession.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreateReadWriteSession.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create Sub-Organization
  ///
  /// Create a new Sub-Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_sub_organization`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_sub_organization/post(CreateSubOrganization)`.
  public enum CreateSubOrganization {
    public static let id: Swift.String = "CreateSubOrganization"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_sub_organization/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateSubOrganization.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateSubOrganization.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreateSubOrganization.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_sub_organization/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_sub_organization/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreateSubOrganizationRequest)
      }
      public var body: Operations.CreateSubOrganization.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreateSubOrganization.Input.Headers = .init(),
        body: Operations.CreateSubOrganization.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_sub_organization/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_sub_organization/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreateSubOrganization.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreateSubOrganization.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_sub_organization/post(CreateSubOrganization)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreateSubOrganization.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreateSubOrganization.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create User Tag
  ///
  /// Create a user tag and add it to users.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_user_tag`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_user_tag/post(CreateUserTag)`.
  public enum CreateUserTag {
    public static let id: Swift.String = "CreateUserTag"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_user_tag/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateUserTag.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateUserTag.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreateUserTag.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_user_tag/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_user_tag/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreateUserTagRequest)
      }
      public var body: Operations.CreateUserTag.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreateUserTag.Input.Headers = .init(),
        body: Operations.CreateUserTag.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_user_tag/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_user_tag/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreateUserTag.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreateUserTag.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_user_tag/post(CreateUserTag)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreateUserTag.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreateUserTag.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create Users
  ///
  /// Create Users in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_users`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_users/post(CreateUsers)`.
  public enum CreateUsers {
    public static let id: Swift.String = "CreateUsers"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_users/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateUsers.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateUsers.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreateUsers.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_users/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_users/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreateUsersRequest)
      }
      public var body: Operations.CreateUsers.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreateUsers.Input.Headers = .init(),
        body: Operations.CreateUsers.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_users/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_users/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreateUsers.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreateUsers.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_users/post(CreateUsers)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreateUsers.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreateUsers.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create Wallet
  ///
  /// Create a Wallet and derive addresses
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_wallet/post(CreateWallet)`.
  public enum CreateWallet {
    public static let id: Swift.String = "CreateWallet"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_wallet/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateWallet.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateWallet.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreateWallet.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_wallet/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_wallet/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreateWalletRequest)
      }
      public var body: Operations.CreateWallet.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreateWallet.Input.Headers = .init(),
        body: Operations.CreateWallet.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_wallet/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_wallet/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreateWallet.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreateWallet.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_wallet/post(CreateWallet)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreateWallet.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreateWallet.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Create Wallet Accounts
  ///
  /// Derive additional addresses using an existing wallet
  ///
  /// - Remark: HTTP `POST /public/v1/submit/create_wallet_accounts`.
  /// - Remark: Generated from `#/paths//public/v1/submit/create_wallet_accounts/post(CreateWalletAccounts)`.
  public enum CreateWalletAccounts {
    public static let id: Swift.String = "CreateWalletAccounts"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/create_wallet_accounts/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateWalletAccounts.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.CreateWalletAccounts.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.CreateWalletAccounts.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/create_wallet_accounts/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_wallet_accounts/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.CreateWalletAccountsRequest)
      }
      public var body: Operations.CreateWalletAccounts.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.CreateWalletAccounts.Input.Headers = .init(),
        body: Operations.CreateWalletAccounts.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/create_wallet_accounts/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/create_wallet_accounts/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.CreateWalletAccounts.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.CreateWalletAccounts.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/create_wallet_accounts/post(CreateWalletAccounts)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.CreateWalletAccounts.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.CreateWalletAccounts.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Delete API Keys
  ///
  /// Remove api keys from a User
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_api_keys`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_api_keys/post(DeleteApiKeys)`.
  public enum DeleteApiKeys {
    public static let id: Swift.String = "DeleteApiKeys"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_api_keys/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteApiKeys.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeleteApiKeys.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.DeleteApiKeys.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_api_keys/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_api_keys/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.DeleteApiKeysRequest)
      }
      public var body: Operations.DeleteApiKeys.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.DeleteApiKeys.Input.Headers = .init(),
        body: Operations.DeleteApiKeys.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_api_keys/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/delete_api_keys/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.DeleteApiKeys.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.DeleteApiKeys.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/delete_api_keys/post(DeleteApiKeys)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.DeleteApiKeys.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.DeleteApiKeys.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Delete Authenticators
  ///
  /// Remove authenticators from a User
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_authenticators`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_authenticators/post(DeleteAuthenticators)`.
  public enum DeleteAuthenticators {
    public static let id: Swift.String = "DeleteAuthenticators"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_authenticators/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeleteAuthenticators.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeleteAuthenticators.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.DeleteAuthenticators.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_authenticators/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_authenticators/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.DeleteAuthenticatorsRequest)
      }
      public var body: Operations.DeleteAuthenticators.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.DeleteAuthenticators.Input.Headers = .init(),
        body: Operations.DeleteAuthenticators.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_authenticators/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/delete_authenticators/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.DeleteAuthenticators.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.DeleteAuthenticators.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/delete_authenticators/post(DeleteAuthenticators)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.DeleteAuthenticators.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.DeleteAuthenticators.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Delete Invitation
  ///
  /// Delete an existing Invitation
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_invitation`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_invitation/post(DeleteInvitation)`.
  public enum DeleteInvitation {
    public static let id: Swift.String = "DeleteInvitation"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_invitation/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeleteInvitation.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeleteInvitation.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.DeleteInvitation.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_invitation/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_invitation/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.DeleteInvitationRequest)
      }
      public var body: Operations.DeleteInvitation.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.DeleteInvitation.Input.Headers = .init(),
        body: Operations.DeleteInvitation.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_invitation/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/delete_invitation/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.DeleteInvitation.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.DeleteInvitation.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/delete_invitation/post(DeleteInvitation)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.DeleteInvitation.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.DeleteInvitation.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Delete Oauth Providers
  ///
  /// Removes Oauth providers for a specified user - BETA
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_oauth_providers`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_oauth_providers/post(DeleteOauthProviders)`.
  public enum DeleteOauthProviders {
    public static let id: Swift.String = "DeleteOauthProviders"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_oauth_providers/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeleteOauthProviders.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeleteOauthProviders.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.DeleteOauthProviders.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_oauth_providers/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_oauth_providers/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.DeleteOauthProvidersRequest)
      }
      public var body: Operations.DeleteOauthProviders.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.DeleteOauthProviders.Input.Headers = .init(),
        body: Operations.DeleteOauthProviders.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_oauth_providers/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/delete_oauth_providers/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.DeleteOauthProviders.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.DeleteOauthProviders.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/delete_oauth_providers/post(DeleteOauthProviders)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.DeleteOauthProviders.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.DeleteOauthProviders.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Delete Policy
  ///
  /// Delete an existing Policy
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_policy`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_policy/post(DeletePolicy)`.
  public enum DeletePolicy {
    public static let id: Swift.String = "DeletePolicy"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_policy/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeletePolicy.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeletePolicy.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.DeletePolicy.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_policy/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_policy/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.DeletePolicyRequest)
      }
      public var body: Operations.DeletePolicy.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.DeletePolicy.Input.Headers = .init(),
        body: Operations.DeletePolicy.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_policy/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/delete_policy/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.DeletePolicy.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.DeletePolicy.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/delete_policy/post(DeletePolicy)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.DeletePolicy.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.DeletePolicy.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Delete Private Key Tags
  ///
  /// Delete Private Key Tags within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_private_key_tags`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_private_key_tags/post(DeletePrivateKeyTags)`.
  public enum DeletePrivateKeyTags {
    public static let id: Swift.String = "DeletePrivateKeyTags"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_private_key_tags/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeletePrivateKeyTags.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeletePrivateKeyTags.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.DeletePrivateKeyTags.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_private_key_tags/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_private_key_tags/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.DeletePrivateKeyTagsRequest)
      }
      public var body: Operations.DeletePrivateKeyTags.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.DeletePrivateKeyTags.Input.Headers = .init(),
        body: Operations.DeletePrivateKeyTags.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_private_key_tags/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/delete_private_key_tags/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.DeletePrivateKeyTags.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.DeletePrivateKeyTags.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/delete_private_key_tags/post(DeletePrivateKeyTags)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.DeletePrivateKeyTags.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.DeletePrivateKeyTags.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Delete Private Keys
  ///
  /// Deletes private keys for an organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_private_keys`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_private_keys/post(DeletePrivateKeys)`.
  public enum DeletePrivateKeys {
    public static let id: Swift.String = "DeletePrivateKeys"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_private_keys/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeletePrivateKeys.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeletePrivateKeys.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.DeletePrivateKeys.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_private_keys/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_private_keys/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.DeletePrivateKeysRequest)
      }
      public var body: Operations.DeletePrivateKeys.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.DeletePrivateKeys.Input.Headers = .init(),
        body: Operations.DeletePrivateKeys.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_private_keys/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/delete_private_keys/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.DeletePrivateKeys.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.DeletePrivateKeys.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/delete_private_keys/post(DeletePrivateKeys)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.DeletePrivateKeys.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.DeletePrivateKeys.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Delete Sub Organization
  ///
  /// Deletes a sub organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_sub_organization`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_sub_organization/post(DeleteSubOrganization)`.
  public enum DeleteSubOrganization {
    public static let id: Swift.String = "DeleteSubOrganization"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_sub_organization/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeleteSubOrganization.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeleteSubOrganization.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.DeleteSubOrganization.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_sub_organization/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_sub_organization/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.DeleteSubOrganizationRequest)
      }
      public var body: Operations.DeleteSubOrganization.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.DeleteSubOrganization.Input.Headers = .init(),
        body: Operations.DeleteSubOrganization.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_sub_organization/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/delete_sub_organization/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.DeleteSubOrganization.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.DeleteSubOrganization.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/delete_sub_organization/post(DeleteSubOrganization)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.DeleteSubOrganization.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.DeleteSubOrganization.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Delete User Tags
  ///
  /// Delete User Tags within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_user_tags`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_user_tags/post(DeleteUserTags)`.
  public enum DeleteUserTags {
    public static let id: Swift.String = "DeleteUserTags"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_user_tags/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteUserTags.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeleteUserTags.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.DeleteUserTags.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_user_tags/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_user_tags/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.DeleteUserTagsRequest)
      }
      public var body: Operations.DeleteUserTags.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.DeleteUserTags.Input.Headers = .init(),
        body: Operations.DeleteUserTags.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_user_tags/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/delete_user_tags/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.DeleteUserTags.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.DeleteUserTags.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/delete_user_tags/post(DeleteUserTags)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.DeleteUserTags.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.DeleteUserTags.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Delete Users
  ///
  /// Delete Users within an Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_users`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_users/post(DeleteUsers)`.
  public enum DeleteUsers {
    public static let id: Swift.String = "DeleteUsers"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_users/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteUsers.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeleteUsers.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.DeleteUsers.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_users/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_users/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.DeleteUsersRequest)
      }
      public var body: Operations.DeleteUsers.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.DeleteUsers.Input.Headers = .init(),
        body: Operations.DeleteUsers.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_users/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/delete_users/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.DeleteUsers.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.DeleteUsers.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/delete_users/post(DeleteUsers)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.DeleteUsers.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.DeleteUsers.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Delete Wallets
  ///
  /// Deletes wallets for an organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/delete_wallets`.
  /// - Remark: Generated from `#/paths//public/v1/submit/delete_wallets/post(DeleteWallets)`.
  public enum DeleteWallets {
    public static let id: Swift.String = "DeleteWallets"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_wallets/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteWallets.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.DeleteWallets.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.DeleteWallets.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/delete_wallets/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_wallets/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.DeleteWalletsRequest)
      }
      public var body: Operations.DeleteWallets.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.DeleteWallets.Input.Headers = .init(),
        body: Operations.DeleteWallets.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/delete_wallets/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/delete_wallets/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.DeleteWallets.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.DeleteWallets.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/delete_wallets/post(DeleteWallets)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.DeleteWallets.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.DeleteWallets.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Perform Email Auth
  ///
  /// Authenticate a user via Email
  ///
  /// - Remark: HTTP `POST /public/v1/submit/email_auth`.
  /// - Remark: Generated from `#/paths//public/v1/submit/email_auth/post(EmailAuth)`.
  public enum EmailAuth {
    public static let id: Swift.String = "EmailAuth"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/email_auth/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.EmailAuth.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.EmailAuth.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.EmailAuth.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/email_auth/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/email_auth/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.EmailAuthRequest)
      }
      public var body: Operations.EmailAuth.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.EmailAuth.Input.Headers = .init(),
        body: Operations.EmailAuth.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/email_auth/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/email_auth/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.EmailAuth.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.EmailAuth.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/email_auth/post(EmailAuth)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.EmailAuth.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.EmailAuth.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Export Private Key
  ///
  /// Exports a Private Key
  ///
  /// - Remark: HTTP `POST /public/v1/submit/export_private_key`.
  /// - Remark: Generated from `#/paths//public/v1/submit/export_private_key/post(ExportPrivateKey)`.
  public enum ExportPrivateKey {
    public static let id: Swift.String = "ExportPrivateKey"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/export_private_key/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.ExportPrivateKey.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.ExportPrivateKey.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.ExportPrivateKey.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/export_private_key/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/export_private_key/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.ExportPrivateKeyRequest)
      }
      public var body: Operations.ExportPrivateKey.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.ExportPrivateKey.Input.Headers = .init(),
        body: Operations.ExportPrivateKey.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/export_private_key/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/export_private_key/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.ExportPrivateKey.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.ExportPrivateKey.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/export_private_key/post(ExportPrivateKey)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.ExportPrivateKey.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.ExportPrivateKey.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Export Wallet
  ///
  /// Exports a Wallet
  ///
  /// - Remark: HTTP `POST /public/v1/submit/export_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/export_wallet/post(ExportWallet)`.
  public enum ExportWallet {
    public static let id: Swift.String = "ExportWallet"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/export_wallet/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.ExportWallet.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.ExportWallet.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.ExportWallet.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/export_wallet/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/export_wallet/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.ExportWalletRequest)
      }
      public var body: Operations.ExportWallet.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.ExportWallet.Input.Headers = .init(),
        body: Operations.ExportWallet.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/export_wallet/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/export_wallet/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.ExportWallet.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.ExportWallet.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/export_wallet/post(ExportWallet)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.ExportWallet.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.ExportWallet.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Export Wallet Account
  ///
  /// Exports a Wallet Account
  ///
  /// - Remark: HTTP `POST /public/v1/submit/export_wallet_account`.
  /// - Remark: Generated from `#/paths//public/v1/submit/export_wallet_account/post(ExportWalletAccount)`.
  public enum ExportWalletAccount {
    public static let id: Swift.String = "ExportWalletAccount"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/export_wallet_account/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.ExportWalletAccount.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.ExportWalletAccount.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.ExportWalletAccount.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/export_wallet_account/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/export_wallet_account/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.ExportWalletAccountRequest)
      }
      public var body: Operations.ExportWalletAccount.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.ExportWalletAccount.Input.Headers = .init(),
        body: Operations.ExportWalletAccount.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/export_wallet_account/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/export_wallet_account/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.ExportWalletAccount.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.ExportWalletAccount.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/export_wallet_account/post(ExportWalletAccount)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.ExportWalletAccount.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.ExportWalletAccount.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Import Private Key
  ///
  /// Imports a private key
  ///
  /// - Remark: HTTP `POST /public/v1/submit/import_private_key`.
  /// - Remark: Generated from `#/paths//public/v1/submit/import_private_key/post(ImportPrivateKey)`.
  public enum ImportPrivateKey {
    public static let id: Swift.String = "ImportPrivateKey"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/import_private_key/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.ImportPrivateKey.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.ImportPrivateKey.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.ImportPrivateKey.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/import_private_key/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/import_private_key/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.ImportPrivateKeyRequest)
      }
      public var body: Operations.ImportPrivateKey.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.ImportPrivateKey.Input.Headers = .init(),
        body: Operations.ImportPrivateKey.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/import_private_key/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/import_private_key/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.ImportPrivateKey.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.ImportPrivateKey.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/import_private_key/post(ImportPrivateKey)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.ImportPrivateKey.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.ImportPrivateKey.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Import Wallet
  ///
  /// Imports a wallet
  ///
  /// - Remark: HTTP `POST /public/v1/submit/import_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/import_wallet/post(ImportWallet)`.
  public enum ImportWallet {
    public static let id: Swift.String = "ImportWallet"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/import_wallet/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.ImportWallet.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.ImportWallet.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.ImportWallet.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/import_wallet/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/import_wallet/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.ImportWalletRequest)
      }
      public var body: Operations.ImportWallet.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.ImportWallet.Input.Headers = .init(),
        body: Operations.ImportWallet.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/import_wallet/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/import_wallet/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.ImportWallet.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.ImportWallet.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/import_wallet/post(ImportWallet)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.ImportWallet.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.ImportWallet.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Init Import Private Key
  ///
  /// Initializes a new private key import
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_import_private_key`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_import_private_key/post(InitImportPrivateKey)`.
  public enum InitImportPrivateKey {
    public static let id: Swift.String = "InitImportPrivateKey"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/init_import_private_key/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.InitImportPrivateKey.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.InitImportPrivateKey.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.InitImportPrivateKey.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/init_import_private_key/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/init_import_private_key/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.InitImportPrivateKeyRequest)
      }
      public var body: Operations.InitImportPrivateKey.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.InitImportPrivateKey.Input.Headers = .init(),
        body: Operations.InitImportPrivateKey.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/init_import_private_key/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/init_import_private_key/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.InitImportPrivateKey.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.InitImportPrivateKey.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/init_import_private_key/post(InitImportPrivateKey)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.InitImportPrivateKey.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.InitImportPrivateKey.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Init Import Wallet
  ///
  /// Initializes a new wallet import
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_import_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_import_wallet/post(InitImportWallet)`.
  public enum InitImportWallet {
    public static let id: Swift.String = "InitImportWallet"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/init_import_wallet/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.InitImportWallet.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.InitImportWallet.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.InitImportWallet.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/init_import_wallet/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/init_import_wallet/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.InitImportWalletRequest)
      }
      public var body: Operations.InitImportWallet.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.InitImportWallet.Input.Headers = .init(),
        body: Operations.InitImportWallet.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/init_import_wallet/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/init_import_wallet/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.InitImportWallet.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.InitImportWallet.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/init_import_wallet/post(InitImportWallet)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.InitImportWallet.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.InitImportWallet.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Init Generic OTP
  ///
  /// Initiate a Generic OTP activity
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_otp`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_otp/post(InitOtp)`.
  public enum InitOtp {
    public static let id: Swift.String = "InitOtp"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/init_otp/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.InitOtp.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.InitOtp.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.InitOtp.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/init_otp/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/init_otp/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.InitOtpRequest)
      }
      public var body: Operations.InitOtp.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.InitOtp.Input.Headers = .init(),
        body: Operations.InitOtp.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/init_otp/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/init_otp/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.InitOtp.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.InitOtp.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/init_otp/post(InitOtp)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.InitOtp.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.InitOtp.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Init OTP auth
  ///
  /// Initiate an OTP auth activity
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_otp_auth`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_otp_auth/post(InitOtpAuth)`.
  public enum InitOtpAuth {
    public static let id: Swift.String = "InitOtpAuth"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/init_otp_auth/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.InitOtpAuth.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.InitOtpAuth.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.InitOtpAuth.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/init_otp_auth/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/init_otp_auth/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.InitOtpAuthRequest)
      }
      public var body: Operations.InitOtpAuth.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.InitOtpAuth.Input.Headers = .init(),
        body: Operations.InitOtpAuth.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/init_otp_auth/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/init_otp_auth/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.InitOtpAuth.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.InitOtpAuth.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/init_otp_auth/post(InitOtpAuth)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.InitOtpAuth.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.InitOtpAuth.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Init Email Recovery
  ///
  /// Initializes a new email recovery
  ///
  /// - Remark: HTTP `POST /public/v1/submit/init_user_email_recovery`.
  /// - Remark: Generated from `#/paths//public/v1/submit/init_user_email_recovery/post(InitUserEmailRecovery)`.
  public enum InitUserEmailRecovery {
    public static let id: Swift.String = "InitUserEmailRecovery"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/init_user_email_recovery/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.InitUserEmailRecovery.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.InitUserEmailRecovery.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.InitUserEmailRecovery.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/init_user_email_recovery/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/init_user_email_recovery/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.InitUserEmailRecoveryRequest)
      }
      public var body: Operations.InitUserEmailRecovery.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.InitUserEmailRecovery.Input.Headers = .init(),
        body: Operations.InitUserEmailRecovery.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/init_user_email_recovery/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/init_user_email_recovery/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.InitUserEmailRecovery.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.InitUserEmailRecovery.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/init_user_email_recovery/post(InitUserEmailRecovery)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.InitUserEmailRecovery.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.InitUserEmailRecovery.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Oauth
  ///
  /// Authenticate a user with an Oidc token (Oauth) - BETA
  ///
  /// - Remark: HTTP `POST /public/v1/submit/oauth`.
  /// - Remark: Generated from `#/paths//public/v1/submit/oauth/post(Oauth)`.
  public enum Oauth {
    public static let id: Swift.String = "Oauth"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/oauth/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.Oauth.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Oauth.AcceptableContentType>] =
            .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.Oauth.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/oauth/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/oauth/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.OauthRequest)
      }
      public var body: Operations.Oauth.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.Oauth.Input.Headers = .init(),
        body: Operations.Oauth.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/oauth/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/oauth/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.Oauth.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.Oauth.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/oauth/post(Oauth)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.Oauth.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.Oauth.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Login with Oauth
  ///
  /// Create an Oauth session for a user
  ///
  /// - Remark: HTTP `POST /public/v1/submit/oauth_login`.
  /// - Remark: Generated from `#/paths//public/v1/submit/oauth_login/post(OauthLogin)`.
  public enum OauthLogin {
    public static let id: Swift.String = "OauthLogin"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/oauth_login/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.OauthLogin.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.OauthLogin.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.OauthLogin.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/oauth_login/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/oauth_login/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.OauthLoginRequest)
      }
      public var body: Operations.OauthLogin.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.OauthLogin.Input.Headers = .init(),
        body: Operations.OauthLogin.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/oauth_login/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/oauth_login/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.OauthLogin.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.OauthLogin.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/oauth_login/post(OauthLogin)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.OauthLogin.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.OauthLogin.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// OTP auth
  ///
  /// Authenticate a user with an OTP code sent via email or SMS
  ///
  /// - Remark: HTTP `POST /public/v1/submit/otp_auth`.
  /// - Remark: Generated from `#/paths//public/v1/submit/otp_auth/post(OtpAuth)`.
  public enum OtpAuth {
    public static let id: Swift.String = "OtpAuth"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/otp_auth/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.OtpAuth.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.OtpAuth.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.OtpAuth.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/otp_auth/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/otp_auth/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.OtpAuthRequest)
      }
      public var body: Operations.OtpAuth.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.OtpAuth.Input.Headers = .init(),
        body: Operations.OtpAuth.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/otp_auth/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/otp_auth/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.OtpAuth.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.OtpAuth.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/otp_auth/post(OtpAuth)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.OtpAuth.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.OtpAuth.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Login with OTP
  ///
  /// Create an OTP session for a user
  ///
  /// - Remark: HTTP `POST /public/v1/submit/otp_login`.
  /// - Remark: Generated from `#/paths//public/v1/submit/otp_login/post(OtpLogin)`.
  public enum OtpLogin {
    public static let id: Swift.String = "OtpLogin"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/otp_login/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.OtpLogin.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.OtpLogin.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.OtpLogin.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/otp_login/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/otp_login/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.OtpLoginRequest)
      }
      public var body: Operations.OtpLogin.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.OtpLogin.Input.Headers = .init(),
        body: Operations.OtpLogin.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/otp_login/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/otp_login/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.OtpLogin.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.OtpLogin.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/otp_login/post(OtpLogin)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.OtpLogin.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.OtpLogin.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Recover a user
  ///
  /// Completes the process of recovering a user by adding an authenticator
  ///
  /// - Remark: HTTP `POST /public/v1/submit/recover_user`.
  /// - Remark: Generated from `#/paths//public/v1/submit/recover_user/post(RecoverUser)`.
  public enum RecoverUser {
    public static let id: Swift.String = "RecoverUser"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/recover_user/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.RecoverUser.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.RecoverUser.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.RecoverUser.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/recover_user/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/recover_user/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.RecoverUserRequest)
      }
      public var body: Operations.RecoverUser.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.RecoverUser.Input.Headers = .init(),
        body: Operations.RecoverUser.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/recover_user/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/recover_user/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.RecoverUser.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.RecoverUser.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/recover_user/post(RecoverUser)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.RecoverUser.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.RecoverUser.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Reject Activity
  ///
  /// Reject an Activity
  ///
  /// - Remark: HTTP `POST /public/v1/submit/reject_activity`.
  /// - Remark: Generated from `#/paths//public/v1/submit/reject_activity/post(RejectActivity)`.
  public enum RejectActivity {
    public static let id: Swift.String = "RejectActivity"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/reject_activity/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.RejectActivity.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.RejectActivity.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.RejectActivity.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/reject_activity/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/reject_activity/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.RejectActivityRequest)
      }
      public var body: Operations.RejectActivity.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.RejectActivity.Input.Headers = .init(),
        body: Operations.RejectActivity.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/reject_activity/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/reject_activity/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.RejectActivity.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.RejectActivity.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/reject_activity/post(RejectActivity)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.RejectActivity.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.RejectActivity.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Remove Organization Feature
  ///
  /// Removes an organization feature. This activity must be approved by the current root quorum.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/remove_organization_feature`.
  /// - Remark: Generated from `#/paths//public/v1/submit/remove_organization_feature/post(RemoveOrganizationFeature)`.
  public enum RemoveOrganizationFeature {
    public static let id: Swift.String = "RemoveOrganizationFeature"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/remove_organization_feature/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.RemoveOrganizationFeature.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.RemoveOrganizationFeature.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.RemoveOrganizationFeature.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/remove_organization_feature/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/remove_organization_feature/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.RemoveOrganizationFeatureRequest)
      }
      public var body: Operations.RemoveOrganizationFeature.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.RemoveOrganizationFeature.Input.Headers = .init(),
        body: Operations.RemoveOrganizationFeature.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/remove_organization_feature/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/remove_organization_feature/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.RemoveOrganizationFeature.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.RemoveOrganizationFeature.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/remove_organization_feature/post(RemoveOrganizationFeature)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.RemoveOrganizationFeature.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.RemoveOrganizationFeature.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Set Organization Feature
  ///
  /// Sets an organization feature. This activity must be approved by the current root quorum.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/set_organization_feature`.
  /// - Remark: Generated from `#/paths//public/v1/submit/set_organization_feature/post(SetOrganizationFeature)`.
  public enum SetOrganizationFeature {
    public static let id: Swift.String = "SetOrganizationFeature"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/set_organization_feature/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.SetOrganizationFeature.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.SetOrganizationFeature.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.SetOrganizationFeature.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/set_organization_feature/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/set_organization_feature/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.SetOrganizationFeatureRequest)
      }
      public var body: Operations.SetOrganizationFeature.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.SetOrganizationFeature.Input.Headers = .init(),
        body: Operations.SetOrganizationFeature.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/set_organization_feature/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/set_organization_feature/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.SetOrganizationFeature.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.SetOrganizationFeature.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/set_organization_feature/post(SetOrganizationFeature)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.SetOrganizationFeature.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.SetOrganizationFeature.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Sign Raw Payload
  ///
  /// Sign a raw payload
  ///
  /// - Remark: HTTP `POST /public/v1/submit/sign_raw_payload`.
  /// - Remark: Generated from `#/paths//public/v1/submit/sign_raw_payload/post(SignRawPayload)`.
  public enum SignRawPayload {
    public static let id: Swift.String = "SignRawPayload"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/sign_raw_payload/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.SignRawPayload.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.SignRawPayload.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.SignRawPayload.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/sign_raw_payload/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/sign_raw_payload/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.SignRawPayloadRequest)
      }
      public var body: Operations.SignRawPayload.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.SignRawPayload.Input.Headers = .init(),
        body: Operations.SignRawPayload.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/sign_raw_payload/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/sign_raw_payload/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.SignRawPayload.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.SignRawPayload.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/sign_raw_payload/post(SignRawPayload)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.SignRawPayload.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.SignRawPayload.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Sign Raw Payloads
  ///
  /// Sign multiple raw payloads with the same signing parameters
  ///
  /// - Remark: HTTP `POST /public/v1/submit/sign_raw_payloads`.
  /// - Remark: Generated from `#/paths//public/v1/submit/sign_raw_payloads/post(SignRawPayloads)`.
  public enum SignRawPayloads {
    public static let id: Swift.String = "SignRawPayloads"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/sign_raw_payloads/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.SignRawPayloads.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.SignRawPayloads.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.SignRawPayloads.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/sign_raw_payloads/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/sign_raw_payloads/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.SignRawPayloadsRequest)
      }
      public var body: Operations.SignRawPayloads.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.SignRawPayloads.Input.Headers = .init(),
        body: Operations.SignRawPayloads.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/sign_raw_payloads/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/sign_raw_payloads/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.SignRawPayloads.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.SignRawPayloads.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/sign_raw_payloads/post(SignRawPayloads)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.SignRawPayloads.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.SignRawPayloads.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Sign Transaction
  ///
  /// Sign a transaction
  ///
  /// - Remark: HTTP `POST /public/v1/submit/sign_transaction`.
  /// - Remark: Generated from `#/paths//public/v1/submit/sign_transaction/post(SignTransaction)`.
  public enum SignTransaction {
    public static let id: Swift.String = "SignTransaction"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/sign_transaction/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.SignTransaction.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.SignTransaction.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.SignTransaction.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/sign_transaction/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/sign_transaction/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.SignTransactionRequest)
      }
      public var body: Operations.SignTransaction.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.SignTransaction.Input.Headers = .init(),
        body: Operations.SignTransaction.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/sign_transaction/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/sign_transaction/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.SignTransaction.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.SignTransaction.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/sign_transaction/post(SignTransaction)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.SignTransaction.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.SignTransaction.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Login with a Stamp
  ///
  /// Create a session for a user through stamping client side (api key, wallet client, or passkey client)
  ///
  /// - Remark: HTTP `POST /public/v1/submit/stamp_login`.
  /// - Remark: Generated from `#/paths//public/v1/submit/stamp_login/post(StampLogin)`.
  public enum StampLogin {
    public static let id: Swift.String = "StampLogin"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/stamp_login/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.StampLogin.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.StampLogin.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.StampLogin.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/stamp_login/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/stamp_login/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.StampLoginRequest)
      }
      public var body: Operations.StampLogin.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.StampLogin.Input.Headers = .init(),
        body: Operations.StampLogin.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/stamp_login/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/stamp_login/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.StampLogin.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.StampLogin.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/stamp_login/post(StampLogin)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.StampLogin.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.StampLogin.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Update Policy
  ///
  /// Update an existing Policy
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_policy`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_policy/post(UpdatePolicy)`.
  public enum UpdatePolicy {
    public static let id: Swift.String = "UpdatePolicy"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/update_policy/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.UpdatePolicy.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.UpdatePolicy.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.UpdatePolicy.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/update_policy/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_policy/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.UpdatePolicyRequest)
      }
      public var body: Operations.UpdatePolicy.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.UpdatePolicy.Input.Headers = .init(),
        body: Operations.UpdatePolicy.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_policy/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/update_policy/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.UpdatePolicy.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.UpdatePolicy.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/update_policy/post(UpdatePolicy)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.UpdatePolicy.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.UpdatePolicy.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Update Private Key Tag
  ///
  /// Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_private_key_tag`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_private_key_tag/post(UpdatePrivateKeyTag)`.
  public enum UpdatePrivateKeyTag {
    public static let id: Swift.String = "UpdatePrivateKeyTag"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/update_private_key_tag/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.UpdatePrivateKeyTag.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.UpdatePrivateKeyTag.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.UpdatePrivateKeyTag.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/update_private_key_tag/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_private_key_tag/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.UpdatePrivateKeyTagRequest)
      }
      public var body: Operations.UpdatePrivateKeyTag.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.UpdatePrivateKeyTag.Input.Headers = .init(),
        body: Operations.UpdatePrivateKeyTag.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_private_key_tag/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/update_private_key_tag/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.UpdatePrivateKeyTag.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.UpdatePrivateKeyTag.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/update_private_key_tag/post(UpdatePrivateKeyTag)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.UpdatePrivateKeyTag.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.UpdatePrivateKeyTag.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Update Root Quorum
  ///
  /// Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_root_quorum`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_root_quorum/post(UpdateRootQuorum)`.
  public enum UpdateRootQuorum {
    public static let id: Swift.String = "UpdateRootQuorum"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/update_root_quorum/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.UpdateRootQuorum.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.UpdateRootQuorum.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.UpdateRootQuorum.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/update_root_quorum/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_root_quorum/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.UpdateRootQuorumRequest)
      }
      public var body: Operations.UpdateRootQuorum.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.UpdateRootQuorum.Input.Headers = .init(),
        body: Operations.UpdateRootQuorum.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_root_quorum/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/update_root_quorum/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.UpdateRootQuorum.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.UpdateRootQuorum.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/update_root_quorum/post(UpdateRootQuorum)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.UpdateRootQuorum.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.UpdateRootQuorum.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Update User
  ///
  /// Update a User in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user/post(UpdateUser)`.
  public enum UpdateUser {
    public static let id: Swift.String = "UpdateUser"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/update_user/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.UpdateUser.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.UpdateUser.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.UpdateUser.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/update_user/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_user/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.UpdateUserRequest)
      }
      public var body: Operations.UpdateUser.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.UpdateUser.Input.Headers = .init(),
        body: Operations.UpdateUser.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_user/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/update_user/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.UpdateUser.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.UpdateUser.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/update_user/post(UpdateUser)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.UpdateUser.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.UpdateUser.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Update User's Email
  ///
  /// Update a User's email in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user_email`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user_email/post(UpdateUserEmail)`.
  public enum UpdateUserEmail {
    public static let id: Swift.String = "UpdateUserEmail"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/update_user_email/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.UpdateUserEmail.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.UpdateUserEmail.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.UpdateUserEmail.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/update_user_email/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_user_email/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.UpdateUserEmailRequest)
      }
      public var body: Operations.UpdateUserEmail.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.UpdateUserEmail.Input.Headers = .init(),
        body: Operations.UpdateUserEmail.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_user_email/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/update_user_email/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.UpdateUserEmail.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.UpdateUserEmail.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/update_user_email/post(UpdateUserEmail)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.UpdateUserEmail.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.UpdateUserEmail.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Update User's Name
  ///
  /// Update a User's name in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user_name`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user_name/post(UpdateUserName)`.
  public enum UpdateUserName {
    public static let id: Swift.String = "UpdateUserName"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/update_user_name/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.UpdateUserName.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.UpdateUserName.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.UpdateUserName.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/update_user_name/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_user_name/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.UpdateUserNameRequest)
      }
      public var body: Operations.UpdateUserName.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.UpdateUserName.Input.Headers = .init(),
        body: Operations.UpdateUserName.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_user_name/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/update_user_name/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.UpdateUserName.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.UpdateUserName.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/update_user_name/post(UpdateUserName)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.UpdateUserName.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.UpdateUserName.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Update User's Phone Number
  ///
  /// Update a User's phone number in an existing Organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user_phone_number`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user_phone_number/post(UpdateUserPhoneNumber)`.
  public enum UpdateUserPhoneNumber {
    public static let id: Swift.String = "UpdateUserPhoneNumber"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/update_user_phone_number/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.UpdateUserPhoneNumber.AcceptableContentType
          >]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.UpdateUserPhoneNumber.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.UpdateUserPhoneNumber.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/update_user_phone_number/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_user_phone_number/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.UpdateUserPhoneNumberRequest)
      }
      public var body: Operations.UpdateUserPhoneNumber.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.UpdateUserPhoneNumber.Input.Headers = .init(),
        body: Operations.UpdateUserPhoneNumber.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_user_phone_number/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/update_user_phone_number/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.UpdateUserPhoneNumber.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.UpdateUserPhoneNumber.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/update_user_phone_number/post(UpdateUserPhoneNumber)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.UpdateUserPhoneNumber.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.UpdateUserPhoneNumber.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Update User Tag
  ///
  /// Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_user_tag`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_user_tag/post(UpdateUserTag)`.
  public enum UpdateUserTag {
    public static let id: Swift.String = "UpdateUserTag"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/update_user_tag/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.UpdateUserTag.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.UpdateUserTag.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.UpdateUserTag.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/update_user_tag/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_user_tag/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.UpdateUserTagRequest)
      }
      public var body: Operations.UpdateUserTag.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.UpdateUserTag.Input.Headers = .init(),
        body: Operations.UpdateUserTag.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_user_tag/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/update_user_tag/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.UpdateUserTag.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.UpdateUserTag.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/update_user_tag/post(UpdateUserTag)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.UpdateUserTag.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.UpdateUserTag.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Update Wallet
  ///
  /// Update a wallet for an organization
  ///
  /// - Remark: HTTP `POST /public/v1/submit/update_wallet`.
  /// - Remark: Generated from `#/paths//public/v1/submit/update_wallet/post(UpdateWallet)`.
  public enum UpdateWallet {
    public static let id: Swift.String = "UpdateWallet"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/update_wallet/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.UpdateWallet.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.UpdateWallet.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.UpdateWallet.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/update_wallet/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_wallet/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.UpdateWalletRequest)
      }
      public var body: Operations.UpdateWallet.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.UpdateWallet.Input.Headers = .init(),
        body: Operations.UpdateWallet.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/update_wallet/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/update_wallet/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.UpdateWallet.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.UpdateWallet.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/update_wallet/post(UpdateWallet)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.UpdateWallet.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.UpdateWallet.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
  /// Verify Generic OTP
  ///
  /// Verify a Generic OTP
  ///
  /// - Remark: HTTP `POST /public/v1/submit/verify_otp`.
  /// - Remark: Generated from `#/paths//public/v1/submit/verify_otp/post(VerifyOtp)`.
  public enum VerifyOtp {
    public static let id: Swift.String = "VerifyOtp"
    public struct Input: Sendable, Hashable {
      /// - Remark: Generated from `#/paths/public/v1/submit/verify_otp/POST/header`.
      public struct Headers: Sendable, Hashable {
        public var accept:
          [OpenAPIRuntime.AcceptHeaderContentType<Operations.VerifyOtp.AcceptableContentType>]
        /// Creates a new `Headers`.
        ///
        /// - Parameters:
        ///   - accept:
        public init(
          accept: [OpenAPIRuntime.AcceptHeaderContentType<
            Operations.VerifyOtp.AcceptableContentType
          >] = .defaultValues()
        ) {
          self.accept = accept
        }
      }
      public var headers: Operations.VerifyOtp.Input.Headers
      /// - Remark: Generated from `#/paths/public/v1/submit/verify_otp/POST/requestBody`.
      @frozen public enum Body: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/verify_otp/POST/requestBody/content/application\/json`.
        case json(Components.Schemas.VerifyOtpRequest)
      }
      public var body: Operations.VerifyOtp.Input.Body
      /// Creates a new `Input`.
      ///
      /// - Parameters:
      ///   - headers:
      ///   - body:
      public init(
        headers: Operations.VerifyOtp.Input.Headers = .init(),
        body: Operations.VerifyOtp.Input.Body
      ) {
        self.headers = headers
        self.body = body
      }
    }
    @frozen public enum Output: Sendable, Hashable {
      public struct Ok: Sendable, Hashable {
        /// - Remark: Generated from `#/paths/public/v1/submit/verify_otp/POST/responses/200/content`.
        @frozen public enum Body: Sendable, Hashable {
          /// - Remark: Generated from `#/paths/public/v1/submit/verify_otp/POST/responses/200/content/application\/json`.
          case json(Components.Schemas.ActivityResponse)
          /// The associated value of the enum case if `self` is `.json`.
          ///
          /// - Throws: An error if `self` is not `.json`.
          /// - SeeAlso: `.json`.
          public var json: Components.Schemas.ActivityResponse {
            get throws {
              switch self {
              case let .json(body):
                return body
              }
            }
          }
        }
        /// Received HTTP response body
        public var body: Operations.VerifyOtp.Output.Ok.Body
        /// Creates a new `Ok`.
        ///
        /// - Parameters:
        ///   - body: Received HTTP response body
        public init(body: Operations.VerifyOtp.Output.Ok.Body) {
          self.body = body
        }
      }
      /// A successful response.
      ///
      /// - Remark: Generated from `#/paths//public/v1/submit/verify_otp/post(VerifyOtp)/responses/200`.
      ///
      /// HTTP response code: `200 ok`.
      case ok(Operations.VerifyOtp.Output.Ok)
      /// The associated value of the enum case if `self` is `.ok`.
      ///
      /// - Throws: An error if `self` is not `.ok`.
      /// - SeeAlso: `.ok`.
      public var ok: Operations.VerifyOtp.Output.Ok {
        get throws {
          switch self {
          case let .ok(response):
            return response
          default:
            try throwUnexpectedResponseStatus(
              expectedStatus: "ok",
              response: self
            )
          }
        }
      }
      /// Undocumented response.
      ///
      /// A response with a code that is not documented in the OpenAPI document.
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
    }
    @frozen public enum AcceptableContentType: AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String) {
        switch rawValue.lowercased() {
        case "application/json":
          self = .json
        default:
          self = .other(rawValue)
        }
      }
      public var rawValue: Swift.String {
        switch self {
        case let .other(string):
          return string
        case .json:
          return "application/json"
        }
      }
      public static var allCases: [Self] {
        [
          .json
        ]
      }
    }
  }
}
